/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace C4d {

using System;
using System.Runtime.InteropServices;

public class GeListNode : C4DAtomGoal {
  private HandleRef swigCPtr;

  internal GeListNode(IntPtr cPtr, bool cMemoryOwn) : base(C4dApiPINVOKE.GeListNode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(GeListNode obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public GeListNode GetNext() {
    IntPtr cPtr = C4dApiPINVOKE.GeListNode_GetNext(swigCPtr);
    GeListNode ret = (cPtr == IntPtr.Zero) ? null : new GeListNode(cPtr, false);
    return ret;
  }

  public GeListNode GetPred() {
    IntPtr cPtr = C4dApiPINVOKE.GeListNode_GetPred(swigCPtr);
    GeListNode ret = (cPtr == IntPtr.Zero) ? null : new GeListNode(cPtr, false);
    return ret;
  }

  public GeListNode GetDown() {
    IntPtr cPtr = C4dApiPINVOKE.GeListNode_GetDown(swigCPtr);
    GeListNode ret = (cPtr == IntPtr.Zero) ? null : new GeListNode(cPtr, false);
    return ret;
  }

  public GeListNode GetUp() {
    IntPtr cPtr = C4dApiPINVOKE.GeListNode_GetUp(swigCPtr);
    GeListNode ret = (cPtr == IntPtr.Zero) ? null : new GeListNode(cPtr, false);
    return ret;
  }

  public GeListNode GetDownLast() {
    IntPtr cPtr = C4dApiPINVOKE.GeListNode_GetDownLast(swigCPtr);
    GeListNode ret = (cPtr == IntPtr.Zero) ? null : new GeListNode(cPtr, false);
    return ret;
  }

  public void InsertBefore(GeListNode bl) {
    C4dApiPINVOKE.GeListNode_InsertBefore(swigCPtr, GeListNode.getCPtr(bl));
  }

  public void InsertAfter(GeListNode bl) {
    C4dApiPINVOKE.GeListNode_InsertAfter(swigCPtr, GeListNode.getCPtr(bl));
  }

  public void InsertUnder(GeListNode bl) {
    C4dApiPINVOKE.GeListNode_InsertUnder(swigCPtr, GeListNode.getCPtr(bl));
  }

  public void InsertUnderLast(GeListNode bl) {
    C4dApiPINVOKE.GeListNode_InsertUnderLast(swigCPtr, GeListNode.getCPtr(bl));
  }

  public void Remove() {
    C4dApiPINVOKE.GeListNode_Remove(swigCPtr);
  }

  public GeListHead GetListHead() {
    IntPtr cPtr = C4dApiPINVOKE.GeListNode_GetListHead(swigCPtr);
    GeListHead ret = (cPtr == IntPtr.Zero) ? null : new GeListHead(cPtr, false);
    return ret;
  }

  public int GetNodeID(int index) {
    int ret = C4dApiPINVOKE.GeListNode_GetNodeID__SWIG_0(swigCPtr, index);
    return ret;
  }

  public int GetNodeID() {
    int ret = C4dApiPINVOKE.GeListNode_GetNodeID__SWIG_1(swigCPtr);
    return ret;
  }

  public NodeData GetNodeData(int index) {
    IntPtr cPtr = C4dApiPINVOKE.GeListNode_GetNodeData__SWIG_0(swigCPtr, index);
    NodeData ret = (cPtr == IntPtr.Zero) ? null : new NodeData(cPtr, false);
    return ret;
  }

  public NodeData GetNodeData() {
    IntPtr cPtr = C4dApiPINVOKE.GeListNode_GetNodeData__SWIG_1(swigCPtr);
    NodeData ret = (cPtr == IntPtr.Zero) ? null : new NodeData(cPtr, false);
    return ret;
  }

  public void SetCustomData(GeListNode node) {
    C4dApiPINVOKE.GeListNode_SetCustomData(swigCPtr, GeListNode.getCPtr(node));
  }

  public GeListNode GetCustomData() {
    IntPtr cPtr = C4dApiPINVOKE.GeListNode_GetCustomData(swigCPtr);
    GeListNode ret = (cPtr == IntPtr.Zero) ? null : new GeListNode(cPtr, false);
    return ret;
  }

  public BaseDocument GetDocument() {
    IntPtr cPtr = C4dApiPINVOKE.GeListNode_GetDocument(swigCPtr);
    BaseDocument ret = (cPtr == IntPtr.Zero) ? null : new BaseDocument(cPtr, false);
    return ret;
  }

  public int GetBranchInfo(BranchInfo info, int max, GETBRANCHINFO flags) {
    int ret = C4dApiPINVOKE.GeListNode_GetBranchInfo(swigCPtr, BranchInfo.getCPtr(info), max, (int)flags);
    return ret;
  }

  public bool IsDocumentRelated() {
    bool ret = C4dApiPINVOKE.GeListNode_IsDocumentRelated(swigCPtr);
    return ret;
  }

  public bool GetNBit(NBIT bit) {
    bool ret = C4dApiPINVOKE.GeListNode_GetNBit(swigCPtr, (int)bit);
    return ret;
  }

  public bool ChangeNBit(NBIT bit, NBITCONTROL bitmode) {
    bool ret = C4dApiPINVOKE.GeListNode_ChangeNBit(swigCPtr, (int)bit, (int)bitmode);
    return ret;
  }

  public int GetInfo() {
    int ret = C4dApiPINVOKE.GeListNode_GetInfo(swigCPtr);
    return ret;
  }

}

}
