/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace C4d {

using System;
using System.Runtime.InteropServices;

public class CAPoseMorphTag : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CAPoseMorphTag(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CAPoseMorphTag obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static CAPoseMorphTag Alloc() {
    IntPtr cPtr = C4dApiPINVOKE.CAPoseMorphTag_Alloc();
    CAPoseMorphTag ret = (cPtr == IntPtr.Zero) ? null : new CAPoseMorphTag(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_CAPoseMorphTag pTag) {
    C4dApiPINVOKE.CAPoseMorphTag_Free(SWIGTYPE_p_p_CAPoseMorphTag.getCPtr(pTag));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetMorphCount() {
    int ret = C4dApiPINVOKE.CAPoseMorphTag_GetMorphCount(swigCPtr);
    return ret;
  }

  public CAMorph GetMorph(int index) {
    IntPtr cPtr = C4dApiPINVOKE.CAPoseMorphTag_GetMorph(swigCPtr, index);
    CAMorph ret = (cPtr == IntPtr.Zero) ? null : new CAMorph(cPtr, false);
    return ret;
  }

  public DescID GetMorphID(int index) {
    DescID ret = new DescID(C4dApiPINVOKE.CAPoseMorphTag_GetMorphID(swigCPtr, index), true);
    return ret;
  }

  public int GetActiveMorphIndex() {
    int ret = C4dApiPINVOKE.CAPoseMorphTag_GetActiveMorphIndex(swigCPtr);
    return ret;
  }

  public int GetMode() {
    int ret = C4dApiPINVOKE.CAPoseMorphTag_GetMode(swigCPtr);
    return ret;
  }

  public CAMorph GetActiveMorph() {
    IntPtr cPtr = C4dApiPINVOKE.CAPoseMorphTag_GetActiveMorph(swigCPtr);
    CAMorph ret = (cPtr == IntPtr.Zero) ? null : new CAMorph(cPtr, false);
    return ret;
  }

  public CAMorph GetMorphBase() {
    IntPtr cPtr = C4dApiPINVOKE.CAPoseMorphTag_GetMorphBase(swigCPtr);
    CAMorph ret = (cPtr == IntPtr.Zero) ? null : new CAMorph(cPtr, false);
    return ret;
  }

  public CAMorph AddMorph() {
    IntPtr cPtr = C4dApiPINVOKE.CAPoseMorphTag_AddMorph(swigCPtr);
    CAMorph ret = (cPtr == IntPtr.Zero) ? null : new CAMorph(cPtr, false);
    return ret;
  }

  public void RemoveMorph(int index) {
    C4dApiPINVOKE.CAPoseMorphTag_RemoveMorph(swigCPtr, index);
  }

  public void InitMorphs() {
    C4dApiPINVOKE.CAPoseMorphTag_InitMorphs(swigCPtr);
  }

  public void UpdateMorphs() {
    C4dApiPINVOKE.CAPoseMorphTag_UpdateMorphs(swigCPtr);
  }

  public int GetMorphIndex(CAMorph morph) {
    int ret = C4dApiPINVOKE.CAPoseMorphTag_GetMorphIndex(swigCPtr, CAMorph.getCPtr(morph));
    return ret;
  }

  public bool ExitEdit(BaseDocument doc, bool apply) {
    bool ret = C4dApiPINVOKE.CAPoseMorphTag_ExitEdit(swigCPtr, BaseDocument.getCPtr(doc), apply);
    return ret;
  }

}

}
