/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace C4d {

using System;
using System.Runtime.InteropServices;

public class BaseContainer : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BaseContainer(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BaseContainer obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~BaseContainer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          C4dApiPINVOKE.delete_BaseContainer(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public BaseContainer() : this(C4dApiPINVOKE.new_BaseContainer__SWIG_0(), true) {
  }

  public BaseContainer(int id) : this(C4dApiPINVOKE.new_BaseContainer__SWIG_1(id), true) {
  }

  public BaseContainer(BaseContainer n) : this(C4dApiPINVOKE.new_BaseContainer__SWIG_2(BaseContainer.getCPtr(n)), true) {
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public BaseContainer GetClone(COPYFLAGS flags, AliasTrans trans) {
    IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetClone(swigCPtr, (int)flags, AliasTrans.getCPtr(trans));
    BaseContainer ret = (cPtr == IntPtr.Zero) ? null : new BaseContainer(cPtr, false);
    return ret;
  }

  public bool CopyTo(BaseContainer dst, COPYFLAGS flags, AliasTrans trans) {
    bool ret = C4dApiPINVOKE.BaseContainer_CopyTo(swigCPtr, BaseContainer.getCPtr(dst), (int)flags, AliasTrans.getCPtr(trans));
    return ret;
  }

  public void FlushAll() {
    C4dApiPINVOKE.BaseContainer_FlushAll(swigCPtr);
  }

  public int GetId() {
    int ret = C4dApiPINVOKE.BaseContainer_GetId(swigCPtr);
    return ret;
  }

  public void SetId(int c_id) {
    C4dApiPINVOKE.BaseContainer_SetId(swigCPtr, c_id);
  }

  public SWIGTYPE_p_ULONG GetDirty() {
    SWIGTYPE_p_ULONG ret = new SWIGTYPE_p_ULONG(C4dApiPINVOKE.BaseContainer_GetDirty(swigCPtr), true);
    return ret;
  }

  public bool RemoveData(int id) {
    bool ret = C4dApiPINVOKE.BaseContainer_RemoveData(swigCPtr, id);
    return ret;
  }

  public bool RemoveIndex(int i) {
    bool ret = C4dApiPINVOKE.BaseContainer_RemoveIndex(swigCPtr, i);
    return ret;
  }

  public int FindIndex(int id, SWIGTYPE_p_p_GeData ppData) {
    int ret = C4dApiPINVOKE.BaseContainer_FindIndex__SWIG_0(swigCPtr, id, SWIGTYPE_p_p_GeData.getCPtr(ppData));
    return ret;
  }

  public int FindIndex(int id) {
    int ret = C4dApiPINVOKE.BaseContainer_FindIndex__SWIG_1(swigCPtr, id);
    return ret;
  }

  public int GetIndexId(int index) {
    int ret = C4dApiPINVOKE.BaseContainer_GetIndexId(swigCPtr, index);
    return ret;
  }

  public GeData GetDataPointer(int id) {
    IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetDataPointer(swigCPtr, id);
    GeData ret = (cPtr == IntPtr.Zero) ? null : new GeData(cPtr, false);
    return ret;
  }

  public void GetDataPointers(SWIGTYPE_p_LONG ids, int cnt, SWIGTYPE_p_p_GeData data) {
    C4dApiPINVOKE.BaseContainer_GetDataPointers(swigCPtr, SWIGTYPE_p_LONG.getCPtr(ids), cnt, SWIGTYPE_p_p_GeData.getCPtr(data));
  }

  public GeData GetIndexData(int index) {
    IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetIndexData(swigCPtr, index);
    GeData ret = (cPtr == IntPtr.Zero) ? null : new GeData(cPtr, false);
    return ret;
  }

  public GeData InsData(int id, GeData n) {
    IntPtr cPtr = C4dApiPINVOKE.BaseContainer_InsData(swigCPtr, id, GeData.getCPtr(n));
    GeData ret = (cPtr == IntPtr.Zero) ? null : new GeData(cPtr, false);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GeData InsDataAfter(int id, GeData n, GeData last) {
    IntPtr cPtr = C4dApiPINVOKE.BaseContainer_InsDataAfter(swigCPtr, id, GeData.getCPtr(n), GeData.getCPtr(last));
    GeData ret = (cPtr == IntPtr.Zero) ? null : new GeData(cPtr, false);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GeData SetData(int id, GeData n) {
    IntPtr cPtr = C4dApiPINVOKE.BaseContainer_SetData(swigCPtr, id, GeData.getCPtr(n));
    GeData ret = (cPtr == IntPtr.Zero) ? null : new GeData(cPtr, false);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GeData GetData(int id) {
    GeData ret = new GeData(C4dApiPINVOKE.BaseContainer_GetData(swigCPtr, id), false);
    return ret;
  }

  public bool GetBool(int id, bool preset) {
    bool ret = C4dApiPINVOKE.BaseContainer_GetBool__SWIG_0(swigCPtr, id, preset);
    return ret;
  }

  public bool GetBool(int id) {
    bool ret = C4dApiPINVOKE.BaseContainer_GetBool__SWIG_1(swigCPtr, id);
    return ret;
  }

  public int GetLong(int id, int preset) {
    int ret = C4dApiPINVOKE.BaseContainer_GetLong__SWIG_0(swigCPtr, id, preset);
    return ret;
  }

  public int GetLong(int id) {
    int ret = C4dApiPINVOKE.BaseContainer_GetLong__SWIG_1(swigCPtr, id);
    return ret;
  }

  public SWIGTYPE_p_ULONG GetULong(int id, SWIGTYPE_p_ULONG preset) {
    SWIGTYPE_p_ULONG ret = new SWIGTYPE_p_ULONG(C4dApiPINVOKE.BaseContainer_GetULong__SWIG_0(swigCPtr, id, SWIGTYPE_p_ULONG.getCPtr(preset)), true);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_ULONG GetULong(int id) {
    SWIGTYPE_p_ULONG ret = new SWIGTYPE_p_ULONG(C4dApiPINVOKE.BaseContainer_GetULong__SWIG_1(swigCPtr, id), true);
    return ret;
  }

  public SWIGTYPE_p_LLONG GetLLong(int id, SWIGTYPE_p_LLONG preset) {
    SWIGTYPE_p_LLONG ret = new SWIGTYPE_p_LLONG(C4dApiPINVOKE.BaseContainer_GetLLong__SWIG_0(swigCPtr, id, SWIGTYPE_p_LLONG.getCPtr(preset)), true);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_LLONG GetLLong(int id) {
    SWIGTYPE_p_LLONG ret = new SWIGTYPE_p_LLONG(C4dApiPINVOKE.BaseContainer_GetLLong__SWIG_1(swigCPtr, id), true);
    return ret;
  }

  public SWIGTYPE_p_LULONG GetLULong(int id, SWIGTYPE_p_LULONG preset) {
    SWIGTYPE_p_LULONG ret = new SWIGTYPE_p_LULONG(C4dApiPINVOKE.BaseContainer_GetLULong__SWIG_0(swigCPtr, id, SWIGTYPE_p_LULONG.getCPtr(preset)), true);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_LULONG GetLULong(int id) {
    SWIGTYPE_p_LULONG ret = new SWIGTYPE_p_LULONG(C4dApiPINVOKE.BaseContainer_GetLULong__SWIG_1(swigCPtr, id), true);
    return ret;
  }

  public double GetReal(int id, double preset) {
    double ret = C4dApiPINVOKE.BaseContainer_GetReal__SWIG_0(swigCPtr, id, preset);
    return ret;
  }

  public double GetReal(int id) {
    double ret = C4dApiPINVOKE.BaseContainer_GetReal__SWIG_1(swigCPtr, id);
    return ret;
  }

  public SWIGTYPE_p_void GetVoid(int id, SWIGTYPE_p_void preset) {
    IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetVoid__SWIG_0(swigCPtr, id, SWIGTYPE_p_void.getCPtr(preset));
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_void GetVoid(int id) {
    IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetVoid__SWIG_1(swigCPtr, id);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public Fusee.Math.Core.Vector3D /* Vector_cstype_out */ GetVector(int id, Fusee.Math.Core.Vector3D /* constVector&_cstype */ preset)  {  /* <Vector_csout> */
      Fusee.Math.Core.Vector3D ret = C4dApiPINVOKE.BaseContainer_GetVector__SWIG_0(swigCPtr, id, ref preset /* constVector&_csin */);
      return ret;
   } /* <Vector_csout> */ 

  public Fusee.Math.Core.Vector3D /* Vector_cstype_out */ GetVector(int id)  {  /* <Vector_csout> */
      Fusee.Math.Core.Vector3D ret = C4dApiPINVOKE.BaseContainer_GetVector__SWIG_1(swigCPtr, id);
      return ret;
   } /* <Vector_csout> */ 

  public Fusee.Math.Core.Matrix4D /* Matrix_cstype */ GetMatrix(int id, ref Fusee.Math.Core.Matrix4D /* constMatrix&_cstype */ preset) {
    double[] adbl_preset;
    unsafe {adbl_preset = Fusee.Math.ArrayConversion.Convert.Matrix4DToArrayDoubleC4DLayout(preset);    fixed (double *pdbl_preset = adbl_preset) {
    /* constMatrix&_csin_pre */
    try  {  /* <Matrix_csout> */
        C34M ret_c34m = C4dApiPINVOKE.BaseContainer_GetMatrix__SWIG_0(swigCPtr, id, (IntPtr) pdbl_preset /* constMatrix&_csin */);
	  Fusee.Math.Core.Matrix4D ret;
	  unsafe {ret = Fusee.Math.ArrayConversion.Convert.ArrayDoubleC4DLayoutToMatrix4D(ret_c34m.m);}
        return ret;
     } /* </Matrix_csout> */  finally {
        // NOP preset = Fusee.Math.ArrayConversion.Convert.ArrayDoubleC4DLayoutToMatrix4D(pdbl_preset);
        /* constMatrix&_csin_post */
    }
} } /* constMatrix&_csin_terminator */
  }

  public Fusee.Math.Core.Matrix4D /* Matrix_cstype */ GetMatrix(int id)  {  /* <Matrix_csout> */
      C34M ret_c34m = C4dApiPINVOKE.BaseContainer_GetMatrix__SWIG_1(swigCPtr, id);
	  Fusee.Math.Core.Matrix4D ret;
	  unsafe {ret = Fusee.Math.ArrayConversion.Convert.ArrayDoubleC4DLayoutToMatrix4D(ret_c34m.m);}
      return ret;
   } /* </Matrix_csout> */ 

  public string /* String_cstype */ GetString(int id, string /* constString&_cstype */ preset)  {  /* <String_csout> */
      string ret = C4dApiPINVOKE.BaseContainer_GetString__SWIG_0(swigCPtr, id, preset);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
      return ret;
   } /* </String_csout> */ 

  public string /* String_cstype */ GetString(int id)  {  /* <String_csout> */
      string ret = C4dApiPINVOKE.BaseContainer_GetString__SWIG_1(swigCPtr, id);
      return ret;
   } /* </String_csout> */ 

  public SWIGTYPE_p_Filename GetFilename(int id, SWIGTYPE_p_Filename preset) {
    SWIGTYPE_p_Filename ret = new SWIGTYPE_p_Filename(C4dApiPINVOKE.BaseContainer_GetFilename__SWIG_0(swigCPtr, id, SWIGTYPE_p_Filename.getCPtr(preset)), true);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Filename GetFilename(int id) {
    SWIGTYPE_p_Filename ret = new SWIGTYPE_p_Filename(C4dApiPINVOKE.BaseContainer_GetFilename__SWIG_1(swigCPtr, id), true);
    return ret;
  }

  public SWIGTYPE_p_BaseTime GetTime(int id, SWIGTYPE_p_BaseTime preset) {
    SWIGTYPE_p_BaseTime ret = new SWIGTYPE_p_BaseTime(C4dApiPINVOKE.BaseContainer_GetTime__SWIG_0(swigCPtr, id, SWIGTYPE_p_BaseTime.getCPtr(preset)), true);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_BaseTime GetTime(int id) {
    SWIGTYPE_p_BaseTime ret = new SWIGTYPE_p_BaseTime(C4dApiPINVOKE.BaseContainer_GetTime__SWIG_1(swigCPtr, id), true);
    return ret;
  }

  public BaseContainer GetContainer(int id) {
    BaseContainer ret = new BaseContainer(C4dApiPINVOKE.BaseContainer_GetContainer(swigCPtr, id), true);
    return ret;
  }

  public BaseContainer GetContainerInstance(int id) {
    IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetContainerInstance(swigCPtr, id);
    BaseContainer ret = (cPtr == IntPtr.Zero) ? null : new BaseContainer(cPtr, false);
    return ret;
  }

  public BaseList2D GetLink(int id, BaseDocument doc, int instanceof) {
    IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetLink__SWIG_0(swigCPtr, id, BaseDocument.getCPtr(doc), instanceof);
    BaseList2D ret = (cPtr == IntPtr.Zero) ? null : new BaseList2D(cPtr, false);
    return ret;
  }

  public BaseList2D GetLink(int id, BaseDocument doc) {
    IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetLink__SWIG_1(swigCPtr, id, BaseDocument.getCPtr(doc));
    BaseList2D ret = (cPtr == IntPtr.Zero) ? null : new BaseList2D(cPtr, false);
    return ret;
  }

  public BaseObject GetObjectLink(int id, BaseDocument doc) {
    IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetObjectLink(swigCPtr, id, BaseDocument.getCPtr(doc));
    BaseObject ret = (cPtr == IntPtr.Zero) ? null : new BaseObject(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_BaseMaterial GetMaterialLink(int id, BaseDocument doc) {
    IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetMaterialLink(swigCPtr, id, BaseDocument.getCPtr(doc));
    SWIGTYPE_p_BaseMaterial ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_BaseMaterial(cPtr, false);
    return ret;
  }

  public BaseLink GetBaseLink(int id) {
    IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetBaseLink(swigCPtr, id);
    BaseLink ret = (cPtr == IntPtr.Zero) ? null : new BaseLink(cPtr, false);
    return ret;
  }

  public CustomDataType GetCustomDataType(int id, int datatype) {
    IntPtr cPtr = C4dApiPINVOKE.BaseContainer_GetCustomDataType(swigCPtr, id, datatype);
    CustomDataType ret = (cPtr == IntPtr.Zero) ? null : new CustomDataType(cPtr, false);
    return ret;
  }

  public int GetType(int id) {
    int ret = C4dApiPINVOKE.BaseContainer_GetType(swigCPtr, id);
    return ret;
  }

  public void SetBool(int id, bool b) {
    C4dApiPINVOKE.BaseContainer_SetBool(swigCPtr, id, b);
  }

  public void SetLong(int id, int l) {
    C4dApiPINVOKE.BaseContainer_SetLong(swigCPtr, id, l);
  }

  public void SetULong(int id, SWIGTYPE_p_ULONG l) {
    C4dApiPINVOKE.BaseContainer_SetULong(swigCPtr, id, SWIGTYPE_p_ULONG.getCPtr(l));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLLong(int id, SWIGTYPE_p_LLONG l) {
    C4dApiPINVOKE.BaseContainer_SetLLong(swigCPtr, id, SWIGTYPE_p_LLONG.getCPtr(l));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLULong(int id, SWIGTYPE_p_LULONG l) {
    C4dApiPINVOKE.BaseContainer_SetLULong(swigCPtr, id, SWIGTYPE_p_LULONG.getCPtr(l));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetReal(int id, double r) {
    C4dApiPINVOKE.BaseContainer_SetReal(swigCPtr, id, r);
  }

  public void SetVoid(int id, SWIGTYPE_p_void v) {
    C4dApiPINVOKE.BaseContainer_SetVoid(swigCPtr, id, SWIGTYPE_p_void.getCPtr(v));
  }

  public void SetVector(int id, Fusee.Math.Core.Vector3D /* constVector&_cstype */ v) {
    C4dApiPINVOKE.BaseContainer_SetVector(swigCPtr, id, ref v /* constVector&_csin */);
  }

  public void SetMatrix(int id, ref Fusee.Math.Core.Matrix4D /* constMatrix&_cstype */ m) {
    double[] adbl_m;
    unsafe {adbl_m = Fusee.Math.ArrayConversion.Convert.Matrix4DToArrayDoubleC4DLayout(m);    fixed (double *pdbl_m = adbl_m) {
    /* constMatrix&_csin_pre */
    try {
      C4dApiPINVOKE.BaseContainer_SetMatrix(swigCPtr, id, (IntPtr) pdbl_m /* constMatrix&_csin */);
    } finally {
        // NOP m = Fusee.Math.ArrayConversion.Convert.ArrayDoubleC4DLayoutToMatrix4D(pdbl_m);
        /* constMatrix&_csin_post */
    }
} } /* constMatrix&_csin_terminator */
  }

  public void SetString(int id, string /* constString&_cstype */ s) {
    C4dApiPINVOKE.BaseContainer_SetString(swigCPtr, id, s);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFilename(int id, SWIGTYPE_p_Filename f) {
    C4dApiPINVOKE.BaseContainer_SetFilename(swigCPtr, id, SWIGTYPE_p_Filename.getCPtr(f));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTime(int id, SWIGTYPE_p_BaseTime b) {
    C4dApiPINVOKE.BaseContainer_SetTime(swigCPtr, id, SWIGTYPE_p_BaseTime.getCPtr(b));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetContainer(int id, BaseContainer s) {
    C4dApiPINVOKE.BaseContainer_SetContainer(swigCPtr, id, BaseContainer.getCPtr(s));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLink(int id, C4DAtomGoal link) {
    C4dApiPINVOKE.BaseContainer_SetLink(swigCPtr, id, C4DAtomGoal.getCPtr(link));
  }

  public void MergeContainer(BaseContainer src) {
    C4dApiPINVOKE.BaseContainer_MergeContainer(swigCPtr, BaseContainer.getCPtr(src));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetParameter(DescID id, GeData t_data) {
    bool ret = C4dApiPINVOKE.BaseContainer_GetParameter(swigCPtr, DescID.getCPtr(id), GeData.getCPtr(t_data));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetParameter(DescID id, GeData t_data) {
    bool ret = C4dApiPINVOKE.BaseContainer_SetParameter(swigCPtr, DescID.getCPtr(id), GeData.getCPtr(t_data));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Sort() {
    C4dApiPINVOKE.BaseContainer_Sort(swigCPtr);
  }

}

}
