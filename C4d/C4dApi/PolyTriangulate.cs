/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace C4d {

using System;
using System.Runtime.InteropServices;

public class PolyTriangulate : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PolyTriangulate(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(PolyTriangulate obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public static PolyTriangulate Alloc() {
    IntPtr cPtr = C4dApiPINVOKE.PolyTriangulate_Alloc();
    PolyTriangulate ret = (cPtr == IntPtr.Zero) ? null : new PolyTriangulate(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_PolyTriangulate pTriang) {
    C4dApiPINVOKE.PolyTriangulate_Free(SWIGTYPE_p_p_PolyTriangulate.getCPtr(pTriang));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Triangulate(ref Fusee.Math.Core.Vector3D /* Vector*&_cstype */ pvPoints, int lPointCount, SWIGTYPE_p_LONG plSegments, int lSegCnt, SWIGTYPE_p_p_CPolygon pPolys, SWIGTYPE_p_LONG lPolyCount, int lFlags, SWIGTYPE_p_LONG plMap, BaseThread pThread, int lConstraints, SWIGTYPE_p_LONG plConstrainedEdges) {
    bool ret = C4dApiPINVOKE.PolyTriangulate_Triangulate__SWIG_0(swigCPtr, ref pvPoints /* Vector*&_csin */, lPointCount, SWIGTYPE_p_LONG.getCPtr(plSegments), lSegCnt, SWIGTYPE_p_p_CPolygon.getCPtr(pPolys), SWIGTYPE_p_LONG.getCPtr(lPolyCount), lFlags, SWIGTYPE_p_LONG.getCPtr(plMap), BaseThread.getCPtr(pThread), lConstraints, SWIGTYPE_p_LONG.getCPtr(plConstrainedEdges));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Triangulate(ref Fusee.Math.Core.Vector3D /* Vector*&_cstype */ pvPoints, int lPointCount, SWIGTYPE_p_LONG plSegments, int lSegCnt, SWIGTYPE_p_p_CPolygon pPolys, SWIGTYPE_p_LONG lPolyCount, int lFlags, SWIGTYPE_p_LONG plMap, BaseThread pThread, int lConstraints) {
    bool ret = C4dApiPINVOKE.PolyTriangulate_Triangulate__SWIG_1(swigCPtr, ref pvPoints /* Vector*&_csin */, lPointCount, SWIGTYPE_p_LONG.getCPtr(plSegments), lSegCnt, SWIGTYPE_p_p_CPolygon.getCPtr(pPolys), SWIGTYPE_p_LONG.getCPtr(lPolyCount), lFlags, SWIGTYPE_p_LONG.getCPtr(plMap), BaseThread.getCPtr(pThread), lConstraints);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Triangulate(ref Fusee.Math.Core.Vector3D /* Vector*&_cstype */ pvPoints, int lPointCount, SWIGTYPE_p_LONG plSegments, int lSegCnt, SWIGTYPE_p_p_CPolygon pPolys, SWIGTYPE_p_LONG lPolyCount, int lFlags, SWIGTYPE_p_LONG plMap, BaseThread pThread) {
    bool ret = C4dApiPINVOKE.PolyTriangulate_Triangulate__SWIG_2(swigCPtr, ref pvPoints /* Vector*&_csin */, lPointCount, SWIGTYPE_p_LONG.getCPtr(plSegments), lSegCnt, SWIGTYPE_p_p_CPolygon.getCPtr(pPolys), SWIGTYPE_p_LONG.getCPtr(lPolyCount), lFlags, SWIGTYPE_p_LONG.getCPtr(plMap), BaseThread.getCPtr(pThread));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Triangulate(ref Fusee.Math.Core.Vector3D /* Vector*&_cstype */ pvPoints, int lPointCount, SWIGTYPE_p_LONG plSegments, int lSegCnt, SWIGTYPE_p_p_CPolygon pPolys, SWIGTYPE_p_LONG lPolyCount, int lFlags, SWIGTYPE_p_LONG plMap) {
    bool ret = C4dApiPINVOKE.PolyTriangulate_Triangulate__SWIG_3(swigCPtr, ref pvPoints /* Vector*&_csin */, lPointCount, SWIGTYPE_p_LONG.getCPtr(plSegments), lSegCnt, SWIGTYPE_p_p_CPolygon.getCPtr(pPolys), SWIGTYPE_p_LONG.getCPtr(lPolyCount), lFlags, SWIGTYPE_p_LONG.getCPtr(plMap));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Triangulate(ref Fusee.Math.Core.Vector3D /* Vector*&_cstype */ pvPoints, int lPointCount, SWIGTYPE_p_LONG plSegments, int lSegCnt, SWIGTYPE_p_p_CPolygon pPolys, SWIGTYPE_p_LONG lPolyCount, int lFlags) {
    bool ret = C4dApiPINVOKE.PolyTriangulate_Triangulate__SWIG_4(swigCPtr, ref pvPoints /* Vector*&_csin */, lPointCount, SWIGTYPE_p_LONG.getCPtr(plSegments), lSegCnt, SWIGTYPE_p_p_CPolygon.getCPtr(pPolys), SWIGTYPE_p_LONG.getCPtr(lPolyCount), lFlags);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Triangulate(ref Fusee.Math.Core.Vector3D /* Vector*&_cstype */ pvPoints, int lPointCount, SWIGTYPE_p_LONG plSegments, int lSegCnt, SWIGTYPE_p_p_CPolygon pPolys, SWIGTYPE_p_LONG lPolyCount) {
    bool ret = C4dApiPINVOKE.PolyTriangulate_Triangulate__SWIG_5(swigCPtr, ref pvPoints /* Vector*&_csin */, lPointCount, SWIGTYPE_p_LONG.getCPtr(plSegments), lSegCnt, SWIGTYPE_p_p_CPolygon.getCPtr(pPolys), SWIGTYPE_p_LONG.getCPtr(lPolyCount));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool TriangulateRelease(ref Fusee.Math.Core.Vector3D /* Vector*&_cstype */ pvPoints, int lPointCount, SWIGTYPE_p_LONG plSegments, int lSegCnt, SWIGTYPE_p_p_CPolygon pPolys, SWIGTYPE_p_LONG lPolyCount, int lFlags, SWIGTYPE_p_LONG plMap, BaseThread pThread, int lConstraints, SWIGTYPE_p_LONG plConstrainedEdges) {
    bool ret = C4dApiPINVOKE.PolyTriangulate_TriangulateRelease__SWIG_0(swigCPtr, ref pvPoints /* Vector*&_csin */, lPointCount, SWIGTYPE_p_LONG.getCPtr(plSegments), lSegCnt, SWIGTYPE_p_p_CPolygon.getCPtr(pPolys), SWIGTYPE_p_LONG.getCPtr(lPolyCount), lFlags, SWIGTYPE_p_LONG.getCPtr(plMap), BaseThread.getCPtr(pThread), lConstraints, SWIGTYPE_p_LONG.getCPtr(plConstrainedEdges));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool TriangulateRelease(ref Fusee.Math.Core.Vector3D /* Vector*&_cstype */ pvPoints, int lPointCount, SWIGTYPE_p_LONG plSegments, int lSegCnt, SWIGTYPE_p_p_CPolygon pPolys, SWIGTYPE_p_LONG lPolyCount, int lFlags, SWIGTYPE_p_LONG plMap, BaseThread pThread, int lConstraints) {
    bool ret = C4dApiPINVOKE.PolyTriangulate_TriangulateRelease__SWIG_1(swigCPtr, ref pvPoints /* Vector*&_csin */, lPointCount, SWIGTYPE_p_LONG.getCPtr(plSegments), lSegCnt, SWIGTYPE_p_p_CPolygon.getCPtr(pPolys), SWIGTYPE_p_LONG.getCPtr(lPolyCount), lFlags, SWIGTYPE_p_LONG.getCPtr(plMap), BaseThread.getCPtr(pThread), lConstraints);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool TriangulateRelease(ref Fusee.Math.Core.Vector3D /* Vector*&_cstype */ pvPoints, int lPointCount, SWIGTYPE_p_LONG plSegments, int lSegCnt, SWIGTYPE_p_p_CPolygon pPolys, SWIGTYPE_p_LONG lPolyCount, int lFlags, SWIGTYPE_p_LONG plMap, BaseThread pThread) {
    bool ret = C4dApiPINVOKE.PolyTriangulate_TriangulateRelease__SWIG_2(swigCPtr, ref pvPoints /* Vector*&_csin */, lPointCount, SWIGTYPE_p_LONG.getCPtr(plSegments), lSegCnt, SWIGTYPE_p_p_CPolygon.getCPtr(pPolys), SWIGTYPE_p_LONG.getCPtr(lPolyCount), lFlags, SWIGTYPE_p_LONG.getCPtr(plMap), BaseThread.getCPtr(pThread));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool TriangulateRelease(ref Fusee.Math.Core.Vector3D /* Vector*&_cstype */ pvPoints, int lPointCount, SWIGTYPE_p_LONG plSegments, int lSegCnt, SWIGTYPE_p_p_CPolygon pPolys, SWIGTYPE_p_LONG lPolyCount, int lFlags, SWIGTYPE_p_LONG plMap) {
    bool ret = C4dApiPINVOKE.PolyTriangulate_TriangulateRelease__SWIG_3(swigCPtr, ref pvPoints /* Vector*&_csin */, lPointCount, SWIGTYPE_p_LONG.getCPtr(plSegments), lSegCnt, SWIGTYPE_p_p_CPolygon.getCPtr(pPolys), SWIGTYPE_p_LONG.getCPtr(lPolyCount), lFlags, SWIGTYPE_p_LONG.getCPtr(plMap));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool TriangulateRelease(ref Fusee.Math.Core.Vector3D /* Vector*&_cstype */ pvPoints, int lPointCount, SWIGTYPE_p_LONG plSegments, int lSegCnt, SWIGTYPE_p_p_CPolygon pPolys, SWIGTYPE_p_LONG lPolyCount, int lFlags) {
    bool ret = C4dApiPINVOKE.PolyTriangulate_TriangulateRelease__SWIG_4(swigCPtr, ref pvPoints /* Vector*&_csin */, lPointCount, SWIGTYPE_p_LONG.getCPtr(plSegments), lSegCnt, SWIGTYPE_p_p_CPolygon.getCPtr(pPolys), SWIGTYPE_p_LONG.getCPtr(lPolyCount), lFlags);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool TriangulateRelease(ref Fusee.Math.Core.Vector3D /* Vector*&_cstype */ pvPoints, int lPointCount, SWIGTYPE_p_LONG plSegments, int lSegCnt, SWIGTYPE_p_p_CPolygon pPolys, SWIGTYPE_p_LONG lPolyCount) {
    bool ret = C4dApiPINVOKE.PolyTriangulate_TriangulateRelease__SWIG_5(swigCPtr, ref pvPoints /* Vector*&_csin */, lPointCount, SWIGTYPE_p_LONG.getCPtr(plSegments), lSegCnt, SWIGTYPE_p_p_CPolygon.getCPtr(pPolys), SWIGTYPE_p_LONG.getCPtr(lPolyCount));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasIdentical() {
    bool ret = C4dApiPINVOKE.PolyTriangulate_HasIdentical(swigCPtr);
    return ret;
  }

  public void SetPolygonMatrix(SWIGTYPE_p_LMatrix m) {
    C4dApiPINVOKE.PolyTriangulate_SetPolygonMatrix(swigCPtr, SWIGTYPE_p_LMatrix.getCPtr(m));
  }

  public SWIGTYPE_p_ULONG GetState() {
    SWIGTYPE_p_ULONG ret = new SWIGTYPE_p_ULONG(C4dApiPINVOKE.PolyTriangulate_GetState(swigCPtr), true);
    return ret;
  }

}

}
