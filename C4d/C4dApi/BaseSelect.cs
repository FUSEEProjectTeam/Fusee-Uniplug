/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace C4d {

using System;
using System.Runtime.InteropServices;

public class BaseSelect : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BaseSelect(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BaseSelect obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public int GetCount() {
    int ret = C4dApiPINVOKE.BaseSelect_GetCount(swigCPtr);
    return ret;
  }

  public int GetSegments() {
    int ret = C4dApiPINVOKE.BaseSelect_GetSegments(swigCPtr);
    return ret;
  }

  public bool Select(int num) {
    bool ret = C4dApiPINVOKE.BaseSelect_Select(swigCPtr, num);
    return ret;
  }

  public bool SelectAll(int min, int max) {
    bool ret = C4dApiPINVOKE.BaseSelect_SelectAll(swigCPtr, min, max);
    return ret;
  }

  public bool Deselect(int num) {
    bool ret = C4dApiPINVOKE.BaseSelect_Deselect__SWIG_0(swigCPtr, num);
    return ret;
  }

  public bool DeselectAll() {
    bool ret = C4dApiPINVOKE.BaseSelect_DeselectAll(swigCPtr);
    return ret;
  }

  public bool Toggle(int num) {
    bool ret = C4dApiPINVOKE.BaseSelect_Toggle(swigCPtr, num);
    return ret;
  }

  public bool ToggleAll(int min, int max) {
    bool ret = C4dApiPINVOKE.BaseSelect_ToggleAll(swigCPtr, min, max);
    return ret;
  }

  public bool GetRange(int seg, int maxElements, SWIGTYPE_p_LONG a, SWIGTYPE_p_LONG b) {
    bool ret = C4dApiPINVOKE.BaseSelect_GetRange(swigCPtr, seg, maxElements, SWIGTYPE_p_LONG.getCPtr(a), SWIGTYPE_p_LONG.getCPtr(b));
    return ret;
  }

  public bool IsSelected(int num) {
    bool ret = C4dApiPINVOKE.BaseSelect_IsSelected(swigCPtr, num);
    return ret;
  }

  public bool CopyTo(BaseSelect dest) {
    bool ret = C4dApiPINVOKE.BaseSelect_CopyTo(swigCPtr, BaseSelect.getCPtr(dest));
    return ret;
  }

  public bool Merge(BaseSelect src) {
    bool ret = C4dApiPINVOKE.BaseSelect_Merge(swigCPtr, BaseSelect.getCPtr(src));
    return ret;
  }

  public bool Deselect(BaseSelect src) {
    bool ret = C4dApiPINVOKE.BaseSelect_Deselect__SWIG_1(swigCPtr, BaseSelect.getCPtr(src));
    return ret;
  }

  public bool Cross(BaseSelect src) {
    bool ret = C4dApiPINVOKE.BaseSelect_Cross(swigCPtr, BaseSelect.getCPtr(src));
    return ret;
  }

  public BaseSelect GetClone() {
    IntPtr cPtr = C4dApiPINVOKE.BaseSelect_GetClone(swigCPtr);
    BaseSelect ret = (cPtr == IntPtr.Zero) ? null : new BaseSelect(cPtr, false);
    return ret;
  }

  public bool FromArray(SWIGTYPE_p_UCHAR selection, int count) {
    bool ret = C4dApiPINVOKE.BaseSelect_FromArray(swigCPtr, SWIGTYPE_p_UCHAR.getCPtr(selection), count);
    return ret;
  }

  public SWIGTYPE_p_UCHAR ToArray(int count) {
    IntPtr cPtr = C4dApiPINVOKE.BaseSelect_ToArray(swigCPtr, count);
    SWIGTYPE_p_UCHAR ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_UCHAR(cPtr, false);
    return ret;
  }

  public void Write(SWIGTYPE_p_HyperFile hf) {
    C4dApiPINVOKE.BaseSelect_Write(swigCPtr, SWIGTYPE_p_HyperFile.getCPtr(hf));
  }

  public bool Read(SWIGTYPE_p_HyperFile hf) {
    bool ret = C4dApiPINVOKE.BaseSelect_Read(swigCPtr, SWIGTYPE_p_HyperFile.getCPtr(hf));
    return ret;
  }

  public static BaseSelect Alloc() {
    IntPtr cPtr = C4dApiPINVOKE.BaseSelect_Alloc();
    BaseSelect ret = (cPtr == IntPtr.Zero) ? null : new BaseSelect(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_BaseSelect bs) {
    C4dApiPINVOKE.BaseSelect_Free(SWIGTYPE_p_p_BaseSelect.getCPtr(bs));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool FindSegment(int num, SWIGTYPE_p_LONG segment) {
    bool ret = C4dApiPINVOKE.BaseSelect_FindSegment(swigCPtr, num, SWIGTYPE_p_LONG.getCPtr(segment));
    return ret;
  }

  public BaseSelectData GetData() {
    IntPtr cPtr = C4dApiPINVOKE.BaseSelect_GetData(swigCPtr);
    BaseSelectData ret = (cPtr == IntPtr.Zero) ? null : new BaseSelectData(cPtr, false);
    return ret;
  }

  public bool CopyFrom(BaseSelectData ndata, int ncnt) {
    bool ret = C4dApiPINVOKE.BaseSelect_CopyFrom(swigCPtr, BaseSelectData.getCPtr(ndata), ncnt);
    return ret;
  }

  public int GetDirty() {
    int ret = C4dApiPINVOKE.BaseSelect_GetDirty(swigCPtr);
    return ret;
  }

  public int GetLastElement() {
    int ret = C4dApiPINVOKE.BaseSelect_GetLastElement(swigCPtr);
    return ret;
  }

}

}
