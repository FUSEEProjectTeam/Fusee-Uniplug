/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace C4d {

using System;
using System.Runtime.InteropServices;

public class BitmapSaverPlugin : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BitmapSaverPlugin(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BitmapSaverPlugin obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public void BmGetDetails(SWIGTYPE_p_LONG alpha, SWIGTYPE_p_String suffix) {
    C4dApiPINVOKE.BitmapSaverPlugin_BmGetDetails(swigCPtr, SWIGTYPE_p_LONG.getCPtr(alpha), SWIGTYPE_p_String.getCPtr(suffix));
  }

  public bool BmEdit(BaseContainer data) {
    bool ret = C4dApiPINVOKE.BitmapSaverPlugin_BmEdit(swigCPtr, BaseContainer.getCPtr(data));
    return ret;
  }

  public int BmGetMaxResolution(bool layers) {
    int ret = C4dApiPINVOKE.BitmapSaverPlugin_BmGetMaxResolution(swigCPtr, layers);
    return ret;
  }

  public IMAGERESULT BmSave(SWIGTYPE_p_Filename name, BaseBitmap bm, BaseContainer data, SAVEBIT savebits) {
    IMAGERESULT ret = (IMAGERESULT)C4dApiPINVOKE.BitmapSaverPlugin_BmSave(swigCPtr, SWIGTYPE_p_Filename.getCPtr(name), BaseBitmap.getCPtr(bm), BaseContainer.getCPtr(data), (int)savebits);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IMAGERESULT BmOpen(SWIGTYPE_p_p_PluginMovieData md, SWIGTYPE_p_Filename name, BaseBitmap bm, BaseContainer data, SAVEBIT savebits, int fps) {
    IMAGERESULT ret = (IMAGERESULT)C4dApiPINVOKE.BitmapSaverPlugin_BmOpen(swigCPtr, SWIGTYPE_p_p_PluginMovieData.getCPtr(md), SWIGTYPE_p_Filename.getCPtr(name), BaseBitmap.getCPtr(bm), BaseContainer.getCPtr(data), (int)savebits, fps);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IMAGERESULT BmWrite(SWIGTYPE_p_PluginMovieData md, BaseBitmap bm) {
    IMAGERESULT ret = (IMAGERESULT)C4dApiPINVOKE.BitmapSaverPlugin_BmWrite(swigCPtr, SWIGTYPE_p_PluginMovieData.getCPtr(md), BaseBitmap.getCPtr(bm));
    return ret;
  }

  public void BmClose(SWIGTYPE_p_p_PluginMovieData md) {
    C4dApiPINVOKE.BitmapSaverPlugin_BmClose(swigCPtr, SWIGTYPE_p_p_PluginMovieData.getCPtr(md));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
