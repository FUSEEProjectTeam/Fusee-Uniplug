/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace C4d {

using System;
using System.Runtime.InteropServices;

public class SplineObject : PointObject {
  private HandleRef swigCPtr;

  internal SplineObject(IntPtr cPtr, bool cMemoryOwn) : base(C4dApiPINVOKE.SplineObject_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(SplineObject obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public SPLINETYPE GetInterpolationType() {
    SPLINETYPE ret = (SPLINETYPE)C4dApiPINVOKE.SplineObject_GetInterpolationType(swigCPtr);
    return ret;
  }

  public bool IsClosed() {
    bool ret = C4dApiPINVOKE.SplineObject_IsClosed(swigCPtr);
    return ret;
  }

  public Fusee.Math.Core.Vector3D /* Vector_cstype_out */ GetSplinePoint(double t, int segment, ref Fusee.Math.Core.Vector3D /* Vector*&_cstype */ padr)  {  /* <Vector_csout> */
      Fusee.Math.Core.Vector3D ret = C4dApiPINVOKE.SplineObject_GetSplinePoint__SWIG_0(swigCPtr, t, segment, ref padr /* Vector*&_csin */);
      return ret;
   } /* <Vector_csout> */ 

  public Fusee.Math.Core.Vector3D /* Vector_cstype_out */ GetSplinePoint(double t, int segment)  {  /* <Vector_csout> */
      Fusee.Math.Core.Vector3D ret = C4dApiPINVOKE.SplineObject_GetSplinePoint__SWIG_1(swigCPtr, t, segment);
      return ret;
   } /* <Vector_csout> */ 

  public Fusee.Math.Core.Vector3D /* Vector_cstype_out */ GetSplinePoint(double t)  {  /* <Vector_csout> */
      Fusee.Math.Core.Vector3D ret = C4dApiPINVOKE.SplineObject_GetSplinePoint__SWIG_2(swigCPtr, t);
      return ret;
   } /* <Vector_csout> */ 

  public Fusee.Math.Core.Vector3D /* Vector_cstype_out */ GetSplineTangent(double t, int segment, ref Fusee.Math.Core.Vector3D /* Vector*&_cstype */ padr)  {  /* <Vector_csout> */
      Fusee.Math.Core.Vector3D ret = C4dApiPINVOKE.SplineObject_GetSplineTangent__SWIG_0(swigCPtr, t, segment, ref padr /* Vector*&_csin */);
      return ret;
   } /* <Vector_csout> */ 

  public Fusee.Math.Core.Vector3D /* Vector_cstype_out */ GetSplineTangent(double t, int segment)  {  /* <Vector_csout> */
      Fusee.Math.Core.Vector3D ret = C4dApiPINVOKE.SplineObject_GetSplineTangent__SWIG_1(swigCPtr, t, segment);
      return ret;
   } /* <Vector_csout> */ 

  public Fusee.Math.Core.Vector3D /* Vector_cstype_out */ GetSplineTangent(double t)  {  /* <Vector_csout> */
      Fusee.Math.Core.Vector3D ret = C4dApiPINVOKE.SplineObject_GetSplineTangent__SWIG_2(swigCPtr, t);
      return ret;
   } /* <Vector_csout> */ 

  public bool SetDefaultCoeff() {
    bool ret = C4dApiPINVOKE.SplineObject_SetDefaultCoeff(swigCPtr);
    return ret;
  }

  public bool ResizeObject(int pcnt, int scnt) {
    bool ret = C4dApiPINVOKE.SplineObject_ResizeObject(swigCPtr, pcnt, scnt);
    return ret;
  }

  public Segment GetSegmentR() {
    IntPtr cPtr = C4dApiPINVOKE.SplineObject_GetSegmentR(swigCPtr);
    Segment ret = (cPtr == IntPtr.Zero) ? null : new Segment(cPtr, false);
    return ret;
  }

  public Segment GetSegmentW() {
    IntPtr cPtr = C4dApiPINVOKE.SplineObject_GetSegmentW(swigCPtr);
    Segment ret = (cPtr == IntPtr.Zero) ? null : new Segment(cPtr, false);
    return ret;
  }

  public int GetSegmentCount() {
    int ret = C4dApiPINVOKE.SplineObject_GetSegmentCount(swigCPtr);
    return ret;
  }

  public Tangent GetTangentR() {
    IntPtr cPtr = C4dApiPINVOKE.SplineObject_GetTangentR(swigCPtr);
    Tangent ret = (cPtr == IntPtr.Zero) ? null : new Tangent(cPtr, false);
    return ret;
  }

  public Tangent GetTangentW() {
    IntPtr cPtr = C4dApiPINVOKE.SplineObject_GetTangentW(swigCPtr);
    Tangent ret = (cPtr == IntPtr.Zero) ? null : new Tangent(cPtr, false);
    return ret;
  }

  public int GetTangentCount() {
    int ret = C4dApiPINVOKE.SplineObject_GetTangentCount(swigCPtr);
    return ret;
  }

  public LineObject GetLineObject(BaseDocument doc, double lod, BaseThread thread) {
    IntPtr cPtr = C4dApiPINVOKE.SplineObject_GetLineObject__SWIG_0(swigCPtr, BaseDocument.getCPtr(doc), lod, BaseThread.getCPtr(thread));
    LineObject ret = (cPtr == IntPtr.Zero) ? null : new LineObject(cPtr, false);
    return ret;
  }

  public LineObject GetLineObject(BaseDocument doc, double lod) {
    IntPtr cPtr = C4dApiPINVOKE.SplineObject_GetLineObject__SWIG_1(swigCPtr, BaseDocument.getCPtr(doc), lod);
    LineObject ret = (cPtr == IntPtr.Zero) ? null : new LineObject(cPtr, false);
    return ret;
  }

  public static SplineObject Alloc(int pcnt, SPLINETYPE type) {
    IntPtr cPtr = C4dApiPINVOKE.SplineObject_Alloc(pcnt, (int)type);
    SplineObject ret = (cPtr == IntPtr.Zero) ? null : new SplineObject(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_SplineObject bl) {
    C4dApiPINVOKE.SplineObject_Free(SWIGTYPE_p_p_SplineObject.getCPtr(bl));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public Tangent GetTangentAt(int inx) {
    IntPtr cPtr = C4dApiPINVOKE.SplineObject_GetTangentAt(swigCPtr, inx);
    Tangent ret = (cPtr == IntPtr.Zero) ? null : new Tangent(cPtr, false);
    return ret;
  }

  public void SetTangentAt(int inx, Tangent pT) {
    C4dApiPINVOKE.SplineObject_SetTangentAt(swigCPtr, inx, Tangent.getCPtr(pT));
  }

  public Segment GetSegmentAt(int inx) {
    IntPtr cPtr = C4dApiPINVOKE.SplineObject_GetSegmentAt(swigCPtr, inx);
    Segment ret = (cPtr == IntPtr.Zero) ? null : new Segment(cPtr, false);
    return ret;
  }

  public void SetSegmentAt(int inx, Segment pT) {
    C4dApiPINVOKE.SplineObject_SetSegmentAt(swigCPtr, inx, Segment.getCPtr(pT));
  }

}

}
