/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace C4d {

using System;
using System.Runtime.InteropServices;

public class MPThreadPool : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MPThreadPool(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(MPThreadPool obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~MPThreadPool() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          C4dApiPINVOKE.delete_MPThreadPool(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public MPThreadPool() : this(C4dApiPINVOKE.new_MPThreadPool(), true) {
  }

  public bool Init(BaseThread parent, int count, SWIGTYPE_p_p_C4DThread thread) {
    bool ret = C4dApiPINVOKE.MPThreadPool_Init__SWIG_0(swigCPtr, BaseThread.getCPtr(parent), count, SWIGTYPE_p_p_C4DThread.getCPtr(thread));
    return ret;
  }

  public bool Init(C4DThread parent, int count, SWIGTYPE_p_p_C4DThread thread) {
    bool ret = C4dApiPINVOKE.MPThreadPool_Init__SWIG_1(swigCPtr, C4DThread.getCPtr(parent), count, SWIGTYPE_p_p_C4DThread.getCPtr(thread));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Start(THREADPRIORITY worker_priority) {
    bool ret = C4dApiPINVOKE.MPThreadPool_Start(swigCPtr, (int)worker_priority);
    return ret;
  }

  public C4DThread WaitForNextFree() {
    IntPtr cPtr = C4dApiPINVOKE.MPThreadPool_WaitForNextFree(swigCPtr);
    C4DThread ret = (cPtr == IntPtr.Zero) ? null : new C4DThread(cPtr, false);
    return ret;
  }

  public void Wait() {
    C4dApiPINVOKE.MPThreadPool_Wait(swigCPtr);
  }

  public void End() {
    C4dApiPINVOKE.MPThreadPool_End(swigCPtr);
  }

}

}
