/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace C4d {

using System;
using System.Runtime.InteropServices;

public class LassoSelection : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LassoSelection(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(LassoSelection obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public bool Start(SWIGTYPE_p_GeDialog dlg, int mode, int start_x, int start_y, int start_button, int sx1, int sy1, int sx2, int sy2) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_0(swigCPtr, SWIGTYPE_p_GeDialog.getCPtr(dlg), mode, start_x, start_y, start_button, sx1, sy1, sx2, sy2);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Start(SWIGTYPE_p_GeDialog dlg, int mode, int start_x, int start_y, int start_button, int sx1, int sy1, int sx2) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_1(swigCPtr, SWIGTYPE_p_GeDialog.getCPtr(dlg), mode, start_x, start_y, start_button, sx1, sy1, sx2);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Start(SWIGTYPE_p_GeDialog dlg, int mode, int start_x, int start_y, int start_button, int sx1, int sy1) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_2(swigCPtr, SWIGTYPE_p_GeDialog.getCPtr(dlg), mode, start_x, start_y, start_button, sx1, sy1);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Start(SWIGTYPE_p_GeDialog dlg, int mode, int start_x, int start_y, int start_button, int sx1) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_3(swigCPtr, SWIGTYPE_p_GeDialog.getCPtr(dlg), mode, start_x, start_y, start_button, sx1);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Start(SWIGTYPE_p_GeDialog dlg, int mode, int start_x, int start_y, int start_button) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_4(swigCPtr, SWIGTYPE_p_GeDialog.getCPtr(dlg), mode, start_x, start_y, start_button);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Start(SWIGTYPE_p_GeDialog dlg, int mode, int start_x, int start_y) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_5(swigCPtr, SWIGTYPE_p_GeDialog.getCPtr(dlg), mode, start_x, start_y);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Start(SWIGTYPE_p_GeDialog dlg, int mode, int start_x) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_6(swigCPtr, SWIGTYPE_p_GeDialog.getCPtr(dlg), mode, start_x);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Start(SWIGTYPE_p_GeDialog dlg, int mode) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_7(swigCPtr, SWIGTYPE_p_GeDialog.getCPtr(dlg), mode);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Start(SWIGTYPE_p_GeUserArea ua, int mode, int start_x, int start_y, int start_button, int sx1, int sy1, int sx2, int sy2) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_8(swigCPtr, SWIGTYPE_p_GeUserArea.getCPtr(ua), mode, start_x, start_y, start_button, sx1, sy1, sx2, sy2);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Start(SWIGTYPE_p_GeUserArea ua, int mode, int start_x, int start_y, int start_button, int sx1, int sy1, int sx2) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_9(swigCPtr, SWIGTYPE_p_GeUserArea.getCPtr(ua), mode, start_x, start_y, start_button, sx1, sy1, sx2);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Start(SWIGTYPE_p_GeUserArea ua, int mode, int start_x, int start_y, int start_button, int sx1, int sy1) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_10(swigCPtr, SWIGTYPE_p_GeUserArea.getCPtr(ua), mode, start_x, start_y, start_button, sx1, sy1);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Start(SWIGTYPE_p_GeUserArea ua, int mode, int start_x, int start_y, int start_button, int sx1) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_11(swigCPtr, SWIGTYPE_p_GeUserArea.getCPtr(ua), mode, start_x, start_y, start_button, sx1);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Start(SWIGTYPE_p_GeUserArea ua, int mode, int start_x, int start_y, int start_button) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_12(swigCPtr, SWIGTYPE_p_GeUserArea.getCPtr(ua), mode, start_x, start_y, start_button);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Start(SWIGTYPE_p_GeUserArea ua, int mode, int start_x, int start_y) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_13(swigCPtr, SWIGTYPE_p_GeUserArea.getCPtr(ua), mode, start_x, start_y);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Start(SWIGTYPE_p_GeUserArea ua, int mode, int start_x) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_14(swigCPtr, SWIGTYPE_p_GeUserArea.getCPtr(ua), mode, start_x);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Start(SWIGTYPE_p_GeUserArea ua, int mode) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_15(swigCPtr, SWIGTYPE_p_GeUserArea.getCPtr(ua), mode);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Start(SWIGTYPE_p_EditorWindow win, int mode, int start_x, int start_y, int start_button, int sx1, int sy1, int sx2, int sy2) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_16(swigCPtr, SWIGTYPE_p_EditorWindow.getCPtr(win), mode, start_x, start_y, start_button, sx1, sy1, sx2, sy2);
    return ret;
  }

  public bool Start(SWIGTYPE_p_EditorWindow win, int mode, int start_x, int start_y, int start_button, int sx1, int sy1, int sx2) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_17(swigCPtr, SWIGTYPE_p_EditorWindow.getCPtr(win), mode, start_x, start_y, start_button, sx1, sy1, sx2);
    return ret;
  }

  public bool Start(SWIGTYPE_p_EditorWindow win, int mode, int start_x, int start_y, int start_button, int sx1, int sy1) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_18(swigCPtr, SWIGTYPE_p_EditorWindow.getCPtr(win), mode, start_x, start_y, start_button, sx1, sy1);
    return ret;
  }

  public bool Start(SWIGTYPE_p_EditorWindow win, int mode, int start_x, int start_y, int start_button, int sx1) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_19(swigCPtr, SWIGTYPE_p_EditorWindow.getCPtr(win), mode, start_x, start_y, start_button, sx1);
    return ret;
  }

  public bool Start(SWIGTYPE_p_EditorWindow win, int mode, int start_x, int start_y, int start_button) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_20(swigCPtr, SWIGTYPE_p_EditorWindow.getCPtr(win), mode, start_x, start_y, start_button);
    return ret;
  }

  public bool Start(SWIGTYPE_p_EditorWindow win, int mode, int start_x, int start_y) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_21(swigCPtr, SWIGTYPE_p_EditorWindow.getCPtr(win), mode, start_x, start_y);
    return ret;
  }

  public bool Start(SWIGTYPE_p_EditorWindow win, int mode, int start_x) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_22(swigCPtr, SWIGTYPE_p_EditorWindow.getCPtr(win), mode, start_x);
    return ret;
  }

  public bool Start(SWIGTYPE_p_EditorWindow win, int mode) {
    bool ret = C4dApiPINVOKE.LassoSelection_Start__SWIG_23(swigCPtr, SWIGTYPE_p_EditorWindow.getCPtr(win), mode);
    return ret;
  }

  public bool CheckSingleClick() {
    bool ret = C4dApiPINVOKE.LassoSelection_CheckSingleClick(swigCPtr);
    return ret;
  }

  public bool Test(int x, int y) {
    bool ret = C4dApiPINVOKE.LassoSelection_Test(swigCPtr, x, y);
    return ret;
  }

  public bool TestPolygon(Fusee.Math.Core.Vector3D /* constVector&_cstype */ pa, Fusee.Math.Core.Vector3D /* constVector&_cstype */ pb, Fusee.Math.Core.Vector3D /* constVector&_cstype */ pc, Fusee.Math.Core.Vector3D /* constVector&_cstype */ pd) {
    bool ret = C4dApiPINVOKE.LassoSelection_TestPolygon(swigCPtr, ref pa /* constVector&_csin */, ref pb /* constVector&_csin */, ref pc /* constVector&_csin */, ref pd /* constVector&_csin */);
    return ret;
  }

  public int GetMode() {
    int ret = C4dApiPINVOKE.LassoSelection_GetMode(swigCPtr);
    return ret;
  }

  public bool GetRectangle(SWIGTYPE_p_Real x1, SWIGTYPE_p_Real y1, SWIGTYPE_p_Real x2, SWIGTYPE_p_Real y2) {
    bool ret = C4dApiPINVOKE.LassoSelection_GetRectangle(swigCPtr, SWIGTYPE_p_Real.getCPtr(x1), SWIGTYPE_p_Real.getCPtr(y1), SWIGTYPE_p_Real.getCPtr(x2), SWIGTYPE_p_Real.getCPtr(y2));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static LassoSelection Alloc() {
    IntPtr cPtr = C4dApiPINVOKE.LassoSelection_Alloc();
    LassoSelection ret = (cPtr == IntPtr.Zero) ? null : new LassoSelection(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_LassoSelection ls) {
    C4dApiPINVOKE.LassoSelection_Free(SWIGTYPE_p_p_LassoSelection.getCPtr(ls));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
