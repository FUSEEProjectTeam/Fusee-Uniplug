/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace C4d {

using System;
using System.Runtime.InteropServices;

public class BaseBitmapLink : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BaseBitmapLink(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BaseBitmapLink obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public BaseBitmap Get() {
    IntPtr cPtr = C4dApiPINVOKE.BaseBitmapLink_Get(swigCPtr);
    BaseBitmap ret = (cPtr == IntPtr.Zero) ? null : new BaseBitmap(cPtr, false);
    return ret;
  }

  public void Set(BaseBitmap bmp) {
    C4dApiPINVOKE.BaseBitmapLink_Set(swigCPtr, BaseBitmap.getCPtr(bmp));
  }

  public static BaseBitmapLink Alloc() {
    IntPtr cPtr = C4dApiPINVOKE.BaseBitmapLink_Alloc();
    BaseBitmapLink ret = (cPtr == IntPtr.Zero) ? null : new BaseBitmapLink(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_BaseBitmapLink bc) {
    C4dApiPINVOKE.BaseBitmapLink_Free(SWIGTYPE_p_p_BaseBitmapLink.getCPtr(bc));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
