/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace C4d {

using System;
using System.Runtime.InteropServices;

public class MovieSaver : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MovieSaver(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(MovieSaver obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public IMAGERESULT Open(SWIGTYPE_p_Filename name, BaseBitmap bm, int fps, int format, BaseContainer data, SAVEBIT savebits, SWIGTYPE_p_BaseSound sound) {
    IMAGERESULT ret = (IMAGERESULT)C4dApiPINVOKE.MovieSaver_Open__SWIG_0(swigCPtr, SWIGTYPE_p_Filename.getCPtr(name), BaseBitmap.getCPtr(bm), fps, format, BaseContainer.getCPtr(data), (int)savebits, SWIGTYPE_p_BaseSound.getCPtr(sound));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IMAGERESULT Open(SWIGTYPE_p_Filename name, BaseBitmap bm, int fps, int format, BaseContainer data, SAVEBIT savebits) {
    IMAGERESULT ret = (IMAGERESULT)C4dApiPINVOKE.MovieSaver_Open__SWIG_1(swigCPtr, SWIGTYPE_p_Filename.getCPtr(name), BaseBitmap.getCPtr(bm), fps, format, BaseContainer.getCPtr(data), (int)savebits);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public IMAGERESULT Write(BaseBitmap bm) {
    IMAGERESULT ret = (IMAGERESULT)C4dApiPINVOKE.MovieSaver_Write(swigCPtr, BaseBitmap.getCPtr(bm));
    return ret;
  }

  public void Close() {
    C4dApiPINVOKE.MovieSaver_Close(swigCPtr);
  }

  public bool Choose(int format, BaseContainer bc) {
    bool ret = C4dApiPINVOKE.MovieSaver_Choose(swigCPtr, format, BaseContainer.getCPtr(bc));
    return ret;
  }

  public static MovieSaver Alloc() {
    IntPtr cPtr = C4dApiPINVOKE.MovieSaver_Alloc();
    MovieSaver ret = (cPtr == IntPtr.Zero) ? null : new MovieSaver(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_MovieSaver bc) {
    C4dApiPINVOKE.MovieSaver_Free(SWIGTYPE_p_p_MovieSaver.getCPtr(bc));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
