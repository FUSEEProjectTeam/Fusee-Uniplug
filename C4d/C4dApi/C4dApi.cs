/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace C4d {

using System;
using System.Runtime.InteropServices;

public class C4dApi {
  public static void blDelete_cs(GeListNode v) {
    C4dApiPINVOKE.blDelete_cs(GeListNode.getCPtr(v));
  }

  public static void GeGetSerialInfo(SWIGTYPE_p_SERIALINFO type, SerialInfo si) {
    C4dApiPINVOKE.GeGetSerialInfo(SWIGTYPE_p_SERIALINFO.getCPtr(type), SerialInfo.getCPtr(si));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static VERSIONTYPE GeGetVersionType() {
    VERSIONTYPE ret = (VERSIONTYPE)C4dApiPINVOKE.GeGetVersionType();
    return ret;
  }

  public static bool IsNet() {
    bool ret = C4dApiPINVOKE.IsNet();
    return ret;
  }

  public static SYSTEMINFO GeGetSystemInfo() {
    SYSTEMINFO ret = (SYSTEMINFO)C4dApiPINVOKE.GeGetSystemInfo();
    return ret;
  }

  public static void GeShowMouse(int v) {
    C4dApiPINVOKE.GeShowMouse(v);
  }

  public static bool GeGetScreenDimensions(int x, int y, bool whole_screen, SWIGTYPE_p_LONG sx1, SWIGTYPE_p_LONG sy1, SWIGTYPE_p_LONG sx2, SWIGTYPE_p_LONG sy2) {
    bool ret = C4dApiPINVOKE.GeGetScreenDimensions(x, y, whole_screen, SWIGTYPE_p_LONG.getCPtr(sx1), SWIGTYPE_p_LONG.getCPtr(sy1), SWIGTYPE_p_LONG.getCPtr(sx2), SWIGTYPE_p_LONG.getCPtr(sy2));
    return ret;
  }

  public static int GeGetTimer() {
    int ret = C4dApiPINVOKE.GeGetTimer();
    return ret;
  }

  public static double GeGetMilliSeconds() {
    double ret = C4dApiPINVOKE.GeGetMilliSeconds();
    return ret;
  }

  public static string /* String_cstype */ GeGetLineEnd()  {  /* <String_csout> */
      string ret = C4dApiPINVOKE.GeGetLineEnd();
      return ret;
   } /* </String_csout> */ 

  public static int GeGetDefaultFPS() {
    int ret = C4dApiPINVOKE.GeGetDefaultFPS();
    return ret;
  }

  public static GEMB_R GeOutString(string /* constString&_cstype */ str, GEMB flags) {
    GEMB_R ret = (GEMB_R)C4dApiPINVOKE.GeOutString(str, (int)flags);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OPERATINGSYSTEM GeGetCurrentOS() {
    OPERATINGSYSTEM ret = (OPERATINGSYSTEM)C4dApiPINVOKE.GeGetCurrentOS();
    return ret;
  }

  public static BYTEORDER GeGetByteOrder() {
    BYTEORDER ret = (BYTEORDER)C4dApiPINVOKE.GeGetByteOrder();
    return ret;
  }

  public static void GeGetGray(SWIGTYPE_p_LONG r, SWIGTYPE_p_LONG g, SWIGTYPE_p_LONG b) {
    C4dApiPINVOKE.GeGetGray(SWIGTYPE_p_LONG.getCPtr(r), SWIGTYPE_p_LONG.getCPtr(g), SWIGTYPE_p_LONG.getCPtr(b));
  }

  public static bool GeChooseColor(ref Fusee.Math.Core.Vector3D /* Vector*&_cstype */ col, int flags) {
    bool ret = C4dApiPINVOKE.GeChooseColor(ref col /* Vector*&_csin */, flags);
    return ret;
  }

  public static bool GeOpenHTML(string /* constString&_cstype */ webaddress) {
    bool ret = C4dApiPINVOKE.GeOpenHTML(webaddress);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GeChooseFont(BaseContainer bc) {
    bool ret = C4dApiPINVOKE.GeChooseFont(BaseContainer.getCPtr(bc));
    return ret;
  }

  public static bool GeRegisterPlugin(PLUGINTYPE type, int id, string /* constString&_cstype */ str, SWIGTYPE_p_void data, int datasize) {
    bool ret = C4dApiPINVOKE.GeRegisterPlugin((int)type, id, str, SWIGTYPE_p_void.getCPtr(data), datasize);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void GePrint(string /* constString&_cstype */ str) {
    C4dApiPINVOKE.GePrint(str);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GeConsoleOut(string /* constString&_cstype */ str) {
    C4dApiPINVOKE.GeConsoleOut(str);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool GeGetMovieInfo(SWIGTYPE_p_Filename fn, SWIGTYPE_p_LONG frames, SWIGTYPE_p_Real fps) {
    bool ret = C4dApiPINVOKE.GeGetMovieInfo(SWIGTYPE_p_Filename.getCPtr(fn), SWIGTYPE_p_LONG.getCPtr(frames), SWIGTYPE_p_Real.getCPtr(fps));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool RenameDialog(SWIGTYPE_p_String str) {
    bool ret = C4dApiPINVOKE.RenameDialog(SWIGTYPE_p_String.getCPtr(str));
    return ret;
  }

  public static int GetC4DVersion() {
    int ret = C4dApiPINVOKE.GetC4DVersion();
    return ret;
  }

  public static string /* String_cstype */ GeGetDegreeChar()  {  /* <String_csout> */
      string ret = C4dApiPINVOKE.GeGetDegreeChar();
      return ret;
   } /* </String_csout> */ 

  public static string /* String_cstype */ GeGetPercentChar()  {  /* <String_csout> */
      string ret = C4dApiPINVOKE.GeGetPercentChar();
      return ret;
   } /* </String_csout> */ 

  public static void lSwap(SWIGTYPE_p_void adr, SWIGTYPE_p_VLONG cnt) {
    C4dApiPINVOKE.lSwap__SWIG_0(SWIGTYPE_p_void.getCPtr(adr), SWIGTYPE_p_VLONG.getCPtr(cnt));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void lSwap(SWIGTYPE_p_void adr) {
    C4dApiPINVOKE.lSwap__SWIG_1(SWIGTYPE_p_void.getCPtr(adr));
  }

  public static void wSwap(SWIGTYPE_p_void adr, SWIGTYPE_p_VLONG cnt) {
    C4dApiPINVOKE.wSwap__SWIG_0(SWIGTYPE_p_void.getCPtr(adr), SWIGTYPE_p_VLONG.getCPtr(cnt));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void wSwap(SWIGTYPE_p_void adr) {
    C4dApiPINVOKE.wSwap__SWIG_1(SWIGTYPE_p_void.getCPtr(adr));
  }

  public static void lIntel(SWIGTYPE_p_void adr, SWIGTYPE_p_VLONG cnt) {
    C4dApiPINVOKE.lIntel__SWIG_0(SWIGTYPE_p_void.getCPtr(adr), SWIGTYPE_p_VLONG.getCPtr(cnt));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void lIntel(SWIGTYPE_p_void adr) {
    C4dApiPINVOKE.lIntel__SWIG_1(SWIGTYPE_p_void.getCPtr(adr));
  }

  public static void wIntel(SWIGTYPE_p_void adr, SWIGTYPE_p_VLONG cnt) {
    C4dApiPINVOKE.wIntel__SWIG_0(SWIGTYPE_p_void.getCPtr(adr), SWIGTYPE_p_VLONG.getCPtr(cnt));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void wIntel(SWIGTYPE_p_void adr) {
    C4dApiPINVOKE.wIntel__SWIG_1(SWIGTYPE_p_void.getCPtr(adr));
  }

  public static void lMotor(SWIGTYPE_p_void adr, SWIGTYPE_p_VLONG cnt) {
    C4dApiPINVOKE.lMotor__SWIG_0(SWIGTYPE_p_void.getCPtr(adr), SWIGTYPE_p_VLONG.getCPtr(cnt));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void lMotor(SWIGTYPE_p_void adr) {
    C4dApiPINVOKE.lMotor__SWIG_1(SWIGTYPE_p_void.getCPtr(adr));
  }

  public static void wMotor(SWIGTYPE_p_void adr, SWIGTYPE_p_VLONG cnt) {
    C4dApiPINVOKE.wMotor__SWIG_0(SWIGTYPE_p_void.getCPtr(adr), SWIGTYPE_p_VLONG.getCPtr(cnt));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void wMotor(SWIGTYPE_p_void adr) {
    C4dApiPINVOKE.wMotor__SWIG_1(SWIGTYPE_p_void.getCPtr(adr));
  }

  public static void llSwap(SWIGTYPE_p_void adr, SWIGTYPE_p_VLONG cnt) {
    C4dApiPINVOKE.llSwap__SWIG_0(SWIGTYPE_p_void.getCPtr(adr), SWIGTYPE_p_VLONG.getCPtr(cnt));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void llSwap(SWIGTYPE_p_void adr) {
    C4dApiPINVOKE.llSwap__SWIG_1(SWIGTYPE_p_void.getCPtr(adr));
  }

  public static void llIntel(SWIGTYPE_p_void adr, SWIGTYPE_p_VLONG cnt) {
    C4dApiPINVOKE.llIntel__SWIG_0(SWIGTYPE_p_void.getCPtr(adr), SWIGTYPE_p_VLONG.getCPtr(cnt));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void llIntel(SWIGTYPE_p_void adr) {
    C4dApiPINVOKE.llIntel__SWIG_1(SWIGTYPE_p_void.getCPtr(adr));
  }

  public static void llMotor(SWIGTYPE_p_void adr, SWIGTYPE_p_VLONG cnt) {
    C4dApiPINVOKE.llMotor__SWIG_0(SWIGTYPE_p_void.getCPtr(adr), SWIGTYPE_p_VLONG.getCPtr(cnt));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void llMotor(SWIGTYPE_p_void adr) {
    C4dApiPINVOKE.llMotor__SWIG_1(SWIGTYPE_p_void.getCPtr(adr));
  }

  public static void vlSwap(SWIGTYPE_p_void adr, int cnt) {
    C4dApiPINVOKE.vlSwap__SWIG_0(SWIGTYPE_p_void.getCPtr(adr), cnt);
  }

  public static void vlSwap(SWIGTYPE_p_void adr) {
    C4dApiPINVOKE.vlSwap__SWIG_1(SWIGTYPE_p_void.getCPtr(adr));
  }

  public static void vlIntel(SWIGTYPE_p_void adr, int cnt) {
    C4dApiPINVOKE.vlIntel__SWIG_0(SWIGTYPE_p_void.getCPtr(adr), cnt);
  }

  public static void vlIntel(SWIGTYPE_p_void adr) {
    C4dApiPINVOKE.vlIntel__SWIG_1(SWIGTYPE_p_void.getCPtr(adr));
  }

  public static void vlMotor(SWIGTYPE_p_void adr, int cnt) {
    C4dApiPINVOKE.vlMotor__SWIG_0(SWIGTYPE_p_void.getCPtr(adr), cnt);
  }

  public static void vlMotor(SWIGTYPE_p_void adr) {
    C4dApiPINVOKE.vlMotor__SWIG_1(SWIGTYPE_p_void.getCPtr(adr));
  }

  public static void GeAddBackgroundHandler(SWIGTYPE_p_BackgroundHandler handler, SWIGTYPE_p_void tdata, int typeclass, int priority) {
    C4dApiPINVOKE.GeAddBackgroundHandler(SWIGTYPE_p_BackgroundHandler.getCPtr(handler), SWIGTYPE_p_void.getCPtr(tdata), typeclass, priority);
  }

  public static bool GeRemoveBackgroundHandler(SWIGTYPE_p_void tdata, int typeclass) {
    bool ret = C4dApiPINVOKE.GeRemoveBackgroundHandler(SWIGTYPE_p_void.getCPtr(tdata), typeclass);
    return ret;
  }

  public static void GeStopBackgroundThreads(int typeclass, BACKGROUNDHANDLERFLAGS flags) {
    C4dApiPINVOKE.GeStopBackgroundThreads(typeclass, (int)flags);
  }

  public static bool GeCheckBackgroundThreadsRunning(int typeclass, bool all) {
    bool ret = C4dApiPINVOKE.GeCheckBackgroundThreadsRunning(typeclass, all);
    return ret;
  }

  public static void GeProcessBackgroundThreads(int typeclass) {
    C4dApiPINVOKE.GeProcessBackgroundThreads(typeclass);
  }

  public static void SetMousePointer(int arg0) {
    C4dApiPINVOKE.SetMousePointer(arg0);
  }

  public static bool ShowBitmap(SWIGTYPE_p_Filename fn) {
    bool ret = C4dApiPINVOKE.ShowBitmap__SWIG_0(SWIGTYPE_p_Filename.getCPtr(fn));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool ShowBitmap(BaseBitmap bm) {
    bool ret = C4dApiPINVOKE.ShowBitmap__SWIG_1(BaseBitmap.getCPtr(bm));
    return ret;
  }

  public static void StopAllThreads() {
    C4dApiPINVOKE.StopAllThreads();
  }

  public static bool ShutdownThreads(bool shutdown) {
    bool ret = C4dApiPINVOKE.ShutdownThreads(shutdown);
    return ret;
  }

  public static void StatusClear() {
    C4dApiPINVOKE.StatusClear();
  }

  public static void StatusSetSpin() {
    C4dApiPINVOKE.StatusSetSpin();
  }

  public static void StatusSetBar(int p) {
    C4dApiPINVOKE.StatusSetBar(p);
  }

  public static void StatusSetText(string /* constString&_cstype */ str) {
    C4dApiPINVOKE.StatusSetText(str);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SpecialEventAdd(int messageid, SWIGTYPE_p_VULONG p1, SWIGTYPE_p_VULONG p2) {
    C4dApiPINVOKE.SpecialEventAdd__SWIG_0(messageid, SWIGTYPE_p_VULONG.getCPtr(p1), SWIGTYPE_p_VULONG.getCPtr(p2));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SpecialEventAdd(int messageid, SWIGTYPE_p_VULONG p1) {
    C4dApiPINVOKE.SpecialEventAdd__SWIG_1(messageid, SWIGTYPE_p_VULONG.getCPtr(p1));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SpecialEventAdd(int messageid) {
    C4dApiPINVOKE.SpecialEventAdd__SWIG_2(messageid);
  }

  public static void EventAdd(EVENT eventflag) {
    C4dApiPINVOKE.EventAdd__SWIG_0((int)eventflag);
  }

  public static void EventAdd() {
    C4dApiPINVOKE.EventAdd__SWIG_1();
  }

  public static bool GeSyncMessage(int messageid, int destid, SWIGTYPE_p_VULONG p1, SWIGTYPE_p_VULONG p2) {
    bool ret = C4dApiPINVOKE.GeSyncMessage__SWIG_0(messageid, destid, SWIGTYPE_p_VULONG.getCPtr(p1), SWIGTYPE_p_VULONG.getCPtr(p2));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GeSyncMessage(int messageid, int destid, SWIGTYPE_p_VULONG p1) {
    bool ret = C4dApiPINVOKE.GeSyncMessage__SWIG_1(messageid, destid, SWIGTYPE_p_VULONG.getCPtr(p1));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GeSyncMessage(int messageid, int destid) {
    bool ret = C4dApiPINVOKE.GeSyncMessage__SWIG_2(messageid, destid);
    return ret;
  }

  public static bool GeSyncMessage(int messageid) {
    bool ret = C4dApiPINVOKE.GeSyncMessage__SWIG_3(messageid);
    return ret;
  }

  public static bool DrawViews(DRAWFLAGS flags, BaseDraw bd) {
    bool ret = C4dApiPINVOKE.DrawViews__SWIG_0((int)flags, BaseDraw.getCPtr(bd));
    return ret;
  }

  public static bool DrawViews(DRAWFLAGS flags) {
    bool ret = C4dApiPINVOKE.DrawViews__SWIG_1((int)flags);
    return ret;
  }

  public static bool SendModelingCommand(int command, ModelingCommandData data) {
    bool ret = C4dApiPINVOKE.SendModelingCommand(command, ModelingCommandData.getCPtr(data));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Filename GetGlobalTexturePath(int i) {
    SWIGTYPE_p_Filename ret = new SWIGTYPE_p_Filename(C4dApiPINVOKE.GetGlobalTexturePath(i), true);
    return ret;
  }

  public static void SetGlobalTexturePath(int i, SWIGTYPE_p_Filename fn) {
    C4dApiPINVOKE.SetGlobalTexturePath(i, SWIGTYPE_p_Filename.getCPtr(fn));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool GenerateTexturePath(SWIGTYPE_p_Filename docpath, SWIGTYPE_p_Filename srcname, SWIGTYPE_p_Filename suggestedfolder, SWIGTYPE_p_Filename dstname) {
    bool ret = C4dApiPINVOKE.GenerateTexturePath(SWIGTYPE_p_Filename.getCPtr(docpath), SWIGTYPE_p_Filename.getCPtr(srcname), SWIGTYPE_p_Filename.getCPtr(suggestedfolder), SWIGTYPE_p_Filename.getCPtr(dstname));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool IsInSearchPath(SWIGTYPE_p_Filename texfilename, SWIGTYPE_p_Filename docpath) {
    bool ret = C4dApiPINVOKE.IsInSearchPath(SWIGTYPE_p_Filename.getCPtr(texfilename), SWIGTYPE_p_Filename.getCPtr(docpath));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void FlushTexture(SWIGTYPE_p_Filename docpath, string /* constString&_cstype */ name, SWIGTYPE_p_Filename suggestedfolder) {
    C4dApiPINVOKE.FlushTexture(SWIGTYPE_p_Filename.getCPtr(docpath), name, SWIGTYPE_p_Filename.getCPtr(suggestedfolder));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void FlushUnusedTextures() {
    C4dApiPINVOKE.FlushUnusedTextures();
  }

  public static BaseContainer GetWorldContainer() {
    BaseContainer ret = new BaseContainer(C4dApiPINVOKE.GetWorldContainer(), true);
    return ret;
  }

  public static BaseContainer GetWorldContainerInstance() {
    IntPtr cPtr = C4dApiPINVOKE.GetWorldContainerInstance();
    BaseContainer ret = (cPtr == IntPtr.Zero) ? null : new BaseContainer(cPtr, false);
    return ret;
  }

  public static void SetWorldContainer(BaseContainer bc) {
    C4dApiPINVOKE.SetWorldContainer(BaseContainer.getCPtr(bc));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static Fusee.Math.Core.Vector3D /* Vector_cstype_out */ GetViewColor(int colid)  {  /* <Vector_csout> */
      Fusee.Math.Core.Vector3D ret = C4dApiPINVOKE.GetViewColor(colid);
      return ret;
   } /* <Vector_csout> */ 

  public static void SetViewColor(int colid, Fusee.Math.Core.Vector3D /* constVector&_cstype */ col) {
    C4dApiPINVOKE.SetViewColor(colid, ref col /* constVector&_csin */);
  }

  public static void ErrorStringDialog(CHECKVALUERANGE type, double x, double y, CHECKVALUEFORMAT arg3) {
    C4dApiPINVOKE.ErrorStringDialog((int)type, x, y, (int)arg3);
  }

  public static bool ReadPluginInfo(int pluginid, SWIGTYPE_p_void buffer, int size) {
    bool ret = C4dApiPINVOKE.ReadPluginInfo(pluginid, SWIGTYPE_p_void.getCPtr(buffer), size);
    return ret;
  }

  public static bool WritePluginInfo(int pluginid, SWIGTYPE_p_void buffer, int size) {
    bool ret = C4dApiPINVOKE.WritePluginInfo(pluginid, SWIGTYPE_p_void.getCPtr(buffer), size);
    return ret;
  }

  public static bool ReadRegInfo(int pluginid, SWIGTYPE_p_void buffer, int size) {
    bool ret = C4dApiPINVOKE.ReadRegInfo(pluginid, SWIGTYPE_p_void.getCPtr(buffer), size);
    return ret;
  }

  public static bool WriteRegInfo(int pluginid, SWIGTYPE_p_void buffer, int size) {
    bool ret = C4dApiPINVOKE.WriteRegInfo(pluginid, SWIGTYPE_p_void.getCPtr(buffer), size);
    return ret;
  }

  public static BaseContainer GetWorldPluginData(int id) {
    IntPtr cPtr = C4dApiPINVOKE.GetWorldPluginData(id);
    BaseContainer ret = (cPtr == IntPtr.Zero) ? null : new BaseContainer(cPtr, false);
    return ret;
  }

  public static bool SetWorldPluginData(int id, BaseContainer bc, bool add) {
    bool ret = C4dApiPINVOKE.SetWorldPluginData__SWIG_0(id, BaseContainer.getCPtr(bc), add);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool SetWorldPluginData(int id, BaseContainer bc) {
    bool ret = C4dApiPINVOKE.SetWorldPluginData__SWIG_1(id, BaseContainer.getCPtr(bc));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BaseContainer GetToolPluginData(BaseDocument doc, int id) {
    IntPtr cPtr = C4dApiPINVOKE.GetToolPluginData(BaseDocument.getCPtr(doc), id);
    BaseContainer ret = (cPtr == IntPtr.Zero) ? null : new BaseContainer(cPtr, false);
    return ret;
  }

  public static bool GeIsActiveToolEnabled() {
    bool ret = C4dApiPINVOKE.GeIsActiveToolEnabled();
    return ret;
  }

  public static bool GeGetLanguage(int index, SWIGTYPE_p_String extension, SWIGTYPE_p_String name, SWIGTYPE_p_Bool default_language) {
    bool ret = C4dApiPINVOKE.GeGetLanguage(index, SWIGTYPE_p_String.getCPtr(extension), SWIGTYPE_p_String.getCPtr(name), SWIGTYPE_p_Bool.getCPtr(default_language));
    return ret;
  }

  public static IDENTIFYFILE GeIdentifyFile(SWIGTYPE_p_Filename name, SWIGTYPE_p_UCHAR probe, int probesize, IDENTIFYFILE recognition, SWIGTYPE_p_p_BasePlugin bp) {
    IDENTIFYFILE ret = (IDENTIFYFILE)C4dApiPINVOKE.GeIdentifyFile(SWIGTYPE_p_Filename.getCPtr(name), SWIGTYPE_p_UCHAR.getCPtr(probe), probesize, (int)recognition, SWIGTYPE_p_p_BasePlugin.getCPtr(bp));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static GeListHead GetScriptHead(int type) {
    IntPtr cPtr = C4dApiPINVOKE.GetScriptHead(type);
    GeListHead ret = (cPtr == IntPtr.Zero) ? null : new GeListHead(cPtr, false);
    return ret;
  }

  public static int GetDynamicScriptID(BaseList2D bl) {
    int ret = C4dApiPINVOKE.GetDynamicScriptID(BaseList2D.getCPtr(bl));
    return ret;
  }

  public static bool GetCommandLineArgs(SWIGTYPE_p_C4DPL_CommandLineArgs args) {
    bool ret = C4dApiPINVOKE.GetCommandLineArgs(SWIGTYPE_p_C4DPL_CommandLineArgs.getCPtr(args));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string /* String_cstype */ GetObjectName(int type)  {  /* <String_csout> */
      string ret = C4dApiPINVOKE.GetObjectName(type);
      return ret;
   } /* </String_csout> */ 

  public static string /* String_cstype */ GetTagName(int type)  {  /* <String_csout> */
      string ret = C4dApiPINVOKE.GetTagName(type);
      return ret;
   } /* </String_csout> */ 

  public static int GetObjectType(string /* constString&_cstype */ name) {
    int ret = C4dApiPINVOKE.GetObjectType(name);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int GetTagType(string /* constString&_cstype */ name) {
    int ret = C4dApiPINVOKE.GetTagType(name);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GeRegistryAdd(int sub_id, REGISTRYTYPE main_id, SWIGTYPE_p_void data) {
    bool ret = C4dApiPINVOKE.GeRegistryAdd(sub_id, (int)main_id, SWIGTYPE_p_void.getCPtr(data));
    return ret;
  }

  public static bool GeRegistryRemove(int sub_id, REGISTRYTYPE main_id) {
    bool ret = C4dApiPINVOKE.GeRegistryRemove(sub_id, (int)main_id);
    return ret;
  }

  public static Registry GeRegistryFind(int sub_id, REGISTRYTYPE main_id) {
    IntPtr cPtr = C4dApiPINVOKE.GeRegistryFind(sub_id, (int)main_id);
    Registry ret = (cPtr == IntPtr.Zero) ? null : new Registry(cPtr, false);
    return ret;
  }

  public static Registry GeRegistryGetLast(REGISTRYTYPE main_id) {
    IntPtr cPtr = C4dApiPINVOKE.GeRegistryGetLast((int)main_id);
    Registry ret = (cPtr == IntPtr.Zero) ? null : new Registry(cPtr, false);
    return ret;
  }

  public static Registry GeRegistryGetFirst(REGISTRYTYPE main_id) {
    IntPtr cPtr = C4dApiPINVOKE.GeRegistryGetFirst((int)main_id);
    Registry ret = (cPtr == IntPtr.Zero) ? null : new Registry(cPtr, false);
    return ret;
  }

  public static bool GeRegistryGetAutoID(SWIGTYPE_p_LONG id) {
    bool ret = C4dApiPINVOKE.GeRegistryGetAutoID(SWIGTYPE_p_LONG.getCPtr(id));
    return ret;
  }

  public static bool GePluginMessage(int id, SWIGTYPE_p_void data) {
    bool ret = C4dApiPINVOKE.GePluginMessage(id, SWIGTYPE_p_void.getCPtr(data));
    return ret;
  }

  public static bool CheckIsRunning(CHECKISRUNNING type) {
    bool ret = C4dApiPINVOKE.CheckIsRunning((int)type);
    return ret;
  }

  public static string /* String_cstype */ GeGetDefaultFilename(int id)  {  /* <String_csout> */
      string ret = C4dApiPINVOKE.GeGetDefaultFilename(id);
      return ret;
   } /* </String_csout> */ 

  public static void FindInManager(BaseList2D bl) {
    C4dApiPINVOKE.FindInManager(BaseList2D.getCPtr(bl));
  }

  public static void GeSleep(int milliseconds) {
    C4dApiPINVOKE.GeSleep(milliseconds);
  }

  public static bool GeIsMainThread() {
    bool ret = C4dApiPINVOKE.GeIsMainThread();
    return ret;
  }

  public static int GeDebugSetFloatingPointChecks(int on) {
    int ret = C4dApiPINVOKE.GeDebugSetFloatingPointChecks(on);
    return ret;
  }

  public static void _GeDebugBreak(int line, SWIGTYPE_p_CHAR file) {
    C4dApiPINVOKE._GeDebugBreak(line, SWIGTYPE_p_CHAR.getCPtr(file));
  }

  public static void GeDebugOut(SWIGTYPE_p_CHAR s) {
    C4dApiPINVOKE.GeDebugOut__SWIG_0(SWIGTYPE_p_CHAR.getCPtr(s));
  }

  public static void GeDebugOut(string /* constString&_cstype */ s) {
    C4dApiPINVOKE.GeDebugOut__SWIG_1(s);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int sprintf_safe(string _DstBuf, int _MaxCount, string _Format) {
    int ret = C4dApiPINVOKE.sprintf_safe(_DstBuf, _MaxCount, _Format);
    return ret;
  }

  public static int vsprintf_safe(string _DstBuf, int _MaxCount, string _Format, SWIGTYPE_p_va_list _ArgList) {
    int ret = C4dApiPINVOKE.vsprintf_safe(_DstBuf, _MaxCount, _Format, SWIGTYPE_p_va_list.getCPtr(_ArgList));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static GeData SendCoreMessage(int coreid, BaseContainer msg, int eventid) {
    GeData ret = new GeData(C4dApiPINVOKE.SendCoreMessage__SWIG_0(coreid, BaseContainer.getCPtr(msg), eventid), true);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static GeData SendCoreMessage(int coreid, BaseContainer msg) {
    GeData ret = new GeData(C4dApiPINVOKE.SendCoreMessage__SWIG_1(coreid, BaseContainer.getCPtr(msg)), true);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BaseContainer GetMachineFeatures() {
    BaseContainer ret = new BaseContainer(C4dApiPINVOKE.GetMachineFeatures(), true);
    return ret;
  }

  public static bool GeGetMemoryStat(BaseContainer stat) {
    bool ret = C4dApiPINVOKE.GeGetMemoryStat(BaseContainer.getCPtr(stat));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool PopupEditText(int screenx, int screeny, int width, int height, string /* constString&_cstype */ changeme, int flags, SWIGTYPE_p_PopupEditTextCallback func, SWIGTYPE_p_void userdata) {
    bool ret = C4dApiPINVOKE.PopupEditText(screenx, screeny, width, height, changeme, flags, SWIGTYPE_p_PopupEditTextCallback.getCPtr(func), SWIGTYPE_p_void.getCPtr(userdata));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void StartEditorRender(bool active_only, bool raybrush, int x1, int y1, int x2, int y2, BaseThread bt, BaseDraw bd, bool newthread) {
    C4dApiPINVOKE.StartEditorRender(active_only, raybrush, x1, y1, x2, y2, BaseThread.getCPtr(bt), BaseDraw.getCPtr(bd), newthread);
  }

  public static string /* String_cstype */ FormatNumber(GeData val, int format, int fps, bool bUnit)  {  /* <String_csout> */
      string ret = C4dApiPINVOKE.FormatNumber__SWIG_0(GeData.getCPtr(val), format, fps, bUnit);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
      return ret;
   } /* </String_csout> */ 

  public static string /* String_cstype */ FormatNumber(GeData val, int format, int fps)  {  /* <String_csout> */
      string ret = C4dApiPINVOKE.FormatNumber__SWIG_1(GeData.getCPtr(val), format, fps);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
      return ret;
   } /* </String_csout> */ 

  public static GeData StringToNumber(string /* constString&_cstype */ text, int format, int fps, SWIGTYPE_p_LENGTHUNIT lengthunit) {
    GeData ret = new GeData(C4dApiPINVOKE.StringToNumber__SWIG_0(text, format, fps, SWIGTYPE_p_LENGTHUNIT.getCPtr(lengthunit)), true);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static GeData StringToNumber(string /* constString&_cstype */ text, int format, int fps) {
    GeData ret = new GeData(C4dApiPINVOKE.StringToNumber__SWIG_1(text, format, fps), true);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void CallCommand(int id, int subid) {
    C4dApiPINVOKE.CallCommand__SWIG_0(id, subid);
  }

  public static void CallCommand(int id) {
    C4dApiPINVOKE.CallCommand__SWIG_1(id);
  }

  public static string /* String_cstype */ GetCommandName(int id)  {  /* <String_csout> */
      string ret = C4dApiPINVOKE.GetCommandName(id);
      return ret;
   } /* </String_csout> */ 

  public static string /* String_cstype */ GetCommandHelp(int id)  {  /* <String_csout> */
      string ret = C4dApiPINVOKE.GetCommandHelp(id);
      return ret;
   } /* </String_csout> */ 

  public static bool IsCommandEnabled(int id) {
    bool ret = C4dApiPINVOKE.IsCommandEnabled(id);
    return ret;
  }

  public static bool IsCommandChecked(int id) {
    bool ret = C4dApiPINVOKE.IsCommandChecked(id);
    return ret;
  }

  public static SWIGTYPE_p_IpConnection GeIpOpenListener(SWIGTYPE_p_ULONG ipAddr, int port, BaseThread thread, int timeout, bool dontwait, SWIGTYPE_p_LONG ferr) {
    IntPtr cPtr = C4dApiPINVOKE.GeIpOpenListener(SWIGTYPE_p_ULONG.getCPtr(ipAddr), port, BaseThread.getCPtr(thread), timeout, dontwait, SWIGTYPE_p_LONG.getCPtr(ferr));
    SWIGTYPE_p_IpConnection ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_IpConnection(cPtr, false);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_IpConnection GeIpOpenOutgoing(SWIGTYPE_p_CHAR hostname, BaseThread thread, int initial_timeout, int timeout, bool dontwait, SWIGTYPE_p_LONG ferr) {
    IntPtr cPtr = C4dApiPINVOKE.GeIpOpenOutgoing(SWIGTYPE_p_CHAR.getCPtr(hostname), BaseThread.getCPtr(thread), initial_timeout, timeout, dontwait, SWIGTYPE_p_LONG.getCPtr(ferr));
    SWIGTYPE_p_IpConnection ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_IpConnection(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_IpConnection GeIpWaitForIncoming(SWIGTYPE_p_IpConnection listener, BaseThread connection, SWIGTYPE_p_LONG ferr) {
    IntPtr cPtr = C4dApiPINVOKE.GeIpWaitForIncoming(SWIGTYPE_p_IpConnection.getCPtr(listener), BaseThread.getCPtr(connection), SWIGTYPE_p_LONG.getCPtr(ferr));
    SWIGTYPE_p_IpConnection ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_IpConnection(cPtr, false);
    return ret;
  }

  public static void GeIpCloseConnection(SWIGTYPE_p_p_IpConnection ipc) {
    C4dApiPINVOKE.GeIpCloseConnection(SWIGTYPE_p_p_IpConnection.getCPtr(ipc));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GeIpKillConnection(SWIGTYPE_p_IpConnection ipc) {
    C4dApiPINVOKE.GeIpKillConnection(SWIGTYPE_p_IpConnection.getCPtr(ipc));
  }

  public static SWIGTYPE_p_VLONG GeIpBytesInInputBuffer(SWIGTYPE_p_IpConnection ipc) {
    SWIGTYPE_p_VLONG ret = new SWIGTYPE_p_VLONG(C4dApiPINVOKE.GeIpBytesInInputBuffer(SWIGTYPE_p_IpConnection.getCPtr(ipc)), true);
    return ret;
  }

  public static SWIGTYPE_p_VLONG GeIpReadBytes(SWIGTYPE_p_IpConnection ipc, SWIGTYPE_p_void buf, SWIGTYPE_p_VLONG size) {
    SWIGTYPE_p_VLONG ret = new SWIGTYPE_p_VLONG(C4dApiPINVOKE.GeIpReadBytes(SWIGTYPE_p_IpConnection.getCPtr(ipc), SWIGTYPE_p_void.getCPtr(buf), SWIGTYPE_p_VLONG.getCPtr(size)), true);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_VLONG GeIpSendBytes(SWIGTYPE_p_IpConnection ipc, SWIGTYPE_p_void buf, SWIGTYPE_p_VLONG size) {
    SWIGTYPE_p_VLONG ret = new SWIGTYPE_p_VLONG(C4dApiPINVOKE.GeIpSendBytes(SWIGTYPE_p_IpConnection.getCPtr(ipc), SWIGTYPE_p_void.getCPtr(buf), SWIGTYPE_p_VLONG.getCPtr(size)), true);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void GeIpGetHostAddr(SWIGTYPE_p_IpConnection ipc, SWIGTYPE_p_CHAR buf, int bufsize) {
    C4dApiPINVOKE.GeIpGetHostAddr(SWIGTYPE_p_IpConnection.getCPtr(ipc), SWIGTYPE_p_CHAR.getCPtr(buf), bufsize);
  }

  public static void GeIpGetRemoteAddr(SWIGTYPE_p_IpConnection ipc, SWIGTYPE_p_CHAR buf, int bufsize) {
    C4dApiPINVOKE.GeIpGetRemoteAddr(SWIGTYPE_p_IpConnection.getCPtr(ipc), SWIGTYPE_p_CHAR.getCPtr(buf), bufsize);
  }

  public static bool SendMailAvailable() {
    bool ret = C4dApiPINVOKE.SendMailAvailable();
    return ret;
  }

  public static bool SendMail(string /* constString&_cstype */ t_subject, SWIGTYPE_p_String t_to, SWIGTYPE_p_String t_cc, SWIGTYPE_p_String t_bcc, SWIGTYPE_p_Filename t_attachments, string /* constString&_cstype */ t_body, int flags) {
    bool ret = C4dApiPINVOKE.SendMail(t_subject, SWIGTYPE_p_String.getCPtr(t_to), SWIGTYPE_p_String.getCPtr(t_cc), SWIGTYPE_p_String.getCPtr(t_bcc), SWIGTYPE_p_Filename.getCPtr(t_attachments), t_body, flags);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GetSystemEnvironmentVariable(string /* constString&_cstype */ varname, SWIGTYPE_p_String result) {
    bool ret = C4dApiPINVOKE.GetSystemEnvironmentVariable(varname, SWIGTYPE_p_String.getCPtr(result));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AskForAdministratorPrivileges(string /* constString&_cstype */ msg, string /* constString&_cstype */ caption, bool allowsuperuser, SWIGTYPE_p_p_void token) {
    bool ret = C4dApiPINVOKE.AskForAdministratorPrivileges(msg, caption, allowsuperuser, SWIGTYPE_p_p_void.getCPtr(token));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void EndAdministratorPrivileges() {
    C4dApiPINVOKE.EndAdministratorPrivileges();
  }

  public static void RestartApplication(SWIGTYPE_p_UWORD param, int exitcode, SWIGTYPE_p_p_UWORD path) {
    C4dApiPINVOKE.RestartApplication__SWIG_0(SWIGTYPE_p_UWORD.getCPtr(param), exitcode, SWIGTYPE_p_p_UWORD.getCPtr(path));
  }

  public static void RestartApplication(SWIGTYPE_p_UWORD param, int exitcode) {
    C4dApiPINVOKE.RestartApplication__SWIG_1(SWIGTYPE_p_UWORD.getCPtr(param), exitcode);
  }

  public static void RestartApplication(SWIGTYPE_p_UWORD param) {
    C4dApiPINVOKE.RestartApplication__SWIG_2(SWIGTYPE_p_UWORD.getCPtr(param));
  }

  public static void RestartApplication() {
    C4dApiPINVOKE.RestartApplication__SWIG_3();
  }

  public static void GeUpdateUI() {
    C4dApiPINVOKE.GeUpdateUI();
  }

  public static int GetShortcutCount() {
    int ret = C4dApiPINVOKE.GetShortcutCount();
    return ret;
  }

  public static BaseContainer GetShortcut(int index) {
    BaseContainer ret = new BaseContainer(C4dApiPINVOKE.GetShortcut(index), true);
    return ret;
  }

  public static bool AddShortcut(BaseContainer bc) {
    bool ret = C4dApiPINVOKE.AddShortcut(BaseContainer.getCPtr(bc));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool RemoveShortcut(int index) {
    bool ret = C4dApiPINVOKE.RemoveShortcut(index);
    return ret;
  }

  public static bool LoadShortcutSet(SWIGTYPE_p_Filename fn, bool add) {
    bool ret = C4dApiPINVOKE.LoadShortcutSet(SWIGTYPE_p_Filename.getCPtr(fn), add);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool SaveShortcutSet(SWIGTYPE_p_Filename fn) {
    bool ret = C4dApiPINVOKE.SaveShortcutSet(SWIGTYPE_p_Filename.getCPtr(fn));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int FindShortcutsFromID(int pluginid, SWIGTYPE_p_LONG indexarray, int maxarrayelements) {
    int ret = C4dApiPINVOKE.FindShortcutsFromID(pluginid, SWIGTYPE_p_LONG.getCPtr(indexarray), maxarrayelements);
    return ret;
  }

  public static int FindShortcuts(BaseContainer scut, SWIGTYPE_p_LONG idarray, int maxarrayelements) {
    int ret = C4dApiPINVOKE.FindShortcuts(BaseContainer.getCPtr(scut), SWIGTYPE_p_LONG.getCPtr(idarray), maxarrayelements);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool CheckCommandShortcut(int id, int key, int qual) {
    bool ret = C4dApiPINVOKE.CheckCommandShortcut(id, key, qual);
    return ret;
  }

  public static void InsertCreateObject(BaseDocument doc, BaseObject op, BaseObject activeobj) {
    C4dApiPINVOKE.InsertCreateObject__SWIG_0(BaseDocument.getCPtr(doc), BaseObject.getCPtr(op), BaseObject.getCPtr(activeobj));
  }

  public static void InsertCreateObject(BaseDocument doc, BaseObject op) {
    C4dApiPINVOKE.InsertCreateObject__SWIG_1(BaseDocument.getCPtr(doc), BaseObject.getCPtr(op));
  }

  public static void CopyToClipboard(string /* constString&_cstype */ text) {
    C4dApiPINVOKE.CopyToClipboard__SWIG_0(text);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CopyToClipboard(BaseBitmap map, int ownerid) {
    C4dApiPINVOKE.CopyToClipboard__SWIG_1(BaseBitmap.getCPtr(map), ownerid);
  }

  public static bool GetStringFromClipboard(SWIGTYPE_p_String txt) {
    bool ret = C4dApiPINVOKE.GetStringFromClipboard(SWIGTYPE_p_String.getCPtr(txt));
    return ret;
  }

  public static bool GetBitmapFromClipboard(BaseBitmap map) {
    bool ret = C4dApiPINVOKE.GetBitmapFromClipboard(BaseBitmap.getCPtr(map));
    return ret;
  }

  public static CLIPBOARDTYPE GetClipboardType() {
    CLIPBOARDTYPE ret = (CLIPBOARDTYPE)C4dApiPINVOKE.GetClipboardType();
    return ret;
  }

  public static int GetC4DClipboardOwner() {
    int ret = C4dApiPINVOKE.GetC4DClipboardOwner();
    return ret;
  }

  public static void BrowserLibraryPopup(int mx, int my, int defw, int defh, int pluginwindowid, int presettypeid, SWIGTYPE_p_void userdata, SWIGTYPE_p_BrowserPopupCallback callback) {
    C4dApiPINVOKE.BrowserLibraryPopup(mx, my, defw, defh, pluginwindowid, presettypeid, SWIGTYPE_p_void.getCPtr(userdata), SWIGTYPE_p_BrowserPopupCallback.getCPtr(callback));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static BaseBitmap GetCursorBitmap(int type, SWIGTYPE_p_LONG hotspotx, SWIGTYPE_p_LONG hotspoty) {
    IntPtr cPtr = C4dApiPINVOKE.GetCursorBitmap(type, SWIGTYPE_p_LONG.getCPtr(hotspotx), SWIGTYPE_p_LONG.getCPtr(hotspoty));
    BaseBitmap ret = (cPtr == IntPtr.Zero) ? null : new BaseBitmap(cPtr, false);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void XThreadMain(SWIGTYPE_p_void data) {
    C4dApiPINVOKE.XThreadMain(SWIGTYPE_p_void.getCPtr(data));
  }

  public static bool XThreadTest(SWIGTYPE_p_void data) {
    bool ret = C4dApiPINVOKE.XThreadTest(SWIGTYPE_p_void.getCPtr(data));
    return ret;
  }

  public static int GeGetCPUCount() {
    int ret = C4dApiPINVOKE.GeGetCPUCount();
    return ret;
  }

  public static void GeThreadLock() {
    C4dApiPINVOKE.GeThreadLock();
  }

  public static void GeThreadUnlock() {
    C4dApiPINVOKE.GeThreadUnlock();
  }

  public static THREADTYPE IdentifyThread(BaseThread bt) {
    THREADTYPE ret = (THREADTYPE)C4dApiPINVOKE.IdentifyThread(BaseThread.getCPtr(bt));
    return ret;
  }

  public static SWIGTYPE_p_ULONG GeGetCurrentThreadId() {
    SWIGTYPE_p_ULONG ret = new SWIGTYPE_p_ULONG(C4dApiPINVOKE.GeGetCurrentThreadId(), true);
    return ret;
  }

  public static BaseThread GeGetCurrentThread() {
    IntPtr cPtr = C4dApiPINVOKE.GeGetCurrentThread();
    BaseThread ret = (cPtr == IntPtr.Zero) ? null : new BaseThread(cPtr, false);
    return ret;
  }

  public static bool Description_Register(int id, string /* constString&_cstype */ idstr, SWIGTYPE_p_LocalResource res) {
    bool ret = C4dApiPINVOKE.Description_Register(id, idstr, SWIGTYPE_p_LocalResource.getCPtr(res));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string /* String_cstype */ DescGenerateTitle(AtomArray arr)  {  /* <String_csout> */
      string ret = C4dApiPINVOKE.DescGenerateTitle(AtomArray.getCPtr(arr));
      return ret;
   } /* </String_csout> */ 

  public static BaseBitmap InitResourceBitmap(int resource_id) {
    IntPtr cPtr = C4dApiPINVOKE.InitResourceBitmap(resource_id);
    BaseBitmap ret = (cPtr == IntPtr.Zero) ? null : new BaseBitmap(cPtr, false);
    return ret;
  }

  public static void FillNodePlugin(SWIGTYPE_p_NODEPLUGIN np, int info, NodeDataAllocator /* DataAllocator*_cstype */ g, BaseBitmap icon, int disklevel, SWIGTYPE_p_void emulation) {
    C4dApiPINVOKE.FillNodePlugin__SWIG_0(SWIGTYPE_p_NODEPLUGIN.getCPtr(np), info, g /* DataAllocator*_csin */, BaseBitmap.getCPtr(icon), disklevel, SWIGTYPE_p_void.getCPtr(emulation));
  }

  public static void FillNodePlugin(SWIGTYPE_p_NODEPLUGIN np, int info, NodeDataAllocator /* DataAllocator*_cstype */ g, BaseBitmap icon, int disklevel) {
    C4dApiPINVOKE.FillNodePlugin__SWIG_1(SWIGTYPE_p_NODEPLUGIN.getCPtr(np), info, g /* DataAllocator*_csin */, BaseBitmap.getCPtr(icon), disklevel);
  }

  public static bool RegisterNodePlugin(int id, string /* constString&_cstype */ str, int info, NodeDataAllocator /* DataAllocator*_cstype */ g, BaseBitmap icon, int disklevel, SWIGTYPE_p_LONG fallback) {
    bool ret = C4dApiPINVOKE.RegisterNodePlugin(id, str, info, g /* DataAllocator*_csin */, BaseBitmap.getCPtr(icon), disklevel, SWIGTYPE_p_LONG.getCPtr(fallback));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static GeListHead AllocListHead() {
    IntPtr cPtr = C4dApiPINVOKE.AllocListHead();
    GeListHead ret = (cPtr == IntPtr.Zero) ? null : new GeListHead(cPtr, false);
    return ret;
  }

  public static GeListNode AllocListNode(int id) {
    IntPtr cPtr = C4dApiPINVOKE.AllocListNode(id);
    GeListNode ret = (cPtr == IntPtr.Zero) ? null : new GeListNode(cPtr, false);
    return ret;
  }

  public static GeListNode AllocSmallListNode(int id) {
    IntPtr cPtr = C4dApiPINVOKE.AllocSmallListNode(id);
    GeListNode ret = (cPtr == IntPtr.Zero) ? null : new GeListNode(cPtr, false);
    return ret;
  }

  public static GeListNode AllocMultiNode(SWIGTYPE_p_LONG id_array, int id_cnt) {
    IntPtr cPtr = C4dApiPINVOKE.AllocMultiNode(SWIGTYPE_p_LONG.getCPtr(id_array), id_cnt);
    GeListNode ret = (cPtr == IntPtr.Zero) ? null : new GeListNode(cPtr, false);
    return ret;
  }

  public static void HandleShaderMessage(GeListNode node, SWIGTYPE_p_BaseShader ps, int type, SWIGTYPE_p_void data) {
    C4dApiPINVOKE.HandleShaderMessage(GeListNode.getCPtr(node), SWIGTYPE_p_BaseShader.getCPtr(ps), type, SWIGTYPE_p_void.getCPtr(data));
  }

  public static void HandleInitialChannel(GeListNode node, int id, int type, SWIGTYPE_p_void data) {
    C4dApiPINVOKE.HandleInitialChannel(GeListNode.getCPtr(node), id, type, SWIGTYPE_p_void.getCPtr(data));
  }

  public static double CalculateTranslationScale(SWIGTYPE_p_UnitScaleData src, SWIGTYPE_p_UnitScaleData dst) {
    double ret = C4dApiPINVOKE.CalculateTranslationScale__SWIG_0(SWIGTYPE_p_UnitScaleData.getCPtr(src), SWIGTYPE_p_UnitScaleData.getCPtr(dst));
    return ret;
  }

  public static double CalculateTranslationScale(BaseDocument sdoc, BaseDocument ddoc) {
    double ret = C4dApiPINVOKE.CalculateTranslationScale__SWIG_1(BaseDocument.getCPtr(sdoc), BaseDocument.getCPtr(ddoc));
    return ret;
  }

  public static BaseObject GeneratePrimitive(BaseDocument doc, int type, BaseContainer bc, double lod, bool isoparm, BaseThread bt) {
    IntPtr cPtr = C4dApiPINVOKE.GeneratePrimitive__SWIG_0(BaseDocument.getCPtr(doc), type, BaseContainer.getCPtr(bc), lod, isoparm, BaseThread.getCPtr(bt));
    BaseObject ret = (cPtr == IntPtr.Zero) ? null : new BaseObject(cPtr, false);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BaseObject GeneratePrimitive(BaseDocument doc, int type, BaseContainer bc, double lod, bool isoparm) {
    IntPtr cPtr = C4dApiPINVOKE.GeneratePrimitive__SWIG_1(BaseDocument.getCPtr(doc), type, BaseContainer.getCPtr(bc), lod, isoparm);
    BaseObject ret = (cPtr == IntPtr.Zero) ? null : new BaseObject(cPtr, false);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BaseObject GenerateSplinePrimitive(BaseDocument doc, int type, BaseContainer bc, double lod, BaseThread bt) {
    IntPtr cPtr = C4dApiPINVOKE.GenerateSplinePrimitive__SWIG_0(BaseDocument.getCPtr(doc), type, BaseContainer.getCPtr(bc), lod, BaseThread.getCPtr(bt));
    BaseObject ret = (cPtr == IntPtr.Zero) ? null : new BaseObject(cPtr, false);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BaseObject GenerateSplinePrimitive(BaseDocument doc, int type, BaseContainer bc, double lod) {
    IntPtr cPtr = C4dApiPINVOKE.GenerateSplinePrimitive__SWIG_1(BaseDocument.getCPtr(doc), type, BaseContainer.getCPtr(bc), lod);
    BaseObject ret = (cPtr == IntPtr.Zero) ? null : new BaseObject(cPtr, false);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int CalcLOD(int val, double lod, int min, int max) {
    int ret = C4dApiPINVOKE.CalcLOD(val, lod, min, max);
    return ret;
  }

  public static bool DisjointMesh(PointObject op) {
    bool ret = C4dApiPINVOKE.DisjointMesh(PointObject.getCPtr(op));
    return ret;
  }

  public static SplineObject FitCurve(ref Fusee.Math.Core.Vector3D /* Vector*&_cstype */ padr, int pcnt, double error, BaseThread bt) {
    IntPtr cPtr = C4dApiPINVOKE.FitCurve(ref padr /* Vector*&_csin */, pcnt, error, BaseThread.getCPtr(bt));
    SplineObject ret = (cPtr == IntPtr.Zero) ? null : new SplineObject(cPtr, false);
    return ret;
  }

  public static bool Triangulate(ref Fusee.Math.Core.Vector3D /* Vector*&_cstype */ padr, int pcnt, SWIGTYPE_p_p_CPolygon vadr, SWIGTYPE_p_LONG vcnt) {
    bool ret = C4dApiPINVOKE.Triangulate(ref padr /* Vector*&_csin */, pcnt, SWIGTYPE_p_p_CPolygon.getCPtr(vadr), SWIGTYPE_p_LONG.getCPtr(vcnt));
    return ret;
  }

  public static bool TriangulateStandard(ref Fusee.Math.Core.Vector3D /* Vector*&_cstype */ padr, int pcnt, SWIGTYPE_p_LONG list, int lcnt, SWIGTYPE_p_p_CPolygon vadr, SWIGTYPE_p_LONG vcnt, BaseThread thread) {
    bool ret = C4dApiPINVOKE.TriangulateStandard(ref padr /* Vector*&_csin */, pcnt, SWIGTYPE_p_LONG.getCPtr(list), lcnt, SWIGTYPE_p_p_CPolygon.getCPtr(vadr), SWIGTYPE_p_LONG.getCPtr(vcnt), BaseThread.getCPtr(thread));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool TriangulateRegular(ref Fusee.Math.Core.Vector3D /* Vector*&_cstype */ pinp, int pinp_cnt, SWIGTYPE_p_LONG list, int lcnt, SWIGTYPE_p_p_Vector padr, SWIGTYPE_p_LONG pcnt, SWIGTYPE_p_p_CPolygon vadr, SWIGTYPE_p_LONG vcnt, double regular_width, BaseThread thread) {
    bool ret = C4dApiPINVOKE.TriangulateRegular(ref pinp /* Vector*&_csin */, pinp_cnt, SWIGTYPE_p_LONG.getCPtr(list), lcnt, SWIGTYPE_p_p_Vector.getCPtr(padr), SWIGTYPE_p_LONG.getCPtr(pcnt), SWIGTYPE_p_p_CPolygon.getCPtr(vadr), SWIGTYPE_p_LONG.getCPtr(vcnt), regular_width, BaseThread.getCPtr(thread));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BaseObject GenerateText(BaseContainer cp, BaseThread bt, bool separate) {
    IntPtr cPtr = C4dApiPINVOKE.GenerateText(BaseContainer.getCPtr(cp), BaseThread.getCPtr(bt), separate);
    BaseObject ret = (cPtr == IntPtr.Zero) ? null : new BaseObject(cPtr, false);
    return ret;
  }

  public static bool CheckDisplayFilter(BaseObject op, int filter) {
    bool ret = C4dApiPINVOKE.CheckDisplayFilter(BaseObject.getCPtr(op), filter);
    return ret;
  }

  public static int IntersectionTest(PolygonObject op, BaseDraw bd, double x, double y, ref Fusee.Math.Core.Matrix4D /* constMatrix&_cstype */ mg, SWIGTYPE_p_Real z, MODELINGCOMMANDMODE mode, SWIGTYPE_p_UCHAR pPointSelect, int lSelectCount) {
    double[] adbl_mg;
    unsafe {adbl_mg = Fusee.Math.ArrayConversion.Convert.Matrix4DToArrayDoubleC4DLayout(mg);    fixed (double *pdbl_mg = adbl_mg) {
    /* constMatrix&_csin_pre */
    try {
      int ret = C4dApiPINVOKE.IntersectionTest(PolygonObject.getCPtr(op), BaseDraw.getCPtr(bd), x, y, (IntPtr) pdbl_mg /* constMatrix&_csin */, SWIGTYPE_p_Real.getCPtr(z), (int)mode, SWIGTYPE_p_UCHAR.getCPtr(pPointSelect), lSelectCount);
      return ret;
    } finally {
        // NOP mg = Fusee.Math.ArrayConversion.Convert.ArrayDoubleC4DLayoutToMatrix4D(pdbl_mg);
        /* constMatrix&_csin_post */
    }
} } /* constMatrix&_csin_terminator */
  }

  public static BaseObject GetVirtualLineObject(BaseObject op, HierarchyHelp hh, ref Fusee.Math.Core.Matrix4D /* constMatrix&_cstype */ mloc, bool keep_spline, bool recurse, ref Fusee.Math.Core.Matrix4D /* Matrix*&_cstype */ mres, SWIGTYPE_p_Bool dirty) {
    double[] adbl_mloc;
    unsafe {adbl_mloc = Fusee.Math.ArrayConversion.Convert.Matrix4DToArrayDoubleC4DLayout(mloc);    fixed (double *pdbl_mloc = adbl_mloc) {
    /* constMatrix&_csin_pre */
    double[] adbl_mres;
    unsafe {adbl_mres = Fusee.Math.ArrayConversion.Convert.Matrix4DToArrayDoubleC4DLayout(mres);    fixed (double *pdbl_mres = adbl_mres) {
    /* Matrix*&_csin_pre */
    try {
      IntPtr cPtr = C4dApiPINVOKE.GetVirtualLineObject(BaseObject.getCPtr(op), HierarchyHelp.getCPtr(hh), (IntPtr) pdbl_mloc /* constMatrix&_csin */, keep_spline, recurse, (IntPtr) pdbl_mres /* Matrix*&_csin */, SWIGTYPE_p_Bool.getCPtr(dirty));
      BaseObject ret = (cPtr == IntPtr.Zero) ? null : new BaseObject(cPtr, false);
      return ret;
    } finally {
        // NOP mloc = Fusee.Math.ArrayConversion.Convert.ArrayDoubleC4DLayoutToMatrix4D(pdbl_mloc);
        /* constMatrix&_csin_post */
        mres = Fusee.Math.ArrayConversion.Convert.ArrayDoubleC4DLayoutToMatrix4D(pdbl_mres);
        /* Matrix*&_csin_post */
    }
} } /* Matrix*&_csin_terminator */
} } /* constMatrix&_csin_terminator */
  }

  public static UVWTag GenerateUVW(BaseObject op, ref Fusee.Math.Core.Matrix4D /* constMatrix&_cstype */ opmg, TextureTag tp, ref Fusee.Math.Core.Matrix4D /* constMatrix&_cstype */ texopmg, BaseView view) {
    double[] adbl_opmg;
    unsafe {adbl_opmg = Fusee.Math.ArrayConversion.Convert.Matrix4DToArrayDoubleC4DLayout(opmg);    fixed (double *pdbl_opmg = adbl_opmg) {
    /* constMatrix&_csin_pre */
    double[] adbl_texopmg;
    unsafe {adbl_texopmg = Fusee.Math.ArrayConversion.Convert.Matrix4DToArrayDoubleC4DLayout(texopmg);    fixed (double *pdbl_texopmg = adbl_texopmg) {
    /* constMatrix&_csin_pre */
    try {
      IntPtr cPtr = C4dApiPINVOKE.GenerateUVW(BaseObject.getCPtr(op), (IntPtr) pdbl_opmg /* constMatrix&_csin */, TextureTag.getCPtr(tp), (IntPtr) pdbl_texopmg /* constMatrix&_csin */, BaseView.getCPtr(view));
      UVWTag ret = (cPtr == IntPtr.Zero) ? null : new UVWTag(cPtr, false);
      return ret;
    } finally {
        // NOP opmg = Fusee.Math.ArrayConversion.Convert.ArrayDoubleC4DLayoutToMatrix4D(pdbl_opmg);
        /* constMatrix&_csin_post */
        // NOP texopmg = Fusee.Math.ArrayConversion.Convert.ArrayDoubleC4DLayoutToMatrix4D(pdbl_texopmg);
        /* constMatrix&_csin_post */
    }
} } /* constMatrix&_csin_terminator */
} } /* constMatrix&_csin_terminator */
  }

  public static void CutReal(BaseContainer data, int id, double min, double max) {
    C4dApiPINVOKE.CutReal(BaseContainer.getCPtr(data), id, min, max);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void CutVector(BaseContainer data, int id, double min, double max) {
    C4dApiPINVOKE.CutVector(BaseContainer.getCPtr(data), id, min, max);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool CalculateVisiblePoints(BaseDraw bd, PolygonObject op, ref Fusee.Math.Core.Vector3D /* Vector*&_cstype */ padr, SWIGTYPE_p_UCHAR pset, bool select_visibonly) {
    bool ret = C4dApiPINVOKE.CalculateVisiblePoints(BaseDraw.getCPtr(bd), PolygonObject.getCPtr(op), ref padr /* Vector*&_csin */, SWIGTYPE_p_UCHAR.getCPtr(pset), select_visibonly);
    return ret;
  }

  public static BaseDocument GetActiveDocument() {
    IntPtr cPtr = C4dApiPINVOKE.GetActiveDocument();
    BaseDocument ret = (cPtr == IntPtr.Zero) ? null : new BaseDocument(cPtr, false);
    return ret;
  }

  public static BaseDocument GetFirstDocument() {
    IntPtr cPtr = C4dApiPINVOKE.GetFirstDocument();
    BaseDocument ret = (cPtr == IntPtr.Zero) ? null : new BaseDocument(cPtr, false);
    return ret;
  }

  public static bool LoadFile(SWIGTYPE_p_Filename name) {
    bool ret = C4dApiPINVOKE.LoadFile(SWIGTYPE_p_Filename.getCPtr(name));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void InsertBaseDocument(BaseDocument doc) {
    C4dApiPINVOKE.InsertBaseDocument(BaseDocument.getCPtr(doc));
  }

  public static void SetActiveDocument(BaseDocument doc) {
    C4dApiPINVOKE.SetActiveDocument(BaseDocument.getCPtr(doc));
  }

  public static void KillDocument(SWIGTYPE_p_p_BaseDocument doc) {
    C4dApiPINVOKE.KillDocument(SWIGTYPE_p_p_BaseDocument.getCPtr(doc));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static BaseDocument LoadDocument(SWIGTYPE_p_Filename name, SCENEFILTER loadflags, BaseThread thread) {
    IntPtr cPtr = C4dApiPINVOKE.LoadDocument(SWIGTYPE_p_Filename.getCPtr(name), (int)loadflags, BaseThread.getCPtr(thread));
    BaseDocument ret = (cPtr == IntPtr.Zero) ? null : new BaseDocument(cPtr, false);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool MergeDocument(BaseDocument doc, SWIGTYPE_p_Filename name, SCENEFILTER loadflags, BaseThread thread) {
    bool ret = C4dApiPINVOKE.MergeDocument(BaseDocument.getCPtr(doc), SWIGTYPE_p_Filename.getCPtr(name), (int)loadflags, BaseThread.getCPtr(thread));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool SaveDocument(BaseDocument doc, SWIGTYPE_p_Filename name, SAVEDOCUMENTFLAGS saveflags, int format) {
    bool ret = C4dApiPINVOKE.SaveDocument(BaseDocument.getCPtr(doc), SWIGTYPE_p_Filename.getCPtr(name), (int)saveflags, format);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BaseDocument IsolateObjects(BaseDocument doc, AtomArray t_objects) {
    IntPtr cPtr = C4dApiPINVOKE.IsolateObjects(BaseDocument.getCPtr(doc), AtomArray.getCPtr(t_objects));
    BaseDocument ret = (cPtr == IntPtr.Zero) ? null : new BaseDocument(cPtr, false);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RENDERRESULT RenderDocument(BaseDocument doc, BaseContainer rdata, SWIGTYPE_p_ProgressHook pr, SWIGTYPE_p_void private_data, BaseBitmap bmp, RENDERFLAGS renderflags, BaseThread th) {
    RENDERRESULT ret = (RENDERRESULT)C4dApiPINVOKE.RenderDocument(BaseDocument.getCPtr(doc), BaseContainer.getCPtr(rdata), SWIGTYPE_p_ProgressHook.getCPtr(pr), SWIGTYPE_p_void.getCPtr(private_data), BaseBitmap.getCPtr(bmp), (int)renderflags, BaseThread.getCPtr(th));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool InteractiveModeling_Rewind(BaseDocument doc) {
    bool ret = C4dApiPINVOKE.InteractiveModeling_Rewind(BaseDocument.getCPtr(doc));
    return ret;
  }

  public static bool InteractiveModeling_Restart(BaseDocument doc) {
    bool ret = C4dApiPINVOKE.InteractiveModeling_Restart(BaseDocument.getCPtr(doc));
    return ret;
  }

  public static void RunAnimation(BaseDocument doc, bool forward, bool stop) {
    C4dApiPINVOKE.RunAnimation(BaseDocument.getCPtr(doc), forward, stop);
  }

  public static void SetDocumentTime(BaseDocument doc, SWIGTYPE_p_BaseTime time) {
    C4dApiPINVOKE.SetDocumentTime(BaseDocument.getCPtr(doc), SWIGTYPE_p_BaseTime.getCPtr(time));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool CloseAllDocuments() {
    bool ret = C4dApiPINVOKE.CloseAllDocuments();
    return ret;
  }

  public static bool StopExternalRenderer() {
    bool ret = C4dApiPINVOKE.StopExternalRenderer();
    return ret;
  }

  public static bool RegisterCommandPlugin(int id, string /* constString&_cstype */ str, int info, BaseBitmap icon, string /* constString&_cstype */ help, CommandData dat) {
    bool ret = C4dApiPINVOKE.RegisterCommandPlugin(id, str, info, BaseBitmap.getCPtr(icon), help, CommandData.getCPtr(dat));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool RegisterManagerInformation(int id, string /* constString&_cstype */ str, int info) {
    bool ret = C4dApiPINVOKE.RegisterManagerInformation(id, str, info);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool RegisterObjectPlugin(int id, string /* constString&_cstype */ str, int info, NodeDataAllocator /* DataAllocator*_cstype */ g, string /* constString&_cstype */ description, BaseBitmap icon, int disklevel) {
    bool ret = C4dApiPINVOKE.RegisterObjectPlugin(id, str, info, g /* DataAllocator*_csin */, description, BaseBitmap.getCPtr(icon), disklevel);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GvBuildValuesTable(GvNode bn, SWIGTYPE_p_p_p_GvValue in_ports, SWIGTYPE_p_LONG nr_of_in_ports, SWIGTYPE_p_p_p_GvPort out_ports, SWIGTYPE_p_LONG nr_of_out_ports) {
    bool ret = C4dApiPINVOKE.GvBuildValuesTable__SWIG_0(GvNode.getCPtr(bn), SWIGTYPE_p_p_p_GvValue.getCPtr(in_ports), SWIGTYPE_p_LONG.getCPtr(nr_of_in_ports), SWIGTYPE_p_p_p_GvPort.getCPtr(out_ports), SWIGTYPE_p_LONG.getCPtr(nr_of_out_ports));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static GvWorld GvGetWorld() {
    IntPtr cPtr = C4dApiPINVOKE.GvGetWorld();
    GvWorld ret = (cPtr == IntPtr.Zero) ? null : new GvWorld(cPtr, false);
    return ret;
  }

  public static string /* String_cstype */ GvGetEmptyString()  {  /* <String_csout> */
      string ret = C4dApiPINVOKE.GvGetEmptyString();
      return ret;
   } /* </String_csout> */ 

  public static string /* String_cstype */ GvGetErrorString(string /* constString&_cstype */ command, int err)  {  /* <String_csout> */
      string ret = C4dApiPINVOKE.GvGetErrorString(command, err);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
      return ret;
   } /* </String_csout> */ 

  public static void GvGetPortList(GvPortsDescInfo info, GvPortIO port, GvPortList portlist) {
    C4dApiPINVOKE.GvGetPortList(GvPortsDescInfo.getCPtr(info), (int)port, GvPortList.getCPtr(portlist));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool GvGetPortDescription(GvPortsDescInfo info, GvPortIO port, int id, GvPortDescription pd) {
    bool ret = C4dApiPINVOKE.GvGetPortDescription(GvPortsDescInfo.getCPtr(info), (int)port, id, GvPortDescription.getCPtr(pd));
    return ret;
  }

  public static bool GvGetAllDataTypes(GvPortDescInfo info, SWIGTYPE_p_ULONG default_flag, int first_id) {
    bool ret = C4dApiPINVOKE.GvGetAllDataTypes(GvPortDescInfo.getCPtr(info), SWIGTYPE_p_ULONG.getCPtr(default_flag), first_id);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void GvFreePortDescInfo(GvPortDescInfo info) {
    C4dApiPINVOKE.GvFreePortDescInfo(GvPortDescInfo.getCPtr(info));
  }

  public static bool GvRegisterOpClassType(SWIGTYPE_p_GV_OPCLASS_HANDLER data, int struct_size) {
    bool ret = C4dApiPINVOKE.GvRegisterOpClassType(SWIGTYPE_p_GV_OPCLASS_HANDLER.getCPtr(data), struct_size);
    return ret;
  }

  public static bool GvRegisterOpGroupType(SWIGTYPE_p_GV_OPGROUP_HANDLER data, int struct_size) {
    bool ret = C4dApiPINVOKE.GvRegisterOpGroupType(SWIGTYPE_p_GV_OPGROUP_HANDLER.getCPtr(data), struct_size);
    return ret;
  }

  public static bool GvRegisterValueType(SWIGTYPE_p_GV_VALUE_HANDLER data, int struct_size) {
    bool ret = C4dApiPINVOKE.GvRegisterValueType(SWIGTYPE_p_GV_VALUE_HANDLER.getCPtr(data), struct_size);
    return ret;
  }

  public static bool GvRegisterDataType(SWIGTYPE_p_GV_DATA_HANDLER data, int struct_size, string symbol) {
    bool ret = C4dApiPINVOKE.GvRegisterDataType__SWIG_0(SWIGTYPE_p_GV_DATA_HANDLER.getCPtr(data), struct_size, symbol);
    return ret;
  }

  public static bool GvRegisterDataType(SWIGTYPE_p_GV_DATA_HANDLER data, int struct_size) {
    bool ret = C4dApiPINVOKE.GvRegisterDataType__SWIG_1(SWIGTYPE_p_GV_DATA_HANDLER.getCPtr(data), struct_size);
    return ret;
  }

  public static bool GvRegisterValGroupType(SWIGTYPE_p_GV_VALGROUP_HANDLER data, int struct_size) {
    bool ret = C4dApiPINVOKE.GvRegisterValGroupType(SWIGTYPE_p_GV_VALGROUP_HANDLER.getCPtr(data), struct_size);
    return ret;
  }

  public static SWIGTYPE_p_GV_OPCLASS_HANDLER GvFindRegisteredOpClass(int id) {
    IntPtr cPtr = C4dApiPINVOKE.GvFindRegisteredOpClass(id);
    SWIGTYPE_p_GV_OPCLASS_HANDLER ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_GV_OPCLASS_HANDLER(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_GV_OPGROUP_HANDLER GvFindRegisteredOpGroup(int id) {
    IntPtr cPtr = C4dApiPINVOKE.GvFindRegisteredOpGroup(id);
    SWIGTYPE_p_GV_OPGROUP_HANDLER ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_GV_OPGROUP_HANDLER(cPtr, false);
    return ret;
  }

  public static string /* String_cstype */ GvGetOperatorDetailedText(GvOperatorData op, GvNode bn)  {  /* <String_csout> */
      string ret = C4dApiPINVOKE.GvGetOperatorDetailedText(GvOperatorData.getCPtr(op), GvNode.getCPtr(bn));
      return ret;
   } /* </String_csout> */ 

  public static string /* String_cstype */ GvGetOperatorTitle(GvNode bn, int string_id)  {  /* <String_csout> */
      string ret = C4dApiPINVOKE.GvGetOperatorTitle(GvNode.getCPtr(bn), string_id);
      return ret;
   } /* </String_csout> */ 

  public static void GvFreeValuesTable(GvNode bn, SWIGTYPE_p_p_p_GvValue ports, SWIGTYPE_p_LONG nr_of_ports) {
    C4dApiPINVOKE.GvFreeValuesTable__SWIG_0(GvNode.getCPtr(bn), SWIGTYPE_p_p_p_GvValue.getCPtr(ports), SWIGTYPE_p_LONG.getCPtr(nr_of_ports));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GvFreeValuesTable(GvNode bn, GvValuesInfo info) {
    C4dApiPINVOKE.GvFreeValuesTable__SWIG_1(GvNode.getCPtr(bn), GvValuesInfo.getCPtr(info));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool GvBuildInValuesTable(GvNode bn, SWIGTYPE_p_p_p_GvValue ports, SWIGTYPE_p_LONG nr_of_ports, GvCalc c, GvRun r, SWIGTYPE_p_LONG ids) {
    bool ret = C4dApiPINVOKE.GvBuildInValuesTable__SWIG_0(GvNode.getCPtr(bn), SWIGTYPE_p_p_p_GvValue.getCPtr(ports), SWIGTYPE_p_LONG.getCPtr(nr_of_ports), GvCalc.getCPtr(c), GvRun.getCPtr(r), SWIGTYPE_p_LONG.getCPtr(ids));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GvBuildOutPortsTable(GvNode bn, SWIGTYPE_p_p_p_GvPort ports, SWIGTYPE_p_LONG nr_of_ports) {
    bool ret = C4dApiPINVOKE.GvBuildOutPortsTable(GvNode.getCPtr(bn), SWIGTYPE_p_p_p_GvPort.getCPtr(ports), SWIGTYPE_p_LONG.getCPtr(nr_of_ports));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GvCalculateInValuesTable(GvNode bn, GvRun run, GvCalc calc, GvValuesInfo info, int singleport, SWIGTYPE_p_BaseTime time) {
    bool ret = C4dApiPINVOKE.GvCalculateInValuesTable__SWIG_0(GvNode.getCPtr(bn), GvRun.getCPtr(run), GvCalc.getCPtr(calc), GvValuesInfo.getCPtr(info), singleport, SWIGTYPE_p_BaseTime.getCPtr(time));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GvCalculateInValuesTable(GvNode bn, GvRun run, GvCalc calc, GvValuesInfo info, int singleport) {
    bool ret = C4dApiPINVOKE.GvCalculateInValuesTable__SWIG_1(GvNode.getCPtr(bn), GvRun.getCPtr(run), GvCalc.getCPtr(calc), GvValuesInfo.getCPtr(info), singleport);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GvCalculateInValuesTable(GvNode bn, GvRun run, GvCalc calc, GvValuesInfo info) {
    bool ret = C4dApiPINVOKE.GvCalculateInValuesTable__SWIG_2(GvNode.getCPtr(bn), GvRun.getCPtr(run), GvCalc.getCPtr(calc), GvValuesInfo.getCPtr(info));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GvBuildInValuesTable(GvNode bn, GvValuesInfo info, GvCalc c, GvRun r, SWIGTYPE_p_LONG ids) {
    bool ret = C4dApiPINVOKE.GvBuildInValuesTable__SWIG_1(GvNode.getCPtr(bn), GvValuesInfo.getCPtr(info), GvCalc.getCPtr(c), GvRun.getCPtr(r), SWIGTYPE_p_LONG.getCPtr(ids));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GvBuildOutValuesTable(GvNode bn, GvValuesInfo info) {
    bool ret = C4dApiPINVOKE.GvBuildOutValuesTable(GvNode.getCPtr(bn), GvValuesInfo.getCPtr(info));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GvBuildValuesTable(GvNode bn, GvValuesInfo info, GvCalc c, GvRun r, SWIGTYPE_p_LONG input_ids) {
    bool ret = C4dApiPINVOKE.GvBuildValuesTable__SWIG_1(GvNode.getCPtr(bn), GvValuesInfo.getCPtr(info), GvCalc.getCPtr(c), GvRun.getCPtr(r), SWIGTYPE_p_LONG.getCPtr(input_ids));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static GvDataInfo GvGetDataInfo(GvNode bn, int id) {
    IntPtr cPtr = C4dApiPINVOKE.GvGetDataInfo(GvNode.getCPtr(bn), id);
    GvDataInfo ret = (cPtr == IntPtr.Zero) ? null : new GvDataInfo(cPtr, false);
    return ret;
  }

  public static bool GvCheckDataInfo(GvNode bn, int id) {
    bool ret = C4dApiPINVOKE.GvCheckDataInfo(GvNode.getCPtr(bn), id);
    return ret;
  }

  public static bool GvAllocDynamicData(GvNode bn, GvDynamicData data, GvCalc c, int id) {
    bool ret = C4dApiPINVOKE.GvAllocDynamicData__SWIG_0(GvNode.getCPtr(bn), GvDynamicData.getCPtr(data), GvCalc.getCPtr(c), id);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void GvFreeDynamicData(GvDynamicData data) {
    C4dApiPINVOKE.GvFreeDynamicData(GvDynamicData.getCPtr(data));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GvClearDynamicData(GvDynamicData data, GvRun r) {
    C4dApiPINVOKE.GvClearDynamicData__SWIG_0(GvDynamicData.getCPtr(data), GvRun.getCPtr(r));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void GvClearDynamicData(GvDynamicData data) {
    C4dApiPINVOKE.GvClearDynamicData__SWIG_1(GvDynamicData.getCPtr(data));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool GvAllocDynamicDataClear(GvNode bn, GvDynamicData data, GvCalc c, int id) {
    bool ret = C4dApiPINVOKE.GvAllocDynamicDataClear(GvNode.getCPtr(bn), GvDynamicData.getCPtr(data), GvCalc.getCPtr(c), id);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GvAllocDynamicData(GvNode bn, GvDynamicData data, GvDataInfo info) {
    bool ret = C4dApiPINVOKE.GvAllocDynamicData__SWIG_1(GvNode.getCPtr(bn), GvDynamicData.getCPtr(data), GvDataInfo.getCPtr(info));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GvSetDataInContainer(SWIGTYPE_p_void data, int value_id, BaseContainer bc, int container_id, int cpu_id) {
    bool ret = C4dApiPINVOKE.GvSetDataInContainer__SWIG_0(SWIGTYPE_p_void.getCPtr(data), value_id, BaseContainer.getCPtr(bc), container_id, cpu_id);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool GvSetDataInContainer(SWIGTYPE_p_void data, int value_id, BaseContainer bc, int container_id) {
    bool ret = C4dApiPINVOKE.GvSetDataInContainer__SWIG_1(SWIGTYPE_p_void.getCPtr(data), value_id, BaseContainer.getCPtr(bc), container_id);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static GvNode GetNode(GeListNode bn) {
    IntPtr cPtr = C4dApiPINVOKE.GetNode(GeListNode.getCPtr(bn));
    GvNode ret = (cPtr == IntPtr.Zero) ? null : new GvNode(cPtr, false);
    return ret;
  }

  public static bool GvRegisterOperatorPlugin(int id, string /* constString&_cstype */ str, int info, NodeDataAllocator /* DataAllocator*_cstype */ at, string /* constString&_cstype */ description, int disklevel, int op_class, int op_group, int op_owner, BaseBitmap icon) {
    bool ret = C4dApiPINVOKE.GvRegisterOperatorPlugin(id, str, info, at /* DataAllocator*_csin */, description, disklevel, op_class, op_group, op_owner, BaseBitmap.getCPtr(icon));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool RegisterCustomDataTypePlugin(string /* constString&_cstype */ str, int info, CustomDataTypeClass dat, int disclevel) {
    bool ret = C4dApiPINVOKE.RegisterCustomDataTypePlugin(str, info, CustomDataTypeClass.getCPtr(dat), disclevel);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool RegisterResourceDataTypePlugin(string /* constString&_cstype */ str, int info, ResourceDataTypeClass dat, int disclevel) {
    bool ret = C4dApiPINVOKE.RegisterResourceDataTypePlugin(str, info, ResourceDataTypeClass.getCPtr(dat), disclevel);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void FreeInclusionTable(SWIGTYPE_p_p_InclusionTable pTable) {
    C4dApiPINVOKE.FreeInclusionTable(SWIGTYPE_p_p_InclusionTable.getCPtr(pTable));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void MessageDialog(string /* constString&_cstype */ str) {
    C4dApiPINVOKE.MessageDialog(str);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public static BaseContainer GetCustomDataTypeDefault(int type) {
    BaseContainer ret = new BaseContainer(C4dApiPINVOKE.GetCustomDataTypeDefault(type), true);
    return ret;
  }

  public static readonly char MACTYPE_CINEMA = C4dApiPINVOKE.MACTYPE_CINEMA_get();
  public static readonly char MACCREATOR_CINEMA = C4dApiPINVOKE.MACCREATOR_CINEMA_get();
  public static readonly int MAX_IMAGE_RESOLUTION = C4dApiPINVOKE.MAX_IMAGE_RESOLUTION_get();
  public static readonly int FILTER_TIF = C4dApiPINVOKE.FILTER_TIF_get();
  public static readonly int FILTER_TGA = C4dApiPINVOKE.FILTER_TGA_get();
  public static readonly int FILTER_BMP = C4dApiPINVOKE.FILTER_BMP_get();
  public static readonly int FILTER_IFF = C4dApiPINVOKE.FILTER_IFF_get();
  public static readonly int FILTER_JPG = C4dApiPINVOKE.FILTER_JPG_get();
  public static readonly int FILTER_PICT = C4dApiPINVOKE.FILTER_PICT_get();
  public static readonly int FILTER_PSD = C4dApiPINVOKE.FILTER_PSD_get();
  public static readonly int FILTER_RLA = C4dApiPINVOKE.FILTER_RLA_get();
  public static readonly int FILTER_RPF = C4dApiPINVOKE.FILTER_RPF_get();
  public static readonly int FILTER_B3D = C4dApiPINVOKE.FILTER_B3D_get();
  public static readonly int FILTER_TIF_B3D = C4dApiPINVOKE.FILTER_TIF_B3D_get();
  public static readonly int FILTER_PSB = C4dApiPINVOKE.FILTER_PSB_get();
  public static readonly int FILTER_AVI = C4dApiPINVOKE.FILTER_AVI_get();
  public static readonly int FILTER_MOVIE = C4dApiPINVOKE.FILTER_MOVIE_get();
  public static readonly int FILTER_QTVRSAVER_PANORAMA = C4dApiPINVOKE.FILTER_QTVRSAVER_PANORAMA_get();
  public static readonly int FILTER_QTVRSAVER_OBJECT = C4dApiPINVOKE.FILTER_QTVRSAVER_OBJECT_get();
  public static readonly int FILTER_HDR = C4dApiPINVOKE.FILTER_HDR_get();
  public static readonly int FILTER_PNG = C4dApiPINVOKE.FILTER_PNG_get();
  public static readonly int FILTER_IES = C4dApiPINVOKE.FILTER_IES_get();
  public static readonly int AVISAVER_FCCTYPE = C4dApiPINVOKE.AVISAVER_FCCTYPE_get();
  public static readonly int AVISAVER_FCCHANDLER = C4dApiPINVOKE.AVISAVER_FCCHANDLER_get();
  public static readonly int AVISAVER_LKEY = C4dApiPINVOKE.AVISAVER_LKEY_get();
  public static readonly int AVISAVER_LDATARATE = C4dApiPINVOKE.AVISAVER_LDATARATE_get();
  public static readonly int AVISAVER_LQ = C4dApiPINVOKE.AVISAVER_LQ_get();
  public static readonly int QTSAVER_COMPRESSOR = C4dApiPINVOKE.QTSAVER_COMPRESSOR_get();
  public static readonly int QTSAVER_QUALITY = C4dApiPINVOKE.QTSAVER_QUALITY_get();
  public static readonly int QTSAVER_TEMPQUAL = C4dApiPINVOKE.QTSAVER_TEMPQUAL_get();
  public static readonly int QTSAVER_FRAMERATE = C4dApiPINVOKE.QTSAVER_FRAMERATE_get();
  public static readonly int QTSAVER_KEYFRAMES = C4dApiPINVOKE.QTSAVER_KEYFRAMES_get();
  public static readonly int QTSAVER_PLANES = C4dApiPINVOKE.QTSAVER_PLANES_get();
  public static readonly int QTSAVER_DATARATE = C4dApiPINVOKE.QTSAVER_DATARATE_get();
  public static readonly int QTSAVER_FRAMEDURATION = C4dApiPINVOKE.QTSAVER_FRAMEDURATION_get();
  public static readonly int QTSAVER_MINQUALITY = C4dApiPINVOKE.QTSAVER_MINQUALITY_get();
  public static readonly int QTSAVER_MINTEMPQUAL = C4dApiPINVOKE.QTSAVER_MINTEMPQUAL_get();
  public static readonly int QTSAVER_FIXEDFRAMERATE = C4dApiPINVOKE.QTSAVER_FIXEDFRAMERATE_get();
  public static readonly int JPGSAVER_QUALITY = C4dApiPINVOKE.JPGSAVER_QUALITY_get();
  public static readonly int IMAGESAVER_DPI = C4dApiPINVOKE.IMAGESAVER_DPI_get();
  public static readonly int PNG_INTERLACED = C4dApiPINVOKE.PNG_INTERLACED_get();
  public static readonly int RLA_OPTIONS = C4dApiPINVOKE.RLA_OPTIONS_get();
  public static readonly int BITDEPTH_SHIFT = C4dApiPINVOKE.BITDEPTH_SHIFT_get();
  public static readonly int BITDEPTH_MAXMODES = C4dApiPINVOKE.BITDEPTH_MAXMODES_get();
  public static readonly int BITDEPTH_UCHAR = C4dApiPINVOKE.BITDEPTH_UCHAR_get();
  public static readonly int BITDEPTH_UWORD = C4dApiPINVOKE.BITDEPTH_UWORD_get();
  public static readonly int BITDEPTH_FLOAT = C4dApiPINVOKE.BITDEPTH_FLOAT_get();
  public static readonly int BIT_ACTIVE = C4dApiPINVOKE.BIT_ACTIVE_get();
  public static readonly int BIT_ACTIVE2 = C4dApiPINVOKE.BIT_ACTIVE2_get();
  public static readonly int BIT_MATMARK = C4dApiPINVOKE.BIT_MATMARK_get();
  public static readonly int BIT_ENABLEPAINT = C4dApiPINVOKE.BIT_ENABLEPAINT_get();
  public static readonly int BIT_RECALCPREVIEW = C4dApiPINVOKE.BIT_RECALCPREVIEW_get();
  public static readonly int BIT_MFOLD = C4dApiPINVOKE.BIT_MFOLD_get();
  public static readonly int BIT_BP_FOLDLAYERS = C4dApiPINVOKE.BIT_BP_FOLDLAYERS_get();
  public static readonly int BIT_IGNOREDRAW = C4dApiPINVOKE.BIT_IGNOREDRAW_get();
  public static readonly int BIT_OFOLD = C4dApiPINVOKE.BIT_OFOLD_get();
  public static readonly int BIT_CONTROLOBJECT = C4dApiPINVOKE.BIT_CONTROLOBJECT_get();
  public static readonly int BIT_RECMARK = C4dApiPINVOKE.BIT_RECMARK_get();
  public static readonly int BIT_IGNOREDRAWBOX = C4dApiPINVOKE.BIT_IGNOREDRAWBOX_get();
  public static readonly int BIT_EDITOBJECT = C4dApiPINVOKE.BIT_EDITOBJECT_get();
  public static readonly int BIT_ACTIVESELECTIONDRAW = C4dApiPINVOKE.BIT_ACTIVESELECTIONDRAW_get();
  public static readonly int BIT_TEMPDRAW_VISIBLE_CACHECHILD = C4dApiPINVOKE.BIT_TEMPDRAW_VISIBLE_CACHECHILD_get();
  public static readonly int BIT_TEMPDRAW_VISIBLE_DEFCACHECHILD = C4dApiPINVOKE.BIT_TEMPDRAW_VISIBLE_DEFCACHECHILD_get();
  public static readonly int BIT_TEMPDRAW_VISIBLE_CHILD = C4dApiPINVOKE.BIT_TEMPDRAW_VISIBLE_CHILD_get();
  public static readonly int BIT_TRACKPROCESSED = C4dApiPINVOKE.BIT_TRACKPROCESSED_get();
  public static readonly int BIT_ANIM_OFF = C4dApiPINVOKE.BIT_ANIM_OFF_get();
  public static readonly int BIT_ANIM_SOLO = C4dApiPINVOKE.BIT_ANIM_SOLO_get();
  public static readonly int BIT_ANIM_CONSTANTVELOCITY = C4dApiPINVOKE.BIT_ANIM_CONSTANTVELOCITY_get();
  public static readonly int BIT_VPDISABLED = C4dApiPINVOKE.BIT_VPDISABLED_get();
  public static readonly int BIT_DOCUMENT_CHECKREWIND = C4dApiPINVOKE.BIT_DOCUMENT_CHECKREWIND_get();
  public static readonly int BIT_ACTIVERENDERDATA = C4dApiPINVOKE.BIT_ACTIVERENDERDATA_get();
  public static readonly int OBJECT_MODIFIER = C4dApiPINVOKE.OBJECT_MODIFIER_get();
  public static readonly int OBJECT_HIERARCHYMODIFIER = C4dApiPINVOKE.OBJECT_HIERARCHYMODIFIER_get();
  public static readonly int OBJECT_GENERATOR = C4dApiPINVOKE.OBJECT_GENERATOR_get();
  public static readonly int OBJECT_INPUT = C4dApiPINVOKE.OBJECT_INPUT_get();
  public static readonly int OBJECT_PARTICLEMODIFIER = C4dApiPINVOKE.OBJECT_PARTICLEMODIFIER_get();
  public static readonly int OBJECT_NOCACHESUB = C4dApiPINVOKE.OBJECT_NOCACHESUB_get();
  public static readonly int OBJECT_ISSPLINE = C4dApiPINVOKE.OBJECT_ISSPLINE_get();
  public static readonly int OBJECT_UNIQUEENUMERATION = C4dApiPINVOKE.OBJECT_UNIQUEENUMERATION_get();
  public static readonly int OBJECT_CAMERADEPENDENT = C4dApiPINVOKE.OBJECT_CAMERADEPENDENT_get();
  public static readonly int OBJECT_USECACHECOLOR = C4dApiPINVOKE.OBJECT_USECACHECOLOR_get();
  public static readonly int OBJECT_POINTOBJECT = C4dApiPINVOKE.OBJECT_POINTOBJECT_get();
  public static readonly int OBJECT_POLYGONOBJECT = C4dApiPINVOKE.OBJECT_POLYGONOBJECT_get();
  public static readonly int OBJECT_NO_PLA = C4dApiPINVOKE.OBJECT_NO_PLA_get();
  public static readonly int OBJECT_DONTFREECACHE = C4dApiPINVOKE.OBJECT_DONTFREECACHE_get();
  public static readonly int OBJECT_CALL_ADDEXECUTION = C4dApiPINVOKE.OBJECT_CALL_ADDEXECUTION_get();
  public static readonly int Tbaselist2d = C4dApiPINVOKE.Tbaselist2d_get();
  public static readonly int Tbasedocument = C4dApiPINVOKE.Tbasedocument_get();
  public static readonly int Tpluginlayer = C4dApiPINVOKE.Tpluginlayer_get();
  public static readonly int Tundoablelist = C4dApiPINVOKE.Tundoablelist_get();
  public static readonly int Tgelistnode = C4dApiPINVOKE.Tgelistnode_get();
  public static readonly int Mbase = C4dApiPINVOKE.Mbase_get();
  public static readonly int Mmaterial = C4dApiPINVOKE.Mmaterial_get();
  public static readonly int Mplugin = C4dApiPINVOKE.Mplugin_get();
  public static readonly int Mfog = C4dApiPINVOKE.Mfog_get();
  public static readonly int Mterrain = C4dApiPINVOKE.Mterrain_get();
  public static readonly int Mdanel = C4dApiPINVOKE.Mdanel_get();
  public static readonly int Mbanji = C4dApiPINVOKE.Mbanji_get();
  public static readonly int Mbanzi = C4dApiPINVOKE.Mbanzi_get();
  public static readonly int Mcheen = C4dApiPINVOKE.Mcheen_get();
  public static readonly int Mmabel = C4dApiPINVOKE.Mmabel_get();
  public static readonly int Mnukei = C4dApiPINVOKE.Mnukei_get();
  public static readonly int MCgFX = C4dApiPINVOKE.MCgFX_get();
  public static readonly int VPbase = C4dApiPINVOKE.VPbase_get();
  public static readonly int Opolygon = C4dApiPINVOKE.Opolygon_get();
  public static readonly int Ospline = C4dApiPINVOKE.Ospline_get();
  public static readonly int Olight = C4dApiPINVOKE.Olight_get();
  public static readonly int Ocamera = C4dApiPINVOKE.Ocamera_get();
  public static readonly int Ofloor = C4dApiPINVOKE.Ofloor_get();
  public static readonly int Osky = C4dApiPINVOKE.Osky_get();
  public static readonly int Oenvironment = C4dApiPINVOKE.Oenvironment_get();
  public static readonly int Oloft = C4dApiPINVOKE.Oloft_get();
  public static readonly int Offd = C4dApiPINVOKE.Offd_get();
  public static readonly int Oparticle = C4dApiPINVOKE.Oparticle_get();
  public static readonly int Odeflector = C4dApiPINVOKE.Odeflector_get();
  public static readonly int Ogravitation = C4dApiPINVOKE.Ogravitation_get();
  public static readonly int Orotation = C4dApiPINVOKE.Orotation_get();
  public static readonly int Owind = C4dApiPINVOKE.Owind_get();
  public static readonly int Ofriction = C4dApiPINVOKE.Ofriction_get();
  public static readonly int Oturbulence = C4dApiPINVOKE.Oturbulence_get();
  public static readonly int Oextrude = C4dApiPINVOKE.Oextrude_get();
  public static readonly int Olathe = C4dApiPINVOKE.Olathe_get();
  public static readonly int Osweep = C4dApiPINVOKE.Osweep_get();
  public static readonly int Oattractor = C4dApiPINVOKE.Oattractor_get();
  public static readonly int Obezier = C4dApiPINVOKE.Obezier_get();
  public static readonly int Oforeground = C4dApiPINVOKE.Oforeground_get();
  public static readonly int Obackground = C4dApiPINVOKE.Obackground_get();
  public static readonly int Obone_EX = C4dApiPINVOKE.Obone_EX_get();
  public static readonly int Odestructor = C4dApiPINVOKE.Odestructor_get();
  public static readonly int Ometaball = C4dApiPINVOKE.Ometaball_get();
  public static readonly int Oinstance = C4dApiPINVOKE.Oinstance_get();
  public static readonly int Obend = C4dApiPINVOKE.Obend_get();
  public static readonly int Obulge = C4dApiPINVOKE.Obulge_get();
  public static readonly int Oshear = C4dApiPINVOKE.Oshear_get();
  public static readonly int Otaper = C4dApiPINVOKE.Otaper_get();
  public static readonly int Otwist = C4dApiPINVOKE.Otwist_get();
  public static readonly int Owave = C4dApiPINVOKE.Owave_get();
  public static readonly int Ostage = C4dApiPINVOKE.Ostage_get();
  public static readonly int Oline = C4dApiPINVOKE.Oline_get();
  public static readonly int Omicrophone = C4dApiPINVOKE.Omicrophone_get();
  public static readonly int Oloudspeaker = C4dApiPINVOKE.Oloudspeaker_get();
  public static readonly int Onull = C4dApiPINVOKE.Onull_get();
  public static readonly int Osymmetry = C4dApiPINVOKE.Osymmetry_get();
  public static readonly int Owrap = C4dApiPINVOKE.Owrap_get();
  public static readonly int Oboole = C4dApiPINVOKE.Oboole_get();
  public static readonly int Oexplosion = C4dApiPINVOKE.Oexplosion_get();
  public static readonly int Oformula = C4dApiPINVOKE.Oformula_get();
  public static readonly int Omelt = C4dApiPINVOKE.Omelt_get();
  public static readonly int Oshatter = C4dApiPINVOKE.Oshatter_get();
  public static readonly int Owinddeform = C4dApiPINVOKE.Owinddeform_get();
  public static readonly int Oarray = C4dApiPINVOKE.Oarray_get();
  public static readonly int Oheadphone = C4dApiPINVOKE.Oheadphone_get();
  public static readonly int Oconplane = C4dApiPINVOKE.Oconplane_get();
  public static readonly int Oplugin = C4dApiPINVOKE.Oplugin_get();
  public static readonly int Obase = C4dApiPINVOKE.Obase_get();
  public static readonly int Opoint = C4dApiPINVOKE.Opoint_get();
  public static readonly int Obasedeform = C4dApiPINVOKE.Obasedeform_get();
  public static readonly int Oparticlemodifier = C4dApiPINVOKE.Oparticlemodifier_get();
  public static readonly int Opolyreduction = C4dApiPINVOKE.Opolyreduction_get();
  public static readonly int Oshowdisplacement = C4dApiPINVOKE.Oshowdisplacement_get();
  public static readonly int Ojoint = C4dApiPINVOKE.Ojoint_get();
  public static readonly int Oskin = C4dApiPINVOKE.Oskin_get();
  public static readonly int Oweighteffector = C4dApiPINVOKE.Oweighteffector_get();
  public static readonly int Ocharacter = C4dApiPINVOKE.Ocharacter_get();
  public static readonly int Ocube = C4dApiPINVOKE.Ocube_get();
  public static readonly int Osphere = C4dApiPINVOKE.Osphere_get();
  public static readonly int Oplatonic = C4dApiPINVOKE.Oplatonic_get();
  public static readonly int Ocone = C4dApiPINVOKE.Ocone_get();
  public static readonly int Otorus = C4dApiPINVOKE.Otorus_get();
  public static readonly int Odisc = C4dApiPINVOKE.Odisc_get();
  public static readonly int Otube = C4dApiPINVOKE.Otube_get();
  public static readonly int Ofigure = C4dApiPINVOKE.Ofigure_get();
  public static readonly int Opyramid = C4dApiPINVOKE.Opyramid_get();
  public static readonly int Oplane = C4dApiPINVOKE.Oplane_get();
  public static readonly int Ofractal = C4dApiPINVOKE.Ofractal_get();
  public static readonly int Ocylinder = C4dApiPINVOKE.Ocylinder_get();
  public static readonly int Ocapsule = C4dApiPINVOKE.Ocapsule_get();
  public static readonly int Ooiltank = C4dApiPINVOKE.Ooiltank_get();
  public static readonly int Orelief = C4dApiPINVOKE.Orelief_get();
  public static readonly int Osinglepoly = C4dApiPINVOKE.Osinglepoly_get();
  public static readonly int Opluginpolygon = C4dApiPINVOKE.Opluginpolygon_get();
  public static readonly int Osplineprimitive = C4dApiPINVOKE.Osplineprimitive_get();
  public static readonly int Osplineprofile = C4dApiPINVOKE.Osplineprofile_get();
  public static readonly int Osplineflower = C4dApiPINVOKE.Osplineflower_get();
  public static readonly int Osplineformula = C4dApiPINVOKE.Osplineformula_get();
  public static readonly int Osplinetext = C4dApiPINVOKE.Osplinetext_get();
  public static readonly int Osplinenside = C4dApiPINVOKE.Osplinenside_get();
  public static readonly int Ospline4side = C4dApiPINVOKE.Ospline4side_get();
  public static readonly int Osplinecircle = C4dApiPINVOKE.Osplinecircle_get();
  public static readonly int Osplinearc = C4dApiPINVOKE.Osplinearc_get();
  public static readonly int Osplinecissoid = C4dApiPINVOKE.Osplinecissoid_get();
  public static readonly int Osplinecycloid = C4dApiPINVOKE.Osplinecycloid_get();
  public static readonly int Osplinehelix = C4dApiPINVOKE.Osplinehelix_get();
  public static readonly int Osplinerectangle = C4dApiPINVOKE.Osplinerectangle_get();
  public static readonly int Osplinestar = C4dApiPINVOKE.Osplinestar_get();
  public static readonly int Osplinecogwheel = C4dApiPINVOKE.Osplinecogwheel_get();
  public static readonly int Osplinecontour = C4dApiPINVOKE.Osplinecontour_get();
  public static readonly int Oselection = C4dApiPINVOKE.Oselection_get();
  public static readonly int Osds = C4dApiPINVOKE.Osds_get();
  public static readonly int Osplinedeformer = C4dApiPINVOKE.Osplinedeformer_get();
  public static readonly int Osplinerail = C4dApiPINVOKE.Osplinerail_get();
  public static readonly int Oatomarray = C4dApiPINVOKE.Oatomarray_get();
  public static readonly int Ospherify = C4dApiPINVOKE.Ospherify_get();
  public static readonly int Oexplosionfx = C4dApiPINVOKE.Oexplosionfx_get();
  public static readonly int Yplugin = C4dApiPINVOKE.Yplugin_get();
  public static readonly int Zplugin = C4dApiPINVOKE.Zplugin_get();
  public static readonly int Olayer = C4dApiPINVOKE.Olayer_get();
  public static readonly int Fbase = C4dApiPINVOKE.Fbase_get();
  public static readonly int Zmultipass = C4dApiPINVOKE.Zmultipass_get();
  public static readonly int SHplugin = C4dApiPINVOKE.SHplugin_get();
  public static readonly int VPplugin = C4dApiPINVOKE.VPplugin_get();
  public static readonly int ID_LISTHEAD = C4dApiPINVOKE.ID_LISTHEAD_get();
  public static readonly int Rbase = C4dApiPINVOKE.Rbase_get();
  public static readonly int Xbase = C4dApiPINVOKE.Xbase_get();
  public static readonly int Xcolor = C4dApiPINVOKE.Xcolor_get();
  public static readonly int Xbitmap = C4dApiPINVOKE.Xbitmap_get();
  public static readonly int Xbrick = C4dApiPINVOKE.Xbrick_get();
  public static readonly int Xcheckerboard = C4dApiPINVOKE.Xcheckerboard_get();
  public static readonly int Xcloud = C4dApiPINVOKE.Xcloud_get();
  public static readonly int Xcolorstripes = C4dApiPINVOKE.Xcolorstripes_get();
  public static readonly int Xcyclone = C4dApiPINVOKE.Xcyclone_get();
  public static readonly int Xearth = C4dApiPINVOKE.Xearth_get();
  public static readonly int Xfire = C4dApiPINVOKE.Xfire_get();
  public static readonly int Xflame = C4dApiPINVOKE.Xflame_get();
  public static readonly int Xgalaxy = C4dApiPINVOKE.Xgalaxy_get();
  public static readonly int Xmetal = C4dApiPINVOKE.Xmetal_get();
  public static readonly int Xsimplenoise = C4dApiPINVOKE.Xsimplenoise_get();
  public static readonly int Xrust = C4dApiPINVOKE.Xrust_get();
  public static readonly int Xstar = C4dApiPINVOKE.Xstar_get();
  public static readonly int Xstarfield = C4dApiPINVOKE.Xstarfield_get();
  public static readonly int Xsunburst = C4dApiPINVOKE.Xsunburst_get();
  public static readonly int Xsimpleturbulence = C4dApiPINVOKE.Xsimpleturbulence_get();
  public static readonly int Xvenus = C4dApiPINVOKE.Xvenus_get();
  public static readonly int Xwater = C4dApiPINVOKE.Xwater_get();
  public static readonly int Xwood = C4dApiPINVOKE.Xwood_get();
  public static readonly int Xplanet = C4dApiPINVOKE.Xplanet_get();
  public static readonly int Xmarble = C4dApiPINVOKE.Xmarble_get();
  public static readonly int Xspectral = C4dApiPINVOKE.Xspectral_get();
  public static readonly int Xgradient = C4dApiPINVOKE.Xgradient_get();
  public static readonly int Xfalloff = C4dApiPINVOKE.Xfalloff_get();
  public static readonly int Xtiles = C4dApiPINVOKE.Xtiles_get();
  public static readonly int Xfresnel = C4dApiPINVOKE.Xfresnel_get();
  public static readonly int Xlumas = C4dApiPINVOKE.Xlumas_get();
  public static readonly int Xproximal = C4dApiPINVOKE.Xproximal_get();
  public static readonly int Xnormaldirection = C4dApiPINVOKE.Xnormaldirection_get();
  public static readonly int Xtranslucency = C4dApiPINVOKE.Xtranslucency_get();
  public static readonly int Xfusion = C4dApiPINVOKE.Xfusion_get();
  public static readonly int Xposterizer = C4dApiPINVOKE.Xposterizer_get();
  public static readonly int Xcolorizer = C4dApiPINVOKE.Xcolorizer_get();
  public static readonly int Xdistorter = C4dApiPINVOKE.Xdistorter_get();
  public static readonly int Xprojector = C4dApiPINVOKE.Xprojector_get();
  public static readonly int Xnoise = C4dApiPINVOKE.Xnoise_get();
  public static readonly int Xlayer = C4dApiPINVOKE.Xlayer_get();
  public static readonly int Xspline = C4dApiPINVOKE.Xspline_get();
  public static readonly int Xfilter = C4dApiPINVOKE.Xfilter_get();
  public static readonly int Xripple = C4dApiPINVOKE.Xripple_get();
  public static readonly int Xvertexmap = C4dApiPINVOKE.Xvertexmap_get();
  public static readonly int Xsss = C4dApiPINVOKE.Xsss_get();
  public static readonly int Xambientocclusion = C4dApiPINVOKE.Xambientocclusion_get();
  public static readonly int Xchanlum = C4dApiPINVOKE.Xchanlum_get();
  public static readonly int Xmosaic = C4dApiPINVOKE.Xmosaic_get();
  public static readonly int Tpoint = C4dApiPINVOKE.Tpoint_get();
  public static readonly int Tanchor_EX = C4dApiPINVOKE.Tanchor_EX_get();
  public static readonly int Tphong = C4dApiPINVOKE.Tphong_get();
  public static readonly int Tdisplay = C4dApiPINVOKE.Tdisplay_get();
  public static readonly int Tkinematic_EX = C4dApiPINVOKE.Tkinematic_EX_get();
  public static readonly int Ttexture = C4dApiPINVOKE.Ttexture_get();
  public static readonly int Ttangent = C4dApiPINVOKE.Ttangent_get();
  public static readonly int Tprotection = C4dApiPINVOKE.Tprotection_get();
  public static readonly int Tparticle = C4dApiPINVOKE.Tparticle_get();
  public static readonly int Tmotionblur = C4dApiPINVOKE.Tmotionblur_get();
  public static readonly int Tcompositing = C4dApiPINVOKE.Tcompositing_get();
  public static readonly int Twww = C4dApiPINVOKE.Twww_get();
  public static readonly int Tsavetemp = C4dApiPINVOKE.Tsavetemp_get();
  public static readonly int Tpolygon = C4dApiPINVOKE.Tpolygon_get();
  public static readonly int Tuvw = C4dApiPINVOKE.Tuvw_get();
  public static readonly int Tsegment = C4dApiPINVOKE.Tsegment_get();
  public static readonly int Tpolygonselection = C4dApiPINVOKE.Tpolygonselection_get();
  public static readonly int Tpointselection = C4dApiPINVOKE.Tpointselection_get();
  public static readonly int Tcoffeeexpression = C4dApiPINVOKE.Tcoffeeexpression_get();
  public static readonly int Ttargetexpression = C4dApiPINVOKE.Ttargetexpression_get();
  public static readonly int Tfixexpression_EX = C4dApiPINVOKE.Tfixexpression_EX_get();
  public static readonly int Tsunexpression = C4dApiPINVOKE.Tsunexpression_get();
  public static readonly int Tikexpression_EX = C4dApiPINVOKE.Tikexpression_EX_get();
  public static readonly int Tline = C4dApiPINVOKE.Tline_get();
  public static readonly int Tvertexmap = C4dApiPINVOKE.Tvertexmap_get();
  public static readonly int Trestriction = C4dApiPINVOKE.Trestriction_get();
  public static readonly int Tmetaball = C4dApiPINVOKE.Tmetaball_get();
  public static readonly int Tbakeparticle = C4dApiPINVOKE.Tbakeparticle_get();
  public static readonly int Tmorph = C4dApiPINVOKE.Tmorph_get();
  public static readonly int Tsticktexture = C4dApiPINVOKE.Tsticktexture_get();
  public static readonly int Tplugin = C4dApiPINVOKE.Tplugin_get();
  public static readonly int Tstop = C4dApiPINVOKE.Tstop_get();
  public static readonly int Tbase = C4dApiPINVOKE.Tbase_get();
  public static readonly int Tvariable = C4dApiPINVOKE.Tvariable_get();
  public static readonly int Tvibrate = C4dApiPINVOKE.Tvibrate_get();
  public static readonly int Taligntospline = C4dApiPINVOKE.Taligntospline_get();
  public static readonly int Taligntopath = C4dApiPINVOKE.Taligntopath_get();
  public static readonly int Tedgeselection = C4dApiPINVOKE.Tedgeselection_get();
  public static readonly int Tclaudebonet_EX = C4dApiPINVOKE.Tclaudebonet_EX_get();
  public static readonly int Tnormal = C4dApiPINVOKE.Tnormal_get();
  public static readonly int Tcorner = C4dApiPINVOKE.Tcorner_get();
  public static readonly int Tsds = C4dApiPINVOKE.Tsds_get();
  public static readonly int Tlookatcamera = C4dApiPINVOKE.Tlookatcamera_get();
  public static readonly int Texpresso = C4dApiPINVOKE.Texpresso_get();
  public static readonly int Tsoftselection = C4dApiPINVOKE.Tsoftselection_get();
  public static readonly int Tbaketexture = C4dApiPINVOKE.Tbaketexture_get();
  public static readonly int Tsdsdata = C4dApiPINVOKE.Tsdsdata_get();
  public static readonly int Tweights = C4dApiPINVOKE.Tweights_get();
  public static readonly int Tposemorph = C4dApiPINVOKE.Tposemorph_get();
  public static readonly int NLAbase = C4dApiPINVOKE.NLAbase_get();
  public static readonly int CTbase = C4dApiPINVOKE.CTbase_get();
  public static readonly int CSbase = C4dApiPINVOKE.CSbase_get();
  public static readonly int CKbase = C4dApiPINVOKE.CKbase_get();
  public static readonly int CTpla = C4dApiPINVOKE.CTpla_get();
  public static readonly int CTsound = C4dApiPINVOKE.CTsound_get();
  public static readonly int CTmorph = C4dApiPINVOKE.CTmorph_get();
  public static readonly int CTtime = C4dApiPINVOKE.CTtime_get();
  public static readonly int GVbase = C4dApiPINVOKE.GVbase_get();
  public static readonly int ID_BS_HOOK = C4dApiPINVOKE.ID_BS_HOOK_get();
  public static readonly int MCOMMAND_SPLINE_HARDINTERPOLATION = C4dApiPINVOKE.MCOMMAND_SPLINE_HARDINTERPOLATION_get();
  public static readonly int MCOMMAND_SPLINE_SOFTINTERPOLATION = C4dApiPINVOKE.MCOMMAND_SPLINE_SOFTINTERPOLATION_get();
  public static readonly int MCOMMAND_SPLINE_REORDER = C4dApiPINVOKE.MCOMMAND_SPLINE_REORDER_get();
  public static readonly int MCOMMAND_SPLINE_REVERSE = C4dApiPINVOKE.MCOMMAND_SPLINE_REVERSE_get();
  public static readonly int MCOMMAND_SPLINE_MOVEDOWN = C4dApiPINVOKE.MCOMMAND_SPLINE_MOVEDOWN_get();
  public static readonly int MCOMMAND_SPLINE_MOVEUP = C4dApiPINVOKE.MCOMMAND_SPLINE_MOVEUP_get();
  public static readonly int MCOMMAND_SPLINE_JOINSEGMENT = C4dApiPINVOKE.MCOMMAND_SPLINE_JOINSEGMENT_get();
  public static readonly int MCOMMAND_SPLINE_BREAKSEGMENT = C4dApiPINVOKE.MCOMMAND_SPLINE_BREAKSEGMENT_get();
  public static readonly int MCOMMAND_SPLINE_EQUALLENGTH = C4dApiPINVOKE.MCOMMAND_SPLINE_EQUALLENGTH_get();
  public static readonly int MCOMMAND_SPLINE_EQUALDIRECTION = C4dApiPINVOKE.MCOMMAND_SPLINE_EQUALDIRECTION_get();
  public static readonly int MCOMMAND_SPLINE_LINEUP = C4dApiPINVOKE.MCOMMAND_SPLINE_LINEUP_get();
  public static readonly int MCOMMAND_SPLINE_CREATEOUTLINE = C4dApiPINVOKE.MCOMMAND_SPLINE_CREATEOUTLINE_get();
  public static readonly int MCOMMAND_SPLINE_PROJECT = C4dApiPINVOKE.MCOMMAND_SPLINE_PROJECT_get();
  public static readonly int MCOMMAND_SPLINE_ADDPOINT = C4dApiPINVOKE.MCOMMAND_SPLINE_ADDPOINT_get();
  public static readonly int MCOMMAND_SELECTALL = C4dApiPINVOKE.MCOMMAND_SELECTALL_get();
  public static readonly int MCOMMAND_DESELECTALL = C4dApiPINVOKE.MCOMMAND_DESELECTALL_get();
  public static readonly int MCOMMAND_SELECTINVERSE = C4dApiPINVOKE.MCOMMAND_SELECTINVERSE_get();
  public static readonly int MCOMMAND_SELECTCONNECTED = C4dApiPINVOKE.MCOMMAND_SELECTCONNECTED_get();
  public static readonly int MCOMMAND_SELECTGROW = C4dApiPINVOKE.MCOMMAND_SELECTGROW_get();
  public static readonly int MCOMMAND_SELECTSHRINK = C4dApiPINVOKE.MCOMMAND_SELECTSHRINK_get();
  public static readonly int MCOMMAND_SELECTPOINTTOPOLY = C4dApiPINVOKE.MCOMMAND_SELECTPOINTTOPOLY_get();
  public static readonly int MCOMMAND_SELECTPOLYTOPOINT = C4dApiPINVOKE.MCOMMAND_SELECTPOLYTOPOINT_get();
  public static readonly int MCOMMAND_SELECTADJACENT = C4dApiPINVOKE.MCOMMAND_SELECTADJACENT_get();
  public static readonly int MCOMMAND_GENERATESELECTION = C4dApiPINVOKE.MCOMMAND_GENERATESELECTION_get();
  public static readonly int MCOMMAND_HIDESELECTED = C4dApiPINVOKE.MCOMMAND_HIDESELECTED_get();
  public static readonly int MCOMMAND_HIDEUNSELECTED = C4dApiPINVOKE.MCOMMAND_HIDEUNSELECTED_get();
  public static readonly int MCOMMAND_HIDEINVERT = C4dApiPINVOKE.MCOMMAND_HIDEINVERT_get();
  public static readonly int MCOMMAND_UNHIDE = C4dApiPINVOKE.MCOMMAND_UNHIDE_get();
  public static readonly int MCOMMAND_REVERSENORMALS = C4dApiPINVOKE.MCOMMAND_REVERSENORMALS_get();
  public static readonly int MCOMMAND_ALIGNNORMALS = C4dApiPINVOKE.MCOMMAND_ALIGNNORMALS_get();
  public static readonly int MCOMMAND_SPLIT = C4dApiPINVOKE.MCOMMAND_SPLIT_get();
  public static readonly int MCOMMAND_TRIANGULATE = C4dApiPINVOKE.MCOMMAND_TRIANGULATE_get();
  public static readonly int MCOMMAND_UNTRIANGULATE = C4dApiPINVOKE.MCOMMAND_UNTRIANGULATE_get();
  public static readonly int MCOMMAND_DELETE = C4dApiPINVOKE.MCOMMAND_DELETE_get();
  public static readonly int MCOMMAND_OPTIMIZE = C4dApiPINVOKE.MCOMMAND_OPTIMIZE_get();
  public static readonly int MCOMMAND_DISCONNECT = C4dApiPINVOKE.MCOMMAND_DISCONNECT_get();
  public static readonly int MCOMMAND_MAKEEDITABLE = C4dApiPINVOKE.MCOMMAND_MAKEEDITABLE_get();
  public static readonly int MCOMMAND_MIRROR = C4dApiPINVOKE.MCOMMAND_MIRROR_get();
  public static readonly int MCOMMAND_MATRIXEXTRUDE = C4dApiPINVOKE.MCOMMAND_MATRIXEXTRUDE_get();
  public static readonly int MCOMMAND_SUBDIVIDE = C4dApiPINVOKE.MCOMMAND_SUBDIVIDE_get();
  public static readonly int MCOMMAND_EXPLODESEGMENTS = C4dApiPINVOKE.MCOMMAND_EXPLODESEGMENTS_get();
  public static readonly int MCOMMAND_KNIFE = C4dApiPINVOKE.MCOMMAND_KNIFE_get();
  public static readonly int MCOMMAND_CURRENTSTATETOOBJECT = C4dApiPINVOKE.MCOMMAND_CURRENTSTATETOOBJECT_get();
  public static readonly int MCOMMAND_JOIN = C4dApiPINVOKE.MCOMMAND_JOIN_get();
  public static readonly int MCOMMAND_CONVERTSELECTION = C4dApiPINVOKE.MCOMMAND_CONVERTSELECTION_get();
  public static readonly int MCOMMAND_EDGE_TO_SPLINE = C4dApiPINVOKE.MCOMMAND_EDGE_TO_SPLINE_get();
  public static readonly int MCOMMAND_BREAKPHONG = C4dApiPINVOKE.MCOMMAND_BREAKPHONG_get();
  public static readonly int MCOMMAND_UNBREAKPHONG = C4dApiPINVOKE.MCOMMAND_UNBREAKPHONG_get();
  public static readonly int MCOMMAND_PHONGTOSELECTION = C4dApiPINVOKE.MCOMMAND_PHONGTOSELECTION_get();
  public static readonly int MCOMMAND_MELT = C4dApiPINVOKE.MCOMMAND_MELT_get();
  public static readonly int MCOMMAND_RESETSYSTEM = C4dApiPINVOKE.MCOMMAND_RESETSYSTEM_get();
  public static readonly int MDATA_SPLINE_FREEHANDTOLERANCE = C4dApiPINVOKE.MDATA_SPLINE_FREEHANDTOLERANCE_get();
  public static readonly int MDATA_SPLINE_OUTLINE = C4dApiPINVOKE.MDATA_SPLINE_OUTLINE_get();
  public static readonly int MDATA_SPLINE_PROJECTMODE = C4dApiPINVOKE.MDATA_SPLINE_PROJECTMODE_get();
  public static readonly int MDATA_SPLINE_ADDPOINTSEGMENT = C4dApiPINVOKE.MDATA_SPLINE_ADDPOINTSEGMENT_get();
  public static readonly int MDATA_SPLINE_ADDPOINTPOSITION = C4dApiPINVOKE.MDATA_SPLINE_ADDPOINTPOSITION_get();
  public static readonly int MDATA_SPLINE_ADDPOINTSELECT = C4dApiPINVOKE.MDATA_SPLINE_ADDPOINTSELECT_get();
  public static readonly int MDATA_DISCONNECT_PRESERVEGROUPS = C4dApiPINVOKE.MDATA_DISCONNECT_PRESERVEGROUPS_get();
  public static readonly int MDATA_MIRROR_SNAPPOINTS = C4dApiPINVOKE.MDATA_MIRROR_SNAPPOINTS_get();
  public static readonly int MDATA_MIRROR_DUPLICATE = C4dApiPINVOKE.MDATA_MIRROR_DUPLICATE_get();
  public static readonly int MDATA_MIRROR_WELD = C4dApiPINVOKE.MDATA_MIRROR_WELD_get();
  public static readonly int MDATA_MIRROR_TOLERANCE = C4dApiPINVOKE.MDATA_MIRROR_TOLERANCE_get();
  public static readonly int MDATA_MIRROR_SYSTEM = C4dApiPINVOKE.MDATA_MIRROR_SYSTEM_get();
  public static readonly int MDATA_MIRROR_PLANE = C4dApiPINVOKE.MDATA_MIRROR_PLANE_get();
  public static readonly int MDATA_MIRROR_VALUE = C4dApiPINVOKE.MDATA_MIRROR_VALUE_get();
  public static readonly int MDATA_MIRROR_POINT = C4dApiPINVOKE.MDATA_MIRROR_POINT_get();
  public static readonly int MDATA_MIRROR_VECTOR = C4dApiPINVOKE.MDATA_MIRROR_VECTOR_get();
  public static readonly int MDATA_OPTIMIZE_TOLERANCE = C4dApiPINVOKE.MDATA_OPTIMIZE_TOLERANCE_get();
  public static readonly int MDATA_OPTIMIZE_POINTS = C4dApiPINVOKE.MDATA_OPTIMIZE_POINTS_get();
  public static readonly int MDATA_OPTIMIZE_POLYGONS = C4dApiPINVOKE.MDATA_OPTIMIZE_POLYGONS_get();
  public static readonly int MDATA_OPTIMIZE_UNUSEDPOINTS = C4dApiPINVOKE.MDATA_OPTIMIZE_UNUSEDPOINTS_get();
  public static readonly int MDATA_SPLINE_OUTLINESEPARATE = C4dApiPINVOKE.MDATA_SPLINE_OUTLINESEPARATE_get();
  public static readonly int MDATA_CROSSSECTION_ANGLE = C4dApiPINVOKE.MDATA_CROSSSECTION_ANGLE_get();
  public static readonly int MDATA_SUBDIVIDE_HYPER = C4dApiPINVOKE.MDATA_SUBDIVIDE_HYPER_get();
  public static readonly int MDATA_SUBDIVIDE_ANGLE = C4dApiPINVOKE.MDATA_SUBDIVIDE_ANGLE_get();
  public static readonly int MDATA_SUBDIVIDE_SPLINESUB = C4dApiPINVOKE.MDATA_SUBDIVIDE_SPLINESUB_get();
  public static readonly int MDATA_SUBDIVIDE_SUB = C4dApiPINVOKE.MDATA_SUBDIVIDE_SUB_get();
  public static readonly int MDATA_KNIFE_P1 = C4dApiPINVOKE.MDATA_KNIFE_P1_get();
  public static readonly int MDATA_KNIFE_V1 = C4dApiPINVOKE.MDATA_KNIFE_V1_get();
  public static readonly int MDATA_KNIFE_P2 = C4dApiPINVOKE.MDATA_KNIFE_P2_get();
  public static readonly int MDATA_KNIFE_V2 = C4dApiPINVOKE.MDATA_KNIFE_V2_get();
  public static readonly int MDATA_KNIFE_ANGLE = C4dApiPINVOKE.MDATA_KNIFE_ANGLE_get();
  public static readonly int MDATA_MIRROR_SELECTIONS = C4dApiPINVOKE.MDATA_MIRROR_SELECTIONS_get();
  public static readonly int MDATA_UNTRIANGULATE_ANGLE = C4dApiPINVOKE.MDATA_UNTRIANGULATE_ANGLE_get();
  public static readonly int MDATA_MIRROR_ONPLANE = C4dApiPINVOKE.MDATA_MIRROR_ONPLANE_get();
  public static readonly int MDATA_CONVERTSELECTION_LEFT = C4dApiPINVOKE.MDATA_CONVERTSELECTION_LEFT_get();
  public static readonly int MDATA_CONVERTSELECTION_RIGHT = C4dApiPINVOKE.MDATA_CONVERTSELECTION_RIGHT_get();
  public static readonly int MDATA_CONVERTSELECTION_TOLERANT = C4dApiPINVOKE.MDATA_CONVERTSELECTION_TOLERANT_get();
  public static readonly int MDATA_CURRENTSTATETOOBJECT_INHERITANCE = C4dApiPINVOKE.MDATA_CURRENTSTATETOOBJECT_INHERITANCE_get();
  public static readonly int MDATA_CURRENTSTATETOOBJECT_KEEPANIMATION = C4dApiPINVOKE.MDATA_CURRENTSTATETOOBJECT_KEEPANIMATION_get();
  public static readonly int MDATA_ROTATECAMERA = C4dApiPINVOKE.MDATA_ROTATECAMERA_get();
  public static readonly int MDATA_RING_EDGE = C4dApiPINVOKE.MDATA_RING_EDGE_get();
  public static readonly int MDATA_RING_SELECTION = C4dApiPINVOKE.MDATA_RING_SELECTION_get();
  public static readonly int MDATA_RING_SKIP = C4dApiPINVOKE.MDATA_RING_SKIP_get();
  public static readonly int MDATA_FILLSEL_START_POLY = C4dApiPINVOKE.MDATA_FILLSEL_START_POLY_get();
  public static readonly int MDATA_FILLSEL_SELECTION = C4dApiPINVOKE.MDATA_FILLSEL_SELECTION_get();
  public static readonly int MDATA_OUTLINESEL_START_POLY = C4dApiPINVOKE.MDATA_OUTLINESEL_START_POLY_get();
  public static readonly int MDATA_OUTLINESEL_SELECTION = C4dApiPINVOKE.MDATA_OUTLINESEL_SELECTION_get();
  public static readonly int MDATA_UNTRIANGULATE_NGONS = C4dApiPINVOKE.MDATA_UNTRIANGULATE_NGONS_get();
  public static readonly int MDATA_UNTRIANGULATE_ANGLE_RAD = C4dApiPINVOKE.MDATA_UNTRIANGULATE_ANGLE_RAD_get();
  public static readonly int MDATA_CURRENTSTATETOOBJECT_NOGENERATE = C4dApiPINVOKE.MDATA_CURRENTSTATETOOBJECT_NOGENERATE_get();
  public static readonly int MDATA_RESETSYSTEM_COMPENSATE = C4dApiPINVOKE.MDATA_RESETSYSTEM_COMPENSATE_get();
  public static readonly int MDATA_RESETSYSTEM_RECURSIVE = C4dApiPINVOKE.MDATA_RESETSYSTEM_RECURSIVE_get();
  public static readonly int MDATA_JOIN_MERGE_SELTAGS = C4dApiPINVOKE.MDATA_JOIN_MERGE_SELTAGS_get();
  public static readonly int MDATA_SETVERTEX_VALUE = C4dApiPINVOKE.MDATA_SETVERTEX_VALUE_get();
  public static readonly int MDATA_SETVERTEX_MODE = C4dApiPINVOKE.MDATA_SETVERTEX_MODE_get();
  public static readonly int WPREF_UNITS_BASIC = C4dApiPINVOKE.WPREF_UNITS_BASIC_get();
  public static readonly int WPREF_UNITS_TIME = C4dApiPINVOKE.WPREF_UNITS_TIME_get();
  public static readonly int WPREF_UNITS_AUTOCONVERT = C4dApiPINVOKE.WPREF_UNITS_AUTOCONVERT_get();
  public static readonly int WPREF_UNITS_USEUNITS = C4dApiPINVOKE.WPREF_UNITS_USEUNITS_get();
  public static readonly int WPREF_REFRESHTIME = C4dApiPINVOKE.WPREF_REFRESHTIME_get();
  public static readonly int WPREF_RATIO = C4dApiPINVOKE.WPREF_RATIO_get();
  public static readonly int WPREF_CENTER = C4dApiPINVOKE.WPREF_CENTER_get();
  public static readonly int WPREF_TABLET = C4dApiPINVOKE.WPREF_TABLET_get();
  public static readonly int WPREF_OPENGL = C4dApiPINVOKE.WPREF_OPENGL_get();
  public static readonly int WPREF_LINK_SELECTION = C4dApiPINVOKE.WPREF_LINK_SELECTION_get();
  public static readonly int WPREF_FULLANIMREDRAW = C4dApiPINVOKE.WPREF_FULLANIMREDRAW_get();
  public static readonly int WPREF_SAVE_LAYOUT = C4dApiPINVOKE.WPREF_SAVE_LAYOUT_get();
  public static readonly int WPREF_INSERTAT = C4dApiPINVOKE.WPREF_INSERTAT_get();
  public static readonly int WPREF_PASTEAT = C4dApiPINVOKE.WPREF_PASTEAT_get();
  public static readonly int WPREF_MAX_UNDOS = C4dApiPINVOKE.WPREF_MAX_UNDOS_get();
  public static readonly int WPREF_MAX_LAST = C4dApiPINVOKE.WPREF_MAX_LAST_get();
  public static readonly int WPREF_CAMERAROTATION = C4dApiPINVOKE.WPREF_CAMERAROTATION_get();
  public static readonly int WPREF_OPENGL_PERSPECT = C4dApiPINVOKE.WPREF_OPENGL_PERSPECT_get();
  public static readonly int WPREF_OPENGL_TEXTURE_FILTERING = C4dApiPINVOKE.WPREF_OPENGL_TEXTURE_FILTERING_get();
  public static readonly int WPREF_OPENGL_TEXTURE_FILTERING_NEAREST = C4dApiPINVOKE.WPREF_OPENGL_TEXTURE_FILTERING_NEAREST_get();
  public static readonly int WPREF_OPENGL_TEXTURE_FILTERING_LINEAR = C4dApiPINVOKE.WPREF_OPENGL_TEXTURE_FILTERING_LINEAR_get();
  public static readonly int WPREF_OPENGL_TEXTURE_FILTERING_LINEAR_MIPMAP = C4dApiPINVOKE.WPREF_OPENGL_TEXTURE_FILTERING_LINEAR_MIPMAP_get();
  public static readonly int WPREF_USE_TEXTURES = C4dApiPINVOKE.WPREF_USE_TEXTURES_get();
  public static readonly int WPREF_USE_QUICKTIME = C4dApiPINVOKE.WPREF_USE_QUICKTIME_get();
  public static readonly int WPREF_TABLET_HIRES = C4dApiPINVOKE.WPREF_TABLET_HIRES_get();
  public static readonly int WPREF_REVERSE_ORBIT = C4dApiPINVOKE.WPREF_REVERSE_ORBIT_get();
  public static readonly int WPREF_OPENGL_POLYLINES = C4dApiPINVOKE.WPREF_OPENGL_POLYLINES_get();
  public static readonly int WPREF_OPENGL_LIGHTING = C4dApiPINVOKE.WPREF_OPENGL_LIGHTING_get();
  public static readonly int WPREF_OPENGL_GLPOINTS = C4dApiPINVOKE.WPREF_OPENGL_GLPOINTS_get();
  public static readonly int WPREF_OPENGL_HIGHENDSHADING = C4dApiPINVOKE.WPREF_OPENGL_HIGHENDSHADING_get();
  public static readonly int WPREF_REALTIMEMANAGER = C4dApiPINVOKE.WPREF_REALTIMEMANAGER_get();
  public static readonly int WPREF_MAX_BACKUP = C4dApiPINVOKE.WPREF_MAX_BACKUP_get();
  public static readonly int WPREF_CENTERAXIS = C4dApiPINVOKE.WPREF_CENTERAXIS_get();
  public static readonly int WPREF_OPENGL_DUALPLANES_ARB = C4dApiPINVOKE.WPREF_OPENGL_DUALPLANES_ARB_get();
  public static readonly int WPREF_MATPREVIEW_DEFAULTSIZE = C4dApiPINVOKE.WPREF_MATPREVIEW_DEFAULTSIZE_get();
  public static readonly int WPREF_DESCRIPTIONLIMIT = C4dApiPINVOKE.WPREF_DESCRIPTIONLIMIT_get();
  public static readonly int WPREF_MATPREVIEW_DEFAULTOBJECT_MAT = C4dApiPINVOKE.WPREF_MATPREVIEW_DEFAULTOBJECT_MAT_get();
  public static readonly int WPREF_MATPREVIEW_DEFAULTUSERSCENE_MAT = C4dApiPINVOKE.WPREF_MATPREVIEW_DEFAULTUSERSCENE_MAT_get();
  public static readonly int WPREF_MATPREVIEW_DEFAULTOBJECT_SHD = C4dApiPINVOKE.WPREF_MATPREVIEW_DEFAULTOBJECT_SHD_get();
  public static readonly int WPREF_MATPREVIEW_DEFAULTUSERSCENE_SHD = C4dApiPINVOKE.WPREF_MATPREVIEW_DEFAULTUSERSCENE_SHD_get();
  public static readonly int WPREF_MATPREVIEW_AUTO_UPDATE = C4dApiPINVOKE.WPREF_MATPREVIEW_AUTO_UPDATE_get();
  public static readonly int WPREF_MATPREVIEW_REDRAW_TIME = C4dApiPINVOKE.WPREF_MATPREVIEW_REDRAW_TIME_get();
  public static readonly int WPREF_MATPREVIEW_FPS = C4dApiPINVOKE.WPREF_MATPREVIEW_FPS_get();
  public static readonly int WPREF_MATPREVIEW_LENGTH = C4dApiPINVOKE.WPREF_MATPREVIEW_LENGTH_get();
  public static readonly int WPREF_MATPREVIEW_MAX_MEM = C4dApiPINVOKE.WPREF_MATPREVIEW_MAX_MEM_get();
  public static readonly int WPREF_SUBPIXELLIMIT = C4dApiPINVOKE.WPREF_SUBPIXELLIMIT_get();
  public static readonly int WPREF_OPENGL_ROTATEQUADS = C4dApiPINVOKE.WPREF_OPENGL_ROTATEQUADS_get();
  public static readonly int WPREF_OPENGL_DUALPLANES_HIGHLIGHT = C4dApiPINVOKE.WPREF_OPENGL_DUALPLANES_HIGHLIGHT_get();
  public static readonly int WPREF_ALLOWBUGREPORTS = C4dApiPINVOKE.WPREF_ALLOWBUGREPORTS_get();
  public static readonly int WPREF_OPENGL_COMPILER = C4dApiPINVOKE.WPREF_OPENGL_COMPILER_get();
  public static readonly int WPREF_OPENGL_COMPILER_GLSL = C4dApiPINVOKE.WPREF_OPENGL_COMPILER_GLSL_get();
  public static readonly int WPREF_OPENGL_COMPILER_CG = C4dApiPINVOKE.WPREF_OPENGL_COMPILER_CG_get();
  public static readonly int WPREF_OPENGL_MAX_TRANS_DEPTH = C4dApiPINVOKE.WPREF_OPENGL_MAX_TRANS_DEPTH_get();
  public static readonly int WPREF_OPENGL_MAX_LIGHTS = C4dApiPINVOKE.WPREF_OPENGL_MAX_LIGHTS_get();
  public static readonly int WPREF_OPENGL_MAX_SHADOWS = C4dApiPINVOKE.WPREF_OPENGL_MAX_SHADOWS_get();
  public static readonly int WPREF_SAVE_CACHES = C4dApiPINVOKE.WPREF_SAVE_CACHES_get();
  public static readonly int WPREF_OPENGL_ANTIALIAS = C4dApiPINVOKE.WPREF_OPENGL_ANTIALIAS_get();
  public static readonly int WPREF_OPENGL_MULTITHREADED = C4dApiPINVOKE.WPREF_OPENGL_MULTITHREADED_get();
  public static readonly int WPREF_VIEW_DISLAYCOLORPROFILE = C4dApiPINVOKE.WPREF_VIEW_DISLAYCOLORPROFILE_get();
  public static readonly int WPREF_MOVEACCELERATION = C4dApiPINVOKE.WPREF_MOVEACCELERATION_get();
  public static readonly int WPREF_SCALEACCELERATION = C4dApiPINVOKE.WPREF_SCALEACCELERATION_get();
  public static readonly int WPREF_ROTATEACCELERATION = C4dApiPINVOKE.WPREF_ROTATEACCELERATION_get();
  public static readonly int WPREF_COLOR_SYSTEM_C4D = C4dApiPINVOKE.WPREF_COLOR_SYSTEM_C4D_get();
  public static readonly int WPREF_COLOR_SYSTEM_BP = C4dApiPINVOKE.WPREF_COLOR_SYSTEM_BP_get();
  public static readonly int COLORSYSTEM_HSVTAB = C4dApiPINVOKE.COLORSYSTEM_HSVTAB_get();
  public static readonly int COLORSYSTEM_TABLE = C4dApiPINVOKE.COLORSYSTEM_TABLE_get();
  public static readonly int COLORSYSTEM_RGB_COLOR = C4dApiPINVOKE.COLORSYSTEM_RGB_COLOR_get();
  public static readonly int COLORSYSTEM_HSV_COLOR = C4dApiPINVOKE.COLORSYSTEM_HSV_COLOR_get();
  public static readonly int WPREF_COLOR_RGBRANGE = C4dApiPINVOKE.WPREF_COLOR_RGBRANGE_get();
  public static readonly int WPREF_COLOR_HRANGE = C4dApiPINVOKE.WPREF_COLOR_HRANGE_get();
  public static readonly int WPREF_COLOR_SVRANGE = C4dApiPINVOKE.WPREF_COLOR_SVRANGE_get();
  public static readonly int COLORSYSTEM_RANGE_PERCENT = C4dApiPINVOKE.COLORSYSTEM_RANGE_PERCENT_get();
  public static readonly int COLORSYSTEM_RANGE_DEGREE = C4dApiPINVOKE.COLORSYSTEM_RANGE_DEGREE_get();
  public static readonly int COLORSYSTEM_RANGE_255 = C4dApiPINVOKE.COLORSYSTEM_RANGE_255_get();
  public static readonly int COLORSYSTEM_RANGE_65535 = C4dApiPINVOKE.COLORSYSTEM_RANGE_65535_get();
  public static readonly int WPREF_COLOR_QUICK_C4D = C4dApiPINVOKE.WPREF_COLOR_QUICK_C4D_get();
  public static readonly int WPREF_COLOR_QUICK_BP = C4dApiPINVOKE.WPREF_COLOR_QUICK_BP_get();
  public static readonly int WPREF_COLOR_MIX_C4D = C4dApiPINVOKE.WPREF_COLOR_MIX_C4D_get();
  public static readonly int WPREF_COLOR_MIX_BP = C4dApiPINVOKE.WPREF_COLOR_MIX_BP_get();
  public static readonly int WPREF_COLOR_SETUPS = C4dApiPINVOKE.WPREF_COLOR_SETUPS_get();
  public static readonly int WPREF_COLOR_QUICKPRESET = C4dApiPINVOKE.WPREF_COLOR_QUICKPRESET_get();
  public static readonly int WPREF_COLOR_QUICKPRESET_LAST = C4dApiPINVOKE.WPREF_COLOR_QUICKPRESET_LAST_get();
  public static readonly int WPREF_COLOR_MIXING_1 = C4dApiPINVOKE.WPREF_COLOR_MIXING_1_get();
  public static readonly int WPREF_COLOR_MIXING_2 = C4dApiPINVOKE.WPREF_COLOR_MIXING_2_get();
  public static readonly int WPREF_COLOR_MIXING_3 = C4dApiPINVOKE.WPREF_COLOR_MIXING_3_get();
  public static readonly int WPREF_COLOR_MIXING_4 = C4dApiPINVOKE.WPREF_COLOR_MIXING_4_get();
  public static readonly int WPREF_COLOR_SYSTEM_COLORCHOOSER = C4dApiPINVOKE.WPREF_COLOR_SYSTEM_COLORCHOOSER_get();
  public static readonly int WPREF_AUTOSAVE_ENABLE = C4dApiPINVOKE.WPREF_AUTOSAVE_ENABLE_get();
  public static readonly int WPREF_AUTOSAVE_MIN = C4dApiPINVOKE.WPREF_AUTOSAVE_MIN_get();
  public static readonly int WPREF_AUTOSAVE_LIMIT_TO = C4dApiPINVOKE.WPREF_AUTOSAVE_LIMIT_TO_get();
  public static readonly int WPREF_AUTOSAVE_LIMIT_NUM = C4dApiPINVOKE.WPREF_AUTOSAVE_LIMIT_NUM_get();
  public static readonly int WPREF_AUTOSAVE_DEST = C4dApiPINVOKE.WPREF_AUTOSAVE_DEST_get();
  public static readonly int WPREF_AUTOSAVE_DEST_BACKUPDIR = C4dApiPINVOKE.WPREF_AUTOSAVE_DEST_BACKUPDIR_get();
  public static readonly int WPREF_AUTOSAVE_DEST_USERDIR = C4dApiPINVOKE.WPREF_AUTOSAVE_DEST_USERDIR_get();
  public static readonly int WPREF_AUTOSAVE_DEST_STARTUPDIR = C4dApiPINVOKE.WPREF_AUTOSAVE_DEST_STARTUPDIR_get();
  public static readonly int WPREF_AUTOSAVE_DEST_PATH = C4dApiPINVOKE.WPREF_AUTOSAVE_DEST_PATH_get();
  public static readonly int WPREF_PLUGINS = C4dApiPINVOKE.WPREF_PLUGINS_get();
  public static readonly int WPREF_CPUCOUNT = C4dApiPINVOKE.WPREF_CPUCOUNT_get();
  public static readonly int WPREF_LOGFILE = C4dApiPINVOKE.WPREF_LOGFILE_get();
  public static readonly int WPREF_CONSOLEGI = C4dApiPINVOKE.WPREF_CONSOLEGI_get();
  public static readonly int WPREF_CPUCUSTOM = C4dApiPINVOKE.WPREF_CPUCUSTOM_get();
  public static readonly int WPREF_RENDERQUEUELOG = C4dApiPINVOKE.WPREF_RENDERQUEUELOG_get();
  public static readonly int WPREF_BUBBLEHELP2 = C4dApiPINVOKE.WPREF_BUBBLEHELP2_get();
  public static readonly int WPREF_THREADPRIORITY = C4dApiPINVOKE.WPREF_THREADPRIORITY_get();
  public static readonly int WPREF_MENUICON = C4dApiPINVOKE.WPREF_MENUICON_get();
  public static readonly int WPREF_MENUSHORTCUT = C4dApiPINVOKE.WPREF_MENUSHORTCUT_get();
  public static readonly int WPREF_INACTIVEBORDER = C4dApiPINVOKE.WPREF_INACTIVEBORDER_get();
  public static readonly int WPREF_ACTIVEBORDER = C4dApiPINVOKE.WPREF_ACTIVEBORDER_get();
  public static readonly int WPREF_FONT_STANDARD = C4dApiPINVOKE.WPREF_FONT_STANDARD_get();
  public static readonly int WPREF_FONT_MONO = C4dApiPINVOKE.WPREF_FONT_MONO_get();
  public static readonly int WPREF_MAC_CTRLCLICK_EMULATES_RMB = C4dApiPINVOKE.WPREF_MAC_CTRLCLICK_EMULATES_RMB_get();
  public static readonly int WPREF_UV_RELAX_DATA = C4dApiPINVOKE.WPREF_UV_RELAX_DATA_get();
  public static readonly int WPREF_UV_OPTIMAL_MAPPING_DATA = C4dApiPINVOKE.WPREF_UV_OPTIMAL_MAPPING_DATA_get();
  public static readonly int WPREF_UV_PROJECTION_DATA = C4dApiPINVOKE.WPREF_UV_PROJECTION_DATA_get();
  public static readonly int WPREF_UV_TAB_SEL = C4dApiPINVOKE.WPREF_UV_TAB_SEL_get();
  public static readonly int WPREF_UV_TRANSFORM_DATA = C4dApiPINVOKE.WPREF_UV_TRANSFORM_DATA_get();
  public static readonly int WPREF_LINUX_BROWSERPATH = C4dApiPINVOKE.WPREF_LINUX_BROWSERPATH_get();
  public static readonly int WPREF_MOUSEOVER_SHORTCUT = C4dApiPINVOKE.WPREF_MOUSEOVER_SHORTCUT_get();
  public static readonly int WPREF_ONLINEHELP_PATH = C4dApiPINVOKE.WPREF_ONLINEHELP_PATH_get();
  public static readonly int WPREF_ONLINEHELP_URL = C4dApiPINVOKE.WPREF_ONLINEHELP_URL_get();
  public static readonly int WPREF_LINUX_IMAGEEDITPATH = C4dApiPINVOKE.WPREF_LINUX_IMAGEEDITPATH_get();
  public static readonly int WPREF_LOCKINTERFACE = C4dApiPINVOKE.WPREF_LOCKINTERFACE_get();
  public static readonly int WPREF_TOOLCURSOR_BASIC = C4dApiPINVOKE.WPREF_TOOLCURSOR_BASIC_get();
  public static readonly int WPREF_TOOLCURSOR_ADV = C4dApiPINVOKE.WPREF_TOOLCURSOR_ADV_get();
  public static readonly int WPREF_ONLINEUPDATER_AUTO_CHECK = C4dApiPINVOKE.WPREF_ONLINEUPDATER_AUTO_CHECK_get();
  public static readonly int WPREF_ONLINEUPDATER_CHECKSUM = C4dApiPINVOKE.WPREF_ONLINEUPDATER_CHECKSUM_get();
  public static readonly int WPREF_ONLINEUPDATER_SHOW_INSTALLED = C4dApiPINVOKE.WPREF_ONLINEUPDATER_SHOW_INSTALLED_get();
  public static readonly int WPREF_ONLINEUPDATER_AUTORESTART = C4dApiPINVOKE.WPREF_ONLINEUPDATER_AUTORESTART_get();
  public static readonly int WPREF_ONLINEUPDATER_BACKUP = C4dApiPINVOKE.WPREF_ONLINEUPDATER_BACKUP_get();
  public static readonly int WPREF_ONLINEUPDATER_BACKUP_PATH = C4dApiPINVOKE.WPREF_ONLINEUPDATER_BACKUP_PATH_get();
  public static readonly int WPREF_ONLINEUPDATER_PROXYSERVER = C4dApiPINVOKE.WPREF_ONLINEUPDATER_PROXYSERVER_get();
  public static readonly int WPREF_ONLINEUPDATER_PROXYPORT = C4dApiPINVOKE.WPREF_ONLINEUPDATER_PROXYPORT_get();
  public static readonly int WPREF_ONLINEUPDATER_LAST_OPEN_DAY = C4dApiPINVOKE.WPREF_ONLINEUPDATER_LAST_OPEN_DAY_get();
  public static readonly int WPREF_ONLINEUPDATER_LAST_OPEN_HOUR = C4dApiPINVOKE.WPREF_ONLINEUPDATER_LAST_OPEN_HOUR_get();
  public static readonly int WPREF_ONLINEUPDATER_REMOVE_FILES = C4dApiPINVOKE.WPREF_ONLINEUPDATER_REMOVE_FILES_get();
  public static readonly int WPREF_PV_RENDER_VIEW = C4dApiPINVOKE.WPREF_PV_RENDER_VIEW_get();
  public static readonly int PVPREFSDIALOG_ID = C4dApiPINVOKE.PVPREFSDIALOG_ID_get();
  public static readonly int WPREFS_PVMEMORY = C4dApiPINVOKE.WPREFS_PVMEMORY_get();
  public static readonly int WPREFS_PVDRAWBUCKETS = C4dApiPINVOKE.WPREFS_PVDRAWBUCKETS_get();
  public static readonly int WPREFS_PVHDMEM = C4dApiPINVOKE.WPREFS_PVHDMEM_get();
  public static readonly int WPREFS_PVHDFOLDER = C4dApiPINVOKE.WPREFS_PVHDFOLDER_get();
  public static readonly int WPREFS_PVHDUNLIMIT = C4dApiPINVOKE.WPREFS_PVHDUNLIMIT_get();

  public static readonly int MOUSE_HIDE = C4dApiPINVOKE.MOUSE_HIDE_get();
  public static readonly int MOUSE_SHOW = C4dApiPINVOKE.MOUSE_SHOW_get();
  public static readonly int MOUSE_NORMAL = C4dApiPINVOKE.MOUSE_NORMAL_get();
  public static readonly int MOUSE_BUSY = C4dApiPINVOKE.MOUSE_BUSY_get();
  public static readonly int MOUSE_CROSS = C4dApiPINVOKE.MOUSE_CROSS_get();
  public static readonly int MOUSE_QUESTION = C4dApiPINVOKE.MOUSE_QUESTION_get();
  public static readonly int MOUSE_ZOOM_IN = C4dApiPINVOKE.MOUSE_ZOOM_IN_get();
  public static readonly int MOUSE_ZOOM_OUT = C4dApiPINVOKE.MOUSE_ZOOM_OUT_get();
  public static readonly int MOUSE_FORBIDDEN = C4dApiPINVOKE.MOUSE_FORBIDDEN_get();
  public static readonly int MOUSE_DELETE = C4dApiPINVOKE.MOUSE_DELETE_get();
  public static readonly int MOUSE_COPY = C4dApiPINVOKE.MOUSE_COPY_get();
  public static readonly int MOUSE_INSERTCOPY = C4dApiPINVOKE.MOUSE_INSERTCOPY_get();
  public static readonly int MOUSE_INSERTCOPYDOWN = C4dApiPINVOKE.MOUSE_INSERTCOPYDOWN_get();
  public static readonly int MOUSE_MOVE = C4dApiPINVOKE.MOUSE_MOVE_get();
  public static readonly int MOUSE_INSERTMOVE = C4dApiPINVOKE.MOUSE_INSERTMOVE_get();
  public static readonly int MOUSE_INSERTMOVEDOWN = C4dApiPINVOKE.MOUSE_INSERTMOVEDOWN_get();
  public static readonly int MOUSE_ARROW_H = C4dApiPINVOKE.MOUSE_ARROW_H_get();
  public static readonly int MOUSE_ARROW_V = C4dApiPINVOKE.MOUSE_ARROW_V_get();
  public static readonly int MOUSE_ARROW_HV = C4dApiPINVOKE.MOUSE_ARROW_HV_get();
  public static readonly int MOUSE_POINT_HAND = C4dApiPINVOKE.MOUSE_POINT_HAND_get();
  public static readonly int MOUSE_MOVE_HAND = C4dApiPINVOKE.MOUSE_MOVE_HAND_get();
  public static readonly int MOUSE_IBEAM = C4dApiPINVOKE.MOUSE_IBEAM_get();
  public static readonly int MOUSE_SELECT_LIVE = C4dApiPINVOKE.MOUSE_SELECT_LIVE_get();
  public static readonly int MOUSE_SELECT_FREE = C4dApiPINVOKE.MOUSE_SELECT_FREE_get();
  public static readonly int MOUSE_SELECT_RECT = C4dApiPINVOKE.MOUSE_SELECT_RECT_get();
  public static readonly int MOUSE_SELECT_POLY = C4dApiPINVOKE.MOUSE_SELECT_POLY_get();
  public static readonly int MOUSE_SPLINETOOLS = C4dApiPINVOKE.MOUSE_SPLINETOOLS_get();
  public static readonly int MOUSE_EXTRUDE = C4dApiPINVOKE.MOUSE_EXTRUDE_get();
  public static readonly int MOUSE_NORMALMOVE = C4dApiPINVOKE.MOUSE_NORMALMOVE_get();
  public static readonly int MOUSE_ADDPOINTS = C4dApiPINVOKE.MOUSE_ADDPOINTS_get();
  public static readonly int MOUSE_ADDPOLYGONS = C4dApiPINVOKE.MOUSE_ADDPOLYGONS_get();
  public static readonly int MOUSE_BRIDGE = C4dApiPINVOKE.MOUSE_BRIDGE_get();
  public static readonly int MOUSE_MIRROR = C4dApiPINVOKE.MOUSE_MIRROR_get();
  public static readonly int MOUSE_PAINTMOVE = C4dApiPINVOKE.MOUSE_PAINTMOVE_get();
  public static readonly int MOUSE_PAINTSELECTRECT = C4dApiPINVOKE.MOUSE_PAINTSELECTRECT_get();
  public static readonly int MOUSE_PAINTSELECTCIRCLE = C4dApiPINVOKE.MOUSE_PAINTSELECTCIRCLE_get();
  public static readonly int MOUSE_PAINTSELECTPOLY = C4dApiPINVOKE.MOUSE_PAINTSELECTPOLY_get();
  public static readonly int MOUSE_PAINTSELECTFREE = C4dApiPINVOKE.MOUSE_PAINTSELECTFREE_get();
  public static readonly int MOUSE_PAINTMAGICWAND = C4dApiPINVOKE.MOUSE_PAINTMAGICWAND_get();
  public static readonly int MOUSE_PAINTCOLORRANGE = C4dApiPINVOKE.MOUSE_PAINTCOLORRANGE_get();
  public static readonly int MOUSE_PAINTFILL = C4dApiPINVOKE.MOUSE_PAINTFILL_get();
  public static readonly int MOUSE_PAINTPICK = C4dApiPINVOKE.MOUSE_PAINTPICK_get();
  public static readonly int MOUSE_PAINTBRUSH = C4dApiPINVOKE.MOUSE_PAINTBRUSH_get();
  public static readonly int MOUSE_PAINTCLONE = C4dApiPINVOKE.MOUSE_PAINTCLONE_get();
  public static readonly int MOUSE_PAINTTEXT = C4dApiPINVOKE.MOUSE_PAINTTEXT_get();
  public static readonly int MOUSE_PAINTCROP = C4dApiPINVOKE.MOUSE_PAINTCROP_get();
  public static readonly int MOUSE_PAINTLINE = C4dApiPINVOKE.MOUSE_PAINTLINE_get();
  public static readonly int MOUSE_PAINTPOLYSHAPE = C4dApiPINVOKE.MOUSE_PAINTPOLYSHAPE_get();
  public static readonly int EVMSG_CHANGE = C4dApiPINVOKE.EVMSG_CHANGE_get();
  public static readonly char EVMSG_DOCUMENTRECALCULATED = C4dApiPINVOKE.EVMSG_DOCUMENTRECALCULATED_get();
  public static readonly int EVMSG_TOOLCHANGED = C4dApiPINVOKE.EVMSG_TOOLCHANGED_get();
  public static readonly int EVMSG_GRAPHVIEWCHANGED = C4dApiPINVOKE.EVMSG_GRAPHVIEWCHANGED_get();
  public static readonly int EVMSG_AUTKEYMODECHANGED = C4dApiPINVOKE.EVMSG_AUTKEYMODECHANGED_get();
  public static readonly int EVMSG_UPDATEHIGHLIGHT = C4dApiPINVOKE.EVMSG_UPDATEHIGHLIGHT_get();
  public static readonly int EVMSG_SHOWIN_SB = C4dApiPINVOKE.EVMSG_SHOWIN_SB_get();
  public static readonly int EVMSG_SHOWIN_TL = C4dApiPINVOKE.EVMSG_SHOWIN_TL_get();
  public static readonly int EVMSG_SHOWIN_FC = C4dApiPINVOKE.EVMSG_SHOWIN_FC_get();
  public static readonly int EVMSG_SHOWIN_LM = C4dApiPINVOKE.EVMSG_SHOWIN_LM_get();
  public static readonly int EVMSG_TLOM_MERGE = C4dApiPINVOKE.EVMSG_TLOM_MERGE_get();
  public static readonly int EVMSG_SHOWIN_MT = C4dApiPINVOKE.EVMSG_SHOWIN_MT_get();
  public static readonly int EVMSG_TIMELINESELECTION = C4dApiPINVOKE.EVMSG_TIMELINESELECTION_get();
  public static readonly int EVMSG_BROWSERCHANGE = C4dApiPINVOKE.EVMSG_BROWSERCHANGE_get();
  public static readonly int EVMSG_MATERIALSELECTION = C4dApiPINVOKE.EVMSG_MATERIALSELECTION_get();
  public static readonly int EVMSG_FCURVECHANGE = C4dApiPINVOKE.EVMSG_FCURVECHANGE_get();
  public static readonly int EVMSG_RAYTRACER_FINISHED = C4dApiPINVOKE.EVMSG_RAYTRACER_FINISHED_get();
  public static readonly int EVMSG_MATERIALPREVIEW = C4dApiPINVOKE.EVMSG_MATERIALPREVIEW_get();
  public static readonly char EVMSG_ACTIVEVIEWCHANGED = C4dApiPINVOKE.EVMSG_ACTIVEVIEWCHANGED_get();
  public static readonly char EVMSG_ASYNCEDITORMOVE = C4dApiPINVOKE.EVMSG_ASYNCEDITORMOVE_get();
  public static readonly int MOVE_START = C4dApiPINVOKE.MOVE_START_get();
  public static readonly int MOVE_CONTINUE = C4dApiPINVOKE.MOVE_CONTINUE_get();
  public static readonly int MOVE_END = C4dApiPINVOKE.MOVE_END_get();
  public static readonly char EVMSG_TIMECHANGED = C4dApiPINVOKE.EVMSG_TIMECHANGED_get();
  public static readonly int EVMSG_VIEWWINDOW_OUTPUT = C4dApiPINVOKE.EVMSG_VIEWWINDOW_OUTPUT_get();
  public static readonly int EVMSG_VIEWWINDOW_3DPAINTUPD = C4dApiPINVOKE.EVMSG_VIEWWINDOW_3DPAINTUPD_get();
  public static readonly int VIEWCOLOR_C4DBACKGROUND = C4dApiPINVOKE.VIEWCOLOR_C4DBACKGROUND_get();
  public static readonly int VIEWCOLOR_FILMFORMAT = C4dApiPINVOKE.VIEWCOLOR_FILMFORMAT_get();
  public static readonly int VIEWCOLOR_HORIZON = C4dApiPINVOKE.VIEWCOLOR_HORIZON_get();
  public static readonly int VIEWCOLOR_GRID_MAJOR = C4dApiPINVOKE.VIEWCOLOR_GRID_MAJOR_get();
  public static readonly int VIEWCOLOR_GRID_MINOR = C4dApiPINVOKE.VIEWCOLOR_GRID_MINOR_get();
  public static readonly int VIEWCOLOR_SPLINESTART = C4dApiPINVOKE.VIEWCOLOR_SPLINESTART_get();
  public static readonly int VIEWCOLOR_SPLINEEND = C4dApiPINVOKE.VIEWCOLOR_SPLINEEND_get();
  public static readonly int VIEWCOLOR_CAMERA = C4dApiPINVOKE.VIEWCOLOR_CAMERA_get();
  public static readonly int VIEWCOLOR_PARTICLE = C4dApiPINVOKE.VIEWCOLOR_PARTICLE_get();
  public static readonly int VIEWCOLOR_PMODIFIER = C4dApiPINVOKE.VIEWCOLOR_PMODIFIER_get();
  public static readonly int DELME_VIEWCOLOR_BONE = C4dApiPINVOKE.DELME_VIEWCOLOR_BONE_get();
  public static readonly int VIEWCOLOR_MODIFIER = C4dApiPINVOKE.VIEWCOLOR_MODIFIER_get();
  public static readonly int VIEWCOLOR_ACTIVEPOINT = C4dApiPINVOKE.VIEWCOLOR_ACTIVEPOINT_get();
  public static readonly int VIEWCOLOR_INACTIVEPOINT = C4dApiPINVOKE.VIEWCOLOR_INACTIVEPOINT_get();
  public static readonly int VIEWCOLOR_TANGENT = C4dApiPINVOKE.VIEWCOLOR_TANGENT_get();
  public static readonly int VIEWCOLOR_ACTIVEPOLYGON = C4dApiPINVOKE.VIEWCOLOR_ACTIVEPOLYGON_get();
  public static readonly int VIEWCOLOR_INACTIVEPOLYGON = C4dApiPINVOKE.VIEWCOLOR_INACTIVEPOLYGON_get();
  public static readonly int VIEWCOLOR_TEXTURE = C4dApiPINVOKE.VIEWCOLOR_TEXTURE_get();
  public static readonly int VIEWCOLOR_TEXTUREAXIS = C4dApiPINVOKE.VIEWCOLOR_TEXTUREAXIS_get();
  public static readonly int VIEWCOLOR_ACTIVEBOX = C4dApiPINVOKE.VIEWCOLOR_ACTIVEBOX_get();
  public static readonly int VIEWCOLOR_ANIMPATH = C4dApiPINVOKE.VIEWCOLOR_ANIMPATH_get();
  public static readonly int VIEWCOLOR_XAXIS = C4dApiPINVOKE.VIEWCOLOR_XAXIS_get();
  public static readonly int VIEWCOLOR_YAXIS = C4dApiPINVOKE.VIEWCOLOR_YAXIS_get();
  public static readonly int VIEWCOLOR_ZAXIS = C4dApiPINVOKE.VIEWCOLOR_ZAXIS_get();
  public static readonly int VIEWCOLOR_WXAXIS = C4dApiPINVOKE.VIEWCOLOR_WXAXIS_get();
  public static readonly int VIEWCOLOR_WYAXIS = C4dApiPINVOKE.VIEWCOLOR_WYAXIS_get();
  public static readonly int VIEWCOLOR_WZAXIS = C4dApiPINVOKE.VIEWCOLOR_WZAXIS_get();
  public static readonly int VIEWCOLOR_SELECT_AXIS = C4dApiPINVOKE.VIEWCOLOR_SELECT_AXIS_get();
  public static readonly int VIEWCOLOR_LAYER0 = C4dApiPINVOKE.VIEWCOLOR_LAYER0_get();
  public static readonly int VIEWCOLOR_LAYER1 = C4dApiPINVOKE.VIEWCOLOR_LAYER1_get();
  public static readonly int VIEWCOLOR_LAYER2 = C4dApiPINVOKE.VIEWCOLOR_LAYER2_get();
  public static readonly int VIEWCOLOR_LAYER3 = C4dApiPINVOKE.VIEWCOLOR_LAYER3_get();
  public static readonly int VIEWCOLOR_LAYER4 = C4dApiPINVOKE.VIEWCOLOR_LAYER4_get();
  public static readonly int VIEWCOLOR_LAYER5 = C4dApiPINVOKE.VIEWCOLOR_LAYER5_get();
  public static readonly int VIEWCOLOR_LAYER6 = C4dApiPINVOKE.VIEWCOLOR_LAYER6_get();
  public static readonly int VIEWCOLOR_LAYER7 = C4dApiPINVOKE.VIEWCOLOR_LAYER7_get();
  public static readonly int VIEWCOLOR_VERTEXSTART = C4dApiPINVOKE.VIEWCOLOR_VERTEXSTART_get();
  public static readonly int VIEWCOLOR_VERTEXEND = C4dApiPINVOKE.VIEWCOLOR_VERTEXEND_get();
  public static readonly int VIEWCOLOR_UVMESH_GREYED = C4dApiPINVOKE.VIEWCOLOR_UVMESH_GREYED_get();
  public static readonly int VIEWCOLOR_UVMESH_APOLY = C4dApiPINVOKE.VIEWCOLOR_UVMESH_APOLY_get();
  public static readonly int VIEWCOLOR_UVMESH_IAPOLY = C4dApiPINVOKE.VIEWCOLOR_UVMESH_IAPOLY_get();
  public static readonly int VIEWCOLOR_UVMESH_APOINT = C4dApiPINVOKE.VIEWCOLOR_UVMESH_APOINT_get();
  public static readonly int VIEWCOLOR_UVMESH_IAPOINT = C4dApiPINVOKE.VIEWCOLOR_UVMESH_IAPOINT_get();
  public static readonly int VIEWCOLOR_NORMAL = C4dApiPINVOKE.VIEWCOLOR_NORMAL_get();
  public static readonly int VIEWCOLOR_ACTIVECHILDBOX = C4dApiPINVOKE.VIEWCOLOR_ACTIVECHILDBOX_get();
  public static readonly int VIEWCOLOR_ACTIVEPOLYBOX = C4dApiPINVOKE.VIEWCOLOR_ACTIVEPOLYBOX_get();
  public static readonly int VIEWCOLOR_ACTIVEPOLYCHILDBOX = C4dApiPINVOKE.VIEWCOLOR_ACTIVEPOLYCHILDBOX_get();
  public static readonly int VIEWCOLOR_SELECTION_PREVIEW = C4dApiPINVOKE.VIEWCOLOR_SELECTION_PREVIEW_get();
  public static readonly int VIEWCOLOR_MEASURETOOL = C4dApiPINVOKE.VIEWCOLOR_MEASURETOOL_get();
  public static readonly int VIEWCOLOR_AXIS_BAND = C4dApiPINVOKE.VIEWCOLOR_AXIS_BAND_get();
  public static readonly int VIEWCOLOR_SHADEDWIRE = C4dApiPINVOKE.VIEWCOLOR_SHADEDWIRE_get();
  public static readonly int VIEWCOLOR_NGONLINE = C4dApiPINVOKE.VIEWCOLOR_NGONLINE_get();
  public static readonly int VIEWCOLOR_FRONTFACING = C4dApiPINVOKE.VIEWCOLOR_FRONTFACING_get();
  public static readonly int VIEWCOLOR_BACKFACING = C4dApiPINVOKE.VIEWCOLOR_BACKFACING_get();
  public static readonly int VIEWCOLOR_MINSOFTSELECT = C4dApiPINVOKE.VIEWCOLOR_MINSOFTSELECT_get();
  public static readonly int VIEWCOLOR_MAXSOFTSELECT = C4dApiPINVOKE.VIEWCOLOR_MAXSOFTSELECT_get();
  public static readonly int VIEWCOLOR_MINHNWEIGHT = C4dApiPINVOKE.VIEWCOLOR_MINHNWEIGHT_get();
  public static readonly int VIEWCOLOR_ZEROHNWEIGHT = C4dApiPINVOKE.VIEWCOLOR_ZEROHNWEIGHT_get();
  public static readonly int VIEWCOLOR_MAXHNWEIGHT = C4dApiPINVOKE.VIEWCOLOR_MAXHNWEIGHT_get();
  public static readonly int VIEWCOLOR_IRR = C4dApiPINVOKE.VIEWCOLOR_IRR_get();
  public static readonly int VIEWCOLOR_MAXCOLORS = C4dApiPINVOKE.VIEWCOLOR_MAXCOLORS_get();
  public static readonly int FORMAT_PREF = C4dApiPINVOKE.FORMAT_PREF_get();
  public static readonly int FORMAT_WAV = C4dApiPINVOKE.FORMAT_WAV_get();
  public static readonly int FORMAT_L4D = C4dApiPINVOKE.FORMAT_L4D_get();
  public static readonly int FORMAT_P4D = C4dApiPINVOKE.FORMAT_P4D_get();
  public static readonly int FORMAT_C4DIMPORT = C4dApiPINVOKE.FORMAT_C4DIMPORT_get();
  public static readonly int FORMAT_C4DEXPORT = C4dApiPINVOKE.FORMAT_C4DEXPORT_get();
  public static readonly int FORMAT_XMLIMPORT = C4dApiPINVOKE.FORMAT_XMLIMPORT_get();
  public static readonly int FORMAT_XMLEXPORT = C4dApiPINVOKE.FORMAT_XMLEXPORT_get();
  public static readonly int FORMAT_C4D4IMPORT = C4dApiPINVOKE.FORMAT_C4D4IMPORT_get();
  public static readonly int FORMAT_C4D5IMPORT = C4dApiPINVOKE.FORMAT_C4D5IMPORT_get();
  public static readonly int FORMAT_VRML1IMPORT = C4dApiPINVOKE.FORMAT_VRML1IMPORT_get();
  public static readonly int FORMAT_VRML1EXPORT = C4dApiPINVOKE.FORMAT_VRML1EXPORT_get();
  public static readonly int FORMAT_VRML2IMPORT = C4dApiPINVOKE.FORMAT_VRML2IMPORT_get();
  public static readonly int FORMAT_VRML2EXPORT = C4dApiPINVOKE.FORMAT_VRML2EXPORT_get();
  public static readonly int FORMAT_DXFIMPORT = C4dApiPINVOKE.FORMAT_DXFIMPORT_get();
  public static readonly int FORMAT_DXFEXPORT = C4dApiPINVOKE.FORMAT_DXFEXPORT_get();
  public static readonly int FORMAT_3DSIMPORT = C4dApiPINVOKE.FORMAT_3DSIMPORT_get();
  public static readonly int FORMAT_3DSEXPORT = C4dApiPINVOKE.FORMAT_3DSEXPORT_get();
  public static readonly int FORMAT_OBJIMPORT = C4dApiPINVOKE.FORMAT_OBJIMPORT_get();
  public static readonly int FORMAT_OBJEXPORT = C4dApiPINVOKE.FORMAT_OBJEXPORT_get();
  public static readonly int FORMAT_Q3DIMPORT = C4dApiPINVOKE.FORMAT_Q3DIMPORT_get();
  public static readonly int FORMAT_Q3DEXPORT = C4dApiPINVOKE.FORMAT_Q3DEXPORT_get();
  public static readonly int FORMAT_LWSIMPORT = C4dApiPINVOKE.FORMAT_LWSIMPORT_get();
  public static readonly int FORMAT_LWOIMPORT = C4dApiPINVOKE.FORMAT_LWOIMPORT_get();
  public static readonly int FORMAT_AIIMPORT = C4dApiPINVOKE.FORMAT_AIIMPORT_get();
  public static readonly int FORMAT_DEMIMPORT = C4dApiPINVOKE.FORMAT_DEMIMPORT_get();
  public static readonly int FORMAT_D3DEXPORT = C4dApiPINVOKE.FORMAT_D3DEXPORT_get();
  public static readonly int HIGHLIGHT_TRANSPARENCY = C4dApiPINVOKE.HIGHLIGHT_TRANSPARENCY_get();
  public static readonly double HERMITEFAK = C4dApiPINVOKE.HERMITEFAK_get();
  public static readonly int CREATE_GL_HAS_ROOT = C4dApiPINVOKE.CREATE_GL_HAS_ROOT_get();
  public static readonly int CREATE_GL_IS_ROOT = C4dApiPINVOKE.CREATE_GL_IS_ROOT_get();
  public static readonly int DELETE_GL_HAS_ROOT = C4dApiPINVOKE.DELETE_GL_HAS_ROOT_get();
  public static readonly int DELETE_GL_IS_ROOT = C4dApiPINVOKE.DELETE_GL_IS_ROOT_get();
  public static readonly int RESOURCEIMAGE_PIN = C4dApiPINVOKE.RESOURCEIMAGE_PIN_get();
  public static readonly int RESOURCEIMAGE_SUBGROUP = C4dApiPINVOKE.RESOURCEIMAGE_SUBGROUP_get();
  public static readonly int RESOURCEIMAGE_UNLOCKED = C4dApiPINVOKE.RESOURCEIMAGE_UNLOCKED_get();
  public static readonly int RESOURCEIMAGE_LOCKED = C4dApiPINVOKE.RESOURCEIMAGE_LOCKED_get();
  public static readonly int RESOURCEIMAGE_HISTOGRAM = C4dApiPINVOKE.RESOURCEIMAGE_HISTOGRAM_get();
  public static readonly int RESOURCEIMAGE_PLUS = C4dApiPINVOKE.RESOURCEIMAGE_PLUS_get();
  public static readonly int RESOURCEIMAGE_MINUS = C4dApiPINVOKE.RESOURCEIMAGE_MINUS_get();
  public static readonly int RESOURCEIMAGE_ANIM = C4dApiPINVOKE.RESOURCEIMAGE_ANIM_get();
  public static readonly int RESOURCEIMAGE_KEY = C4dApiPINVOKE.RESOURCEIMAGE_KEY_get();
  public static readonly int RESOURCEIMAGE_SEQUENCE = C4dApiPINVOKE.RESOURCEIMAGE_SEQUENCE_get();
  public static readonly int RESOURCEIMAGE_FOLDER = C4dApiPINVOKE.RESOURCEIMAGE_FOLDER_get();
  public static readonly int RESOURCEIMAGE_OPENED = C4dApiPINVOKE.RESOURCEIMAGE_OPENED_get();
  public static readonly int RESOURCEIMAGE_CLOSED = C4dApiPINVOKE.RESOURCEIMAGE_CLOSED_get();
  public static readonly int RESOURCEIMAGE_ARROWLEFT = C4dApiPINVOKE.RESOURCEIMAGE_ARROWLEFT_get();
  public static readonly int RESOURCEIMAGE_ARROWRIGHT = C4dApiPINVOKE.RESOURCEIMAGE_ARROWRIGHT_get();
  public static readonly int RESOURCEIMAGE_ARROWUP = C4dApiPINVOKE.RESOURCEIMAGE_ARROWUP_get();
  public static readonly int RESOURCEIMAGE_AMDUPLICATE = C4dApiPINVOKE.RESOURCEIMAGE_AMDUPLICATE_get();
  public static readonly int RESOURCEIMAGE_MOVE = C4dApiPINVOKE.RESOURCEIMAGE_MOVE_get();
  public static readonly int RESOURCEIMAGE_SCALE = C4dApiPINVOKE.RESOURCEIMAGE_SCALE_get();
  public static readonly int RESOURCEIMAGE_ROTATE = C4dApiPINVOKE.RESOURCEIMAGE_ROTATE_get();
  public static readonly int RESOURCEIMAGE_VIEWCHANGE = C4dApiPINVOKE.RESOURCEIMAGE_VIEWCHANGE_get();
  public static readonly int RESOURCEIMAGE_FULLSCREEN = C4dApiPINVOKE.RESOURCEIMAGE_FULLSCREEN_get();
  public static readonly int RESOURCEIMAGE_CLOSERRELEASED = C4dApiPINVOKE.RESOURCEIMAGE_CLOSERRELEASED_get();
  public static readonly int RESOURCEIMAGE_CLOSERPRESSED = C4dApiPINVOKE.RESOURCEIMAGE_CLOSERPRESSED_get();
  public static readonly int RESOURCEIMAGE_CANCEL = C4dApiPINVOKE.RESOURCEIMAGE_CANCEL_get();
  public static readonly int RESOURCEIMAGE_OK = C4dApiPINVOKE.RESOURCEIMAGE_OK_get();
  public static readonly int RESOURCEIMAGE_OKCANCEL = C4dApiPINVOKE.RESOURCEIMAGE_OKCANCEL_get();
  public static readonly int RESOURCEIMAGE_BOOLGROUP = C4dApiPINVOKE.RESOURCEIMAGE_BOOLGROUP_get();
  public static readonly int RESOURCEIMAGE_ADAPTERGROUP = C4dApiPINVOKE.RESOURCEIMAGE_ADAPTERGROUP_get();
  public static readonly int RESOURCEIMAGE_CALCULATEGROUP = C4dApiPINVOKE.RESOURCEIMAGE_CALCULATEGROUP_get();
  public static readonly int RESOURCEIMAGE_DEFAULTGROUP = C4dApiPINVOKE.RESOURCEIMAGE_DEFAULTGROUP_get();
  public static readonly int RESOURCEIMAGE_DEFAULTOPERATOR = C4dApiPINVOKE.RESOURCEIMAGE_DEFAULTOPERATOR_get();
  public static readonly int RESOURCEIMAGE_GENERALGROUP = C4dApiPINVOKE.RESOURCEIMAGE_GENERALGROUP_get();
  public static readonly int RESOURCEIMAGE_ITERATORGROUP = C4dApiPINVOKE.RESOURCEIMAGE_ITERATORGROUP_get();
  public static readonly int RESOURCEIMAGE_LOGICALGROUP = C4dApiPINVOKE.RESOURCEIMAGE_LOGICALGROUP_get();
  public static readonly int RESOURCEIMAGE_TPGROUP = C4dApiPINVOKE.RESOURCEIMAGE_TPGROUP_get();
  public static readonly int RESOURCEIMAGE_COFFEESCRIPT = C4dApiPINVOKE.RESOURCEIMAGE_COFFEESCRIPT_get();
  public static readonly int RESOURCEIMAGE_UVWTAG_SECONDSTATE = C4dApiPINVOKE.RESOURCEIMAGE_UVWTAG_SECONDSTATE_get();
  public static readonly int RESOURCEIMAGE_INSTANCEOBJECT_SECONDSTATE = C4dApiPINVOKE.RESOURCEIMAGE_INSTANCEOBJECT_SECONDSTATE_get();
  public static readonly int RESOURCEIMAGE_LIGHT_SHADOWS = C4dApiPINVOKE.RESOURCEIMAGE_LIGHT_SHADOWS_get();
  public static readonly int RESOURCEIMAGE_LIGHT_SPOT = C4dApiPINVOKE.RESOURCEIMAGE_LIGHT_SPOT_get();
  public static readonly int RESOURCEIMAGE_LIGHT_SPOTSHADOWS = C4dApiPINVOKE.RESOURCEIMAGE_LIGHT_SPOTSHADOWS_get();
  public static readonly int RESOURCEIMAGE_LIGHT_PARALLEL = C4dApiPINVOKE.RESOURCEIMAGE_LIGHT_PARALLEL_get();
  public static readonly int RESOURCEIMAGE_LIGHT_PARALLELSHADOWS = C4dApiPINVOKE.RESOURCEIMAGE_LIGHT_PARALLELSHADOWS_get();
  public static readonly int RESOURCEIMAGE_LIGHT_AREA = C4dApiPINVOKE.RESOURCEIMAGE_LIGHT_AREA_get();
  public static readonly int RESOURCEIMAGE_LIGHT_AREASHADOWS = C4dApiPINVOKE.RESOURCEIMAGE_LIGHT_AREASHADOWS_get();
  public static readonly int RESOURCEIMAGE_BASEDRAW = C4dApiPINVOKE.RESOURCEIMAGE_BASEDRAW_get();
  public static readonly int RESOURCEIMAGE_CTRACK = C4dApiPINVOKE.RESOURCEIMAGE_CTRACK_get();
  public static readonly int RESOURCEIMAGE_BASEKEY = C4dApiPINVOKE.RESOURCEIMAGE_BASEKEY_get();
  public static readonly int RESOURCEIMAGE_BASESEQUENCE = C4dApiPINVOKE.RESOURCEIMAGE_BASESEQUENCE_get();
  public static readonly int RESOURCEIMAGE_BASETRACK = C4dApiPINVOKE.RESOURCEIMAGE_BASETRACK_get();
  public static readonly int RESOURCEIMAGE_UNKNOWN = C4dApiPINVOKE.RESOURCEIMAGE_UNKNOWN_get();
  public static readonly int RESOURCEIMAGE_BASESHADER = C4dApiPINVOKE.RESOURCEIMAGE_BASESHADER_get();
  public static readonly int RESOURCEIMAGE_PAINTBITMAP = C4dApiPINVOKE.RESOURCEIMAGE_PAINTBITMAP_get();
  public static readonly int RESOURCEIMAGE_MULTIPLE = C4dApiPINVOKE.RESOURCEIMAGE_MULTIPLE_get();
  public static readonly int RESOURCEIMAGE_EYEACTIVE = C4dApiPINVOKE.RESOURCEIMAGE_EYEACTIVE_get();
  public static readonly int RESOURCEIMAGE_EYEINACTIVE = C4dApiPINVOKE.RESOURCEIMAGE_EYEINACTIVE_get();
  public static readonly int RESOURCEIMAGE_PENACTIVE = C4dApiPINVOKE.RESOURCEIMAGE_PENACTIVE_get();
  public static readonly int RESOURCEIMAGE_PENINACTIVE = C4dApiPINVOKE.RESOURCEIMAGE_PENINACTIVE_get();
  public static readonly int RESOURCEIMAGE_ALPHAACTIVE = C4dApiPINVOKE.RESOURCEIMAGE_ALPHAACTIVE_get();
  public static readonly int RESOURCEIMAGE_ALPHAINACTIVE = C4dApiPINVOKE.RESOURCEIMAGE_ALPHAINACTIVE_get();
  public static readonly int RESOURCEIMAGE_LINKEDACTIVE = C4dApiPINVOKE.RESOURCEIMAGE_LINKEDACTIVE_get();
  public static readonly int RESOURCEIMAGE_LINKEDINACTIVE = C4dApiPINVOKE.RESOURCEIMAGE_LINKEDINACTIVE_get();
  public static readonly int RESOURCEIMAGE_BPAXIS = C4dApiPINVOKE.RESOURCEIMAGE_BPAXIS_get();
  public static readonly int RESOURCEIMAGE_BPCROSSED = C4dApiPINVOKE.RESOURCEIMAGE_BPCROSSED_get();
  public static readonly int RESOURCEIMAGE_MOCCATREEVIEWNO = C4dApiPINVOKE.RESOURCEIMAGE_MOCCATREEVIEWNO_get();
  public static readonly int RESOURCEIMAGE_MOCCATREEVIEWYES = C4dApiPINVOKE.RESOURCEIMAGE_MOCCATREEVIEWYES_get();
  public static readonly int RESOURCEIMAGE_MOCCATREEVIEWLOCKED = C4dApiPINVOKE.RESOURCEIMAGE_MOCCATREEVIEWLOCKED_get();
  public static readonly int RESOURCEIMAGE_MOCCAIKTAG1 = C4dApiPINVOKE.RESOURCEIMAGE_MOCCAIKTAG1_get();
  public static readonly int RESOURCEIMAGE_MOCCAIKTAG2 = C4dApiPINVOKE.RESOURCEIMAGE_MOCCAIKTAG2_get();
  public static readonly int RESOURCEIMAGE_MOCCAIKTAG3 = C4dApiPINVOKE.RESOURCEIMAGE_MOCCAIKTAG3_get();
  public static readonly int RESOURCEIMAGE_MOCCAIKTAG4 = C4dApiPINVOKE.RESOURCEIMAGE_MOCCAIKTAG4_get();
  public static readonly int RESOURCEIMAGE_MOCCAIKTAG5 = C4dApiPINVOKE.RESOURCEIMAGE_MOCCAIKTAG5_get();
  public static readonly int RESOURCEIMAGE_MOCCAIKTAG6 = C4dApiPINVOKE.RESOURCEIMAGE_MOCCAIKTAG6_get();
  public static readonly int RESOURCEIMAGE_BITMAPFILTERPLUS = C4dApiPINVOKE.RESOURCEIMAGE_BITMAPFILTERPLUS_get();
  public static readonly int RESOURCEIMAGE_BITMAPFILTERMINUS = C4dApiPINVOKE.RESOURCEIMAGE_BITMAPFILTERMINUS_get();
  public static readonly int RESOURCEIMAGE_CLOTHING1 = C4dApiPINVOKE.RESOURCEIMAGE_CLOTHING1_get();
  public static readonly int RESOURCEIMAGE_CLOTHING2 = C4dApiPINVOKE.RESOURCEIMAGE_CLOTHING2_get();
  public static readonly int RESOURCEIMAGE_CLOTHING3 = C4dApiPINVOKE.RESOURCEIMAGE_CLOTHING3_get();
  public static readonly int RESOURCEIMAGE_CLOTHING4 = C4dApiPINVOKE.RESOURCEIMAGE_CLOTHING4_get();
  public static readonly int RESOURCEIMAGE_CLEARSELECTION = C4dApiPINVOKE.RESOURCEIMAGE_CLEARSELECTION_get();
  public static readonly int RESOURCEIMAGE_GENERICCOMMAND = C4dApiPINVOKE.RESOURCEIMAGE_GENERICCOMMAND_get();
  public static readonly int RESOURCEIMAGE_TIMELINE_KEY1 = C4dApiPINVOKE.RESOURCEIMAGE_TIMELINE_KEY1_get();
  public static readonly int RESOURCEIMAGE_TIMELINE_KEY2 = C4dApiPINVOKE.RESOURCEIMAGE_TIMELINE_KEY2_get();
  public static readonly int RESOURCEIMAGE_AMMODELOCK_1 = C4dApiPINVOKE.RESOURCEIMAGE_AMMODELOCK_1_get();
  public static readonly int RESOURCEIMAGE_AMMODELOCK_2 = C4dApiPINVOKE.RESOURCEIMAGE_AMMODELOCK_2_get();
  public static readonly int RESOURCEIMAGE_SCENEBROWSER_HOME = C4dApiPINVOKE.RESOURCEIMAGE_SCENEBROWSER_HOME_get();
  public static readonly int RESOURCEIMAGE_SCENEBROWSER_FILTER1 = C4dApiPINVOKE.RESOURCEIMAGE_SCENEBROWSER_FILTER1_get();
  public static readonly int RESOURCEIMAGE_SCENEBROWSER_FILTER2 = C4dApiPINVOKE.RESOURCEIMAGE_SCENEBROWSER_FILTER2_get();
  public static readonly int RESOURCEIMAGE_SCENEBROWSER_FIND1 = C4dApiPINVOKE.RESOURCEIMAGE_SCENEBROWSER_FIND1_get();
  public static readonly int RESOURCEIMAGE_SCENEBROWSER_FIND2 = C4dApiPINVOKE.RESOURCEIMAGE_SCENEBROWSER_FIND2_get();
  public static readonly int RESOURCEIMAGE_SCENEBROWSER_PATH1 = C4dApiPINVOKE.RESOURCEIMAGE_SCENEBROWSER_PATH1_get();
  public static readonly int RESOURCEIMAGE_SCENEBROWSER_PATH2 = C4dApiPINVOKE.RESOURCEIMAGE_SCENEBROWSER_PATH2_get();
  public static readonly int RESOURCEIMAGE_TIMELINE_STATE1 = C4dApiPINVOKE.RESOURCEIMAGE_TIMELINE_STATE1_get();
  public static readonly int RESOURCEIMAGE_TIMELINE_STATE2 = C4dApiPINVOKE.RESOURCEIMAGE_TIMELINE_STATE2_get();
  public static readonly int RESOURCEIMAGE_TIMELINE_STATE3 = C4dApiPINVOKE.RESOURCEIMAGE_TIMELINE_STATE3_get();
  public static readonly int RESOURCEIMAGE_TIMELINE_STATE4 = C4dApiPINVOKE.RESOURCEIMAGE_TIMELINE_STATE4_get();
  public static readonly int RESOURCEIMAGE_TIMELINE_STATE5 = C4dApiPINVOKE.RESOURCEIMAGE_TIMELINE_STATE5_get();
  public static readonly int RESOURCEIMAGE_TIMELINE_STATE6 = C4dApiPINVOKE.RESOURCEIMAGE_TIMELINE_STATE6_get();
  public static readonly int RESOURCEIMAGE_TIMELINE_KEYSTATE1 = C4dApiPINVOKE.RESOURCEIMAGE_TIMELINE_KEYSTATE1_get();
  public static readonly int RESOURCEIMAGE_TIMELINE_KEYSTATE2 = C4dApiPINVOKE.RESOURCEIMAGE_TIMELINE_KEYSTATE2_get();
  public static readonly int RESOURCEIMAGE_TIMELINE_KEYSTATE3 = C4dApiPINVOKE.RESOURCEIMAGE_TIMELINE_KEYSTATE3_get();
  public static readonly int RESOURCEIMAGE_TIMELINE_KEYSTATE4 = C4dApiPINVOKE.RESOURCEIMAGE_TIMELINE_KEYSTATE4_get();
  public static readonly int RESOURCEIMAGE_LAYERMANAGER_STATE1 = C4dApiPINVOKE.RESOURCEIMAGE_LAYERMANAGER_STATE1_get();
  public static readonly int RESOURCEIMAGE_LAYERMANAGER_STATE2 = C4dApiPINVOKE.RESOURCEIMAGE_LAYERMANAGER_STATE2_get();
  public static readonly int RESOURCEIMAGE_LAYERMANAGER_STATE3 = C4dApiPINVOKE.RESOURCEIMAGE_LAYERMANAGER_STATE3_get();
  public static readonly int RESOURCEIMAGE_LAYERMANAGER_STATE4 = C4dApiPINVOKE.RESOURCEIMAGE_LAYERMANAGER_STATE4_get();
  public static readonly int RESOURCEIMAGE_LAYERMANAGER_STATE5 = C4dApiPINVOKE.RESOURCEIMAGE_LAYERMANAGER_STATE5_get();
  public static readonly int RESOURCEIMAGE_LAYERMANAGER_STATE6 = C4dApiPINVOKE.RESOURCEIMAGE_LAYERMANAGER_STATE6_get();
  public static readonly int RESOURCEIMAGE_LAYERMANAGER_STATE7 = C4dApiPINVOKE.RESOURCEIMAGE_LAYERMANAGER_STATE7_get();
  public static readonly int RESOURCEIMAGE_LAYERMANAGER_STATE8 = C4dApiPINVOKE.RESOURCEIMAGE_LAYERMANAGER_STATE8_get();
  public static readonly int RESOURCEIMAGE_LAYERMANAGER_STATE9 = C4dApiPINVOKE.RESOURCEIMAGE_LAYERMANAGER_STATE9_get();
  public static readonly int RESOURCEIMAGE_LAYERMANAGER_STATE10 = C4dApiPINVOKE.RESOURCEIMAGE_LAYERMANAGER_STATE10_get();
  public static readonly int RESOURCEIMAGE_LAYERMANAGER_STATE11 = C4dApiPINVOKE.RESOURCEIMAGE_LAYERMANAGER_STATE11_get();
  public static readonly int RESOURCEIMAGE_LAYERMANAGER_STATE12 = C4dApiPINVOKE.RESOURCEIMAGE_LAYERMANAGER_STATE12_get();
  public static readonly int RESOURCEIMAGE_LAYERMANAGER_STATE13 = C4dApiPINVOKE.RESOURCEIMAGE_LAYERMANAGER_STATE13_get();
  public static readonly int RESOURCEIMAGE_LAYERMANAGER_STATE14 = C4dApiPINVOKE.RESOURCEIMAGE_LAYERMANAGER_STATE14_get();
  public static readonly int RESOURCEIMAGE_LAYERMANAGER_STATE15 = C4dApiPINVOKE.RESOURCEIMAGE_LAYERMANAGER_STATE15_get();
  public static readonly int RESOURCEIMAGE_LAYERMANAGER_STATE16 = C4dApiPINVOKE.RESOURCEIMAGE_LAYERMANAGER_STATE16_get();
  public static readonly int RESOURCEIMAGE_LAYERMANAGER_STATE17 = C4dApiPINVOKE.RESOURCEIMAGE_LAYERMANAGER_STATE17_get();
  public static readonly int RESOURCEIMAGE_LAYERMANAGER_STATE18 = C4dApiPINVOKE.RESOURCEIMAGE_LAYERMANAGER_STATE18_get();
  public static readonly int RESOURCEIMAGE_OBJECTMANAGER_STATE1 = C4dApiPINVOKE.RESOURCEIMAGE_OBJECTMANAGER_STATE1_get();
  public static readonly int RESOURCEIMAGE_OBJECTMANAGER_STATE2 = C4dApiPINVOKE.RESOURCEIMAGE_OBJECTMANAGER_STATE2_get();
  public static readonly int RESOURCEIMAGE_OBJECTMANAGER_STATE3 = C4dApiPINVOKE.RESOURCEIMAGE_OBJECTMANAGER_STATE3_get();
  public static readonly int RESOURCEIMAGE_OBJECTMANAGER_STATE4 = C4dApiPINVOKE.RESOURCEIMAGE_OBJECTMANAGER_STATE4_get();
  public static readonly int RESOURCEIMAGE_OBJECTMANAGER_DOT1 = C4dApiPINVOKE.RESOURCEIMAGE_OBJECTMANAGER_DOT1_get();
  public static readonly int RESOURCEIMAGE_OBJECTMANAGER_DOT2 = C4dApiPINVOKE.RESOURCEIMAGE_OBJECTMANAGER_DOT2_get();
  public static readonly int RESOURCEIMAGE_OBJECTMANAGER_DOT3 = C4dApiPINVOKE.RESOURCEIMAGE_OBJECTMANAGER_DOT3_get();
  public static readonly int RESOURCEIMAGE_OBJECTMANAGER_DOT4 = C4dApiPINVOKE.RESOURCEIMAGE_OBJECTMANAGER_DOT4_get();
  public static readonly int RESOURCEIMAGE_OBJECTMANAGER_LOCK = C4dApiPINVOKE.RESOURCEIMAGE_OBJECTMANAGER_LOCK_get();
  public static readonly int RESOURCEIMAGE_TIMELINE_FOLDER1 = C4dApiPINVOKE.RESOURCEIMAGE_TIMELINE_FOLDER1_get();
  public static readonly int RESOURCEIMAGE_TIMELINE_FOLDER2 = C4dApiPINVOKE.RESOURCEIMAGE_TIMELINE_FOLDER2_get();
  public static readonly int RESOURCEIMAGE_TIMELINE_FOLDER3 = C4dApiPINVOKE.RESOURCEIMAGE_TIMELINE_FOLDER3_get();
  public static readonly int RESOURCEIMAGE_TIMELINE_FOLDER4 = C4dApiPINVOKE.RESOURCEIMAGE_TIMELINE_FOLDER4_get();
  public static readonly int RESOURCEIMAGE_TIMELINE_ROOT1 = C4dApiPINVOKE.RESOURCEIMAGE_TIMELINE_ROOT1_get();
  public static readonly int RESOURCEIMAGE_TIMELINE_ROOT2 = C4dApiPINVOKE.RESOURCEIMAGE_TIMELINE_ROOT2_get();
  public static readonly int RESOURCEIMAGE_TIMELINE_ROOT3 = C4dApiPINVOKE.RESOURCEIMAGE_TIMELINE_ROOT3_get();
  public static readonly int RESOURCEIMAGE_OBJECTMANAGER_DISP1 = C4dApiPINVOKE.RESOURCEIMAGE_OBJECTMANAGER_DISP1_get();
  public static readonly int RESOURCEIMAGE_OBJECTMANAGER_DISP2 = C4dApiPINVOKE.RESOURCEIMAGE_OBJECTMANAGER_DISP2_get();
  public static readonly int RESOURCEIMAGE_OBJECTMANAGER_DISP3 = C4dApiPINVOKE.RESOURCEIMAGE_OBJECTMANAGER_DISP3_get();
  public static readonly int RESOURCEIMAGE_OBJECTMANAGER_DISP4 = C4dApiPINVOKE.RESOURCEIMAGE_OBJECTMANAGER_DISP4_get();
  public static readonly int RESOURCEIMAGE_BROWSER_DESKTOP = C4dApiPINVOKE.RESOURCEIMAGE_BROWSER_DESKTOP_get();
  public static readonly int RESOURCEIMAGE_BROWSER_HOME = C4dApiPINVOKE.RESOURCEIMAGE_BROWSER_HOME_get();
  public static readonly int RESOURCEIMAGE_BROWSER_PRESET = C4dApiPINVOKE.RESOURCEIMAGE_BROWSER_PRESET_get();
  public static readonly int RESOURCEIMAGE_BROWSER_CATALOG = C4dApiPINVOKE.RESOURCEIMAGE_BROWSER_CATALOG_get();
  public static readonly int RESOURCEIMAGE_BROWSER_SEARCH = C4dApiPINVOKE.RESOURCEIMAGE_BROWSER_SEARCH_get();
  public static readonly int RESOURCEIMAGE_BROWSER_PLAY = C4dApiPINVOKE.RESOURCEIMAGE_BROWSER_PLAY_get();
  public static readonly int RESOURCEIMAGE_BROWSER_PAUSE = C4dApiPINVOKE.RESOURCEIMAGE_BROWSER_PAUSE_get();
  public static readonly int RESOURCEIMAGE_BROWSER_SMALLVIEW = C4dApiPINVOKE.RESOURCEIMAGE_BROWSER_SMALLVIEW_get();
  public static readonly int RESOURCEIMAGE_BROWSER_BIGVIEW = C4dApiPINVOKE.RESOURCEIMAGE_BROWSER_BIGVIEW_get();
  public static readonly int RESOURCEIMAGE_ONLINEHELP_HOME = C4dApiPINVOKE.RESOURCEIMAGE_ONLINEHELP_HOME_get();
  public static readonly int RESOURCEIMAGE_ARROWDOWN = C4dApiPINVOKE.RESOURCEIMAGE_ARROWDOWN_get();
  public static readonly int RESOURCEIMAGE_EYETRISTATE = C4dApiPINVOKE.RESOURCEIMAGE_EYETRISTATE_get();
  public static readonly int RESOURCEIMAGE_PREVIOUSPAGE = C4dApiPINVOKE.RESOURCEIMAGE_PREVIOUSPAGE_get();
  public static readonly int RESOURCEIMAGE_FOLLOWINGPAGE = C4dApiPINVOKE.RESOURCEIMAGE_FOLLOWINGPAGE_get();
  public static readonly int RESOURCEIMAGE_LIGHT_PHOTOMETRIC = C4dApiPINVOKE.RESOURCEIMAGE_LIGHT_PHOTOMETRIC_get();
  public static readonly int RESOURCEIMAGE_LIGHT_PHOTOMETRICSHADOWS = C4dApiPINVOKE.RESOURCEIMAGE_LIGHT_PHOTOMETRICSHADOWS_get();
  public static readonly int HOTKEY_CAMERA_MOVE = C4dApiPINVOKE.HOTKEY_CAMERA_MOVE_get();
  public static readonly int HOTKEY_CAMERA_SCALE = C4dApiPINVOKE.HOTKEY_CAMERA_SCALE_get();
  public static readonly int HOTKEY_CAMERA_ROTATE = C4dApiPINVOKE.HOTKEY_CAMERA_ROTATE_get();
  public static readonly int HOTKEY_OBJECT_MOVE = C4dApiPINVOKE.HOTKEY_OBJECT_MOVE_get();
  public static readonly int HOTKEY_OBJECT_SCALE = C4dApiPINVOKE.HOTKEY_OBJECT_SCALE_get();
  public static readonly int HOTKEY_OBJECT_ROTATE = C4dApiPINVOKE.HOTKEY_OBJECT_ROTATE_get();
  public static readonly int HOTKEY_MODEL_SCALE = C4dApiPINVOKE.HOTKEY_MODEL_SCALE_get();
  public static readonly int HOTKEY_ZOOM = C4dApiPINVOKE.HOTKEY_ZOOM_get();
  public static readonly int HOTKEY_SELECT_FREE = C4dApiPINVOKE.HOTKEY_SELECT_FREE_get();
  public static readonly int HOTKEY_SELECT_LIVE = C4dApiPINVOKE.HOTKEY_SELECT_LIVE_get();
  public static readonly int HOTKEY_SELECT_RECT = C4dApiPINVOKE.HOTKEY_SELECT_RECT_get();
  public static readonly int IDM_UNDO = C4dApiPINVOKE.IDM_UNDO_get();
  public static readonly int IDM_REDO = C4dApiPINVOKE.IDM_REDO_get();
  public static readonly int IDM_CUT = C4dApiPINVOKE.IDM_CUT_get();
  public static readonly int IDM_COPY = C4dApiPINVOKE.IDM_COPY_get();
  public static readonly int IDM_PASTE = C4dApiPINVOKE.IDM_PASTE_get();
  public static readonly int IDM_DELETE = C4dApiPINVOKE.IDM_DELETE_get();
  public static readonly int IDM_SELECTALL = C4dApiPINVOKE.IDM_SELECTALL_get();
  public static readonly int IDM_SELECTNONE = C4dApiPINVOKE.IDM_SELECTNONE_get();
  public static readonly int IDM_INVERSION = C4dApiPINVOKE.IDM_INVERSION_get();
  public static readonly int EXECUTIONPRIORITY_INITIAL = C4dApiPINVOKE.EXECUTIONPRIORITY_INITIAL_get();
  public static readonly int EXECUTIONPRIORITY_ANIMATION = C4dApiPINVOKE.EXECUTIONPRIORITY_ANIMATION_get();
  public static readonly int EXECUTIONPRIORITY_ANIMATION_NLA = C4dApiPINVOKE.EXECUTIONPRIORITY_ANIMATION_NLA_get();
  public static readonly int EXECUTIONPRIORITY_EXPRESSION = C4dApiPINVOKE.EXECUTIONPRIORITY_EXPRESSION_get();
  public static readonly int EXECUTIONPRIORITY_DYNAMICS = C4dApiPINVOKE.EXECUTIONPRIORITY_DYNAMICS_get();
  public static readonly int EXECUTIONPRIORITY_GENERATOR = C4dApiPINVOKE.EXECUTIONPRIORITY_GENERATOR_get();
  public static readonly int DLG_OK = C4dApiPINVOKE.DLG_OK_get();
  public static readonly int DLG_CANCEL = C4dApiPINVOKE.DLG_CANCEL_get();

  public static readonly int ID_MT_SOURCECOUNTER = C4dApiPINVOKE.ID_MT_SOURCECOUNTER_get();
  public static readonly int MAX_GLOBAL_TEXTURE_PATHS = C4dApiPINVOKE.MAX_GLOBAL_TEXTURE_PATHS_get();
  public static readonly int SHADERPOPUP_SETSHADER = C4dApiPINVOKE.SHADERPOPUP_SETSHADER_get();
  public static readonly int SHADERPOPUP_SETFILENAME = C4dApiPINVOKE.SHADERPOPUP_SETFILENAME_get();
  public static readonly int SHADERPOPUP_LOADIMAGE = C4dApiPINVOKE.SHADERPOPUP_LOADIMAGE_get();
  public static readonly int SHADERPOPUP_EDITPARAMS = C4dApiPINVOKE.SHADERPOPUP_EDITPARAMS_get();
  public static readonly int SHADERPOPUP_RELOADIMAGE = C4dApiPINVOKE.SHADERPOPUP_RELOADIMAGE_get();
  public static readonly int SHADERPOPUP_EDITIMAGE = C4dApiPINVOKE.SHADERPOPUP_EDITIMAGE_get();
  public static readonly int SHADERPOPUP_COPYCHANNEL = C4dApiPINVOKE.SHADERPOPUP_COPYCHANNEL_get();
  public static readonly int SHADERPOPUP_PASTECHANNEL = C4dApiPINVOKE.SHADERPOPUP_PASTECHANNEL_get();
  public static readonly int SHADERPOPUP_CREATENEWTEXTURE = C4dApiPINVOKE.SHADERPOPUP_CREATENEWTEXTURE_get();
  public static readonly int SHADERPOPUP_CLEARSHADER = C4dApiPINVOKE.SHADERPOPUP_CLEARSHADER_get();
  public static readonly int DEFAULTFILENAME_SHADER_SURFACES = C4dApiPINVOKE.DEFAULTFILENAME_SHADER_SURFACES_get();
  public static readonly int DEFAULTFILENAME_SHADER_EFFECTS = C4dApiPINVOKE.DEFAULTFILENAME_SHADER_EFFECTS_get();
  public static readonly int DEFAULTFILENAME_SHADER_VOLUME = C4dApiPINVOKE.DEFAULTFILENAME_SHADER_VOLUME_get();
  public static readonly int BACKGROUNDHANDLER_PRIORITY_RENDERACTIVEMATERIAL = C4dApiPINVOKE.BACKGROUNDHANDLER_PRIORITY_RENDERACTIVEMATERIAL_get();
  public static readonly int BACKGROUNDHANDLER_PRIORITY_REDRAWVIEW = C4dApiPINVOKE.BACKGROUNDHANDLER_PRIORITY_REDRAWVIEW_get();
  public static readonly int BACKGROUNDHANDLER_PRIORITY_RENDERINACTIVEMATERIALS = C4dApiPINVOKE.BACKGROUNDHANDLER_PRIORITY_RENDERINACTIVEMATERIALS_get();
  public static readonly int BACKGROUNDHANDLER_PRIORITY_RENDEREXTERNAL = C4dApiPINVOKE.BACKGROUNDHANDLER_PRIORITY_RENDEREXTERNAL_get();
  public static readonly int BACKGROUNDHANDLER_PRIORITY_REDRAWANTS = C4dApiPINVOKE.BACKGROUNDHANDLER_PRIORITY_REDRAWANTS_get();
  public static readonly int BACKGROUNDHANDLER_TYPECLASS_C4D = C4dApiPINVOKE.BACKGROUNDHANDLER_TYPECLASS_C4D_get();
  public static readonly int ID_COFFEESCRIPT = C4dApiPINVOKE.ID_COFFEESCRIPT_get();
  public static readonly int COFFEESCRIPT_TEXT = C4dApiPINVOKE.COFFEESCRIPT_TEXT_get();
  public static readonly int COFFEESCRIPT_SHOWINMENU = C4dApiPINVOKE.COFFEESCRIPT_SHOWINMENU_get();
  public static readonly int COFFEESCRIPT_ADDEVENT = C4dApiPINVOKE.COFFEESCRIPT_ADDEVENT_get();
  public static readonly int COFFEESCRIPT_SCRIPTENABLE = C4dApiPINVOKE.COFFEESCRIPT_SCRIPTENABLE_get();
  public static readonly int COFFEESCRIPT_CONTAINER = C4dApiPINVOKE.COFFEESCRIPT_CONTAINER_get();
  public static readonly int COFFEESCRIPT_SCRIPTNAME = C4dApiPINVOKE.COFFEESCRIPT_SCRIPTNAME_get();
  public static readonly int COFFEESCRIPT_SCRIPTHELP = C4dApiPINVOKE.COFFEESCRIPT_SCRIPTHELP_get();
  public static readonly int MSG_COFFEESCRIPT_EXECUTE = C4dApiPINVOKE.MSG_COFFEESCRIPT_EXECUTE_get();
  public static readonly int MSG_COFFEESCRIPT_RETRIEVEBITMAP = C4dApiPINVOKE.MSG_COFFEESCRIPT_RETRIEVEBITMAP_get();
  public static readonly int BASEDRAW_DRAWPORTTYPE = C4dApiPINVOKE.BASEDRAW_DRAWPORTTYPE_get();
  public static readonly int BASEDRAW_IS_SHADOWPASS = C4dApiPINVOKE.BASEDRAW_IS_SHADOWPASS_get();
  public static readonly int BASEDRAW_IS_RENDERASEDITOR = C4dApiPINVOKE.BASEDRAW_IS_RENDERASEDITOR_get();
  public static readonly int BASEDRAW_IS_OGL_PREPASS = C4dApiPINVOKE.BASEDRAW_IS_OGL_PREPASS_get();
  public static readonly int BASEDRAW_IS_PICK_OBJECT = C4dApiPINVOKE.BASEDRAW_IS_PICK_OBJECT_get();
  public static readonly int MSG_GICSEX = C4dApiPINVOKE.MSG_GICSEX_get();
  public static readonly int MSG_GINEW = C4dApiPINVOKE.MSG_GINEW_get();
  public static readonly int ID_OLDCAUSTICS = C4dApiPINVOKE.ID_OLDCAUSTICS_get();
  public static readonly int VPglobalillumination = C4dApiPINVOKE.VPglobalillumination_get();
  public static readonly char COFFEEEDITOR_GETSTRING = C4dApiPINVOKE.COFFEEEDITOR_GETSTRING_get();
  public static readonly char COFFEEEDITOR_SETSTRING = C4dApiPINVOKE.COFFEEEDITOR_SETSTRING_get();
  public static readonly char COFFEEEDITOR_COMPILE = C4dApiPINVOKE.COFFEEEDITOR_COMPILE_get();
  public static readonly char COFFEEEDITOR_GETERROR_RES = C4dApiPINVOKE.COFFEEEDITOR_GETERROR_RES_get();
  public static readonly char COFFEEEDITOR_GETERROR_STRING = C4dApiPINVOKE.COFFEEEDITOR_GETERROR_STRING_get();
  public static readonly char COFFEEEDITOR_GETERROR_LINE = C4dApiPINVOKE.COFFEEEDITOR_GETERROR_LINE_get();
  public static readonly char COFFEEEDITOR_GETERROR_POS = C4dApiPINVOKE.COFFEEEDITOR_GETERROR_POS_get();
  public static readonly char COFFEEEDITOR_EXECUTE = C4dApiPINVOKE.COFFEEEDITOR_EXECUTE_get();
  public static readonly int DIALOG_PIN = C4dApiPINVOKE.DIALOG_PIN_get();
  public static readonly int DIALOG_CHECKBOX = C4dApiPINVOKE.DIALOG_CHECKBOX_get();
  public static readonly int DIALOG_STATICTEXT = C4dApiPINVOKE.DIALOG_STATICTEXT_get();
  public static readonly int DIALOG_BUTTON = C4dApiPINVOKE.DIALOG_BUTTON_get();
  public static readonly int DIALOG_ARROWBUTTON = C4dApiPINVOKE.DIALOG_ARROWBUTTON_get();
  public static readonly int DIALOG_EDITTEXT = C4dApiPINVOKE.DIALOG_EDITTEXT_get();
  public static readonly int DIALOG_EDITNUMBER = C4dApiPINVOKE.DIALOG_EDITNUMBER_get();
  public static readonly int DIALOG_EDITNUMBERUD = C4dApiPINVOKE.DIALOG_EDITNUMBERUD_get();
  public static readonly int DIALOG_EDITSLIDER = C4dApiPINVOKE.DIALOG_EDITSLIDER_get();
  public static readonly int DIALOG_SLIDER = C4dApiPINVOKE.DIALOG_SLIDER_get();
  public static readonly int DIALOG_COLORFIELD = C4dApiPINVOKE.DIALOG_COLORFIELD_get();
  public static readonly int DIALOG_COLORCHOOSER = C4dApiPINVOKE.DIALOG_COLORCHOOSER_get();
  public static readonly int DIALOG_USERAREA = C4dApiPINVOKE.DIALOG_USERAREA_get();
  public static readonly int DIALOG_RADIOGROUP = C4dApiPINVOKE.DIALOG_RADIOGROUP_get();
  public static readonly int DIALOG_COMBOBOX = C4dApiPINVOKE.DIALOG_COMBOBOX_get();
  public static readonly int DIALOG_POPUPBUTTON = C4dApiPINVOKE.DIALOG_POPUPBUTTON_get();
  public static readonly int DIALOG_CHILD = C4dApiPINVOKE.DIALOG_CHILD_get();
  public static readonly int DIALOG_FREECHILDREN = C4dApiPINVOKE.DIALOG_FREECHILDREN_get();
  public static readonly int DIALOG_DLGGROUP = C4dApiPINVOKE.DIALOG_DLGGROUP_get();
  public static readonly int DIALOG_SETTITLE = C4dApiPINVOKE.DIALOG_SETTITLE_get();
  public static readonly int DIALOG_GROUPSPACE = C4dApiPINVOKE.DIALOG_GROUPSPACE_get();
  public static readonly int DIALOG_GROUPBORDER = C4dApiPINVOKE.DIALOG_GROUPBORDER_get();
  public static readonly int DIALOG_GROUPBORDERSIZE = C4dApiPINVOKE.DIALOG_GROUPBORDERSIZE_get();
  public static readonly int DIALOG_SETIDS = C4dApiPINVOKE.DIALOG_SETIDS_get();
  public static readonly int DIALOG_LAYOUTCHANGED = C4dApiPINVOKE.DIALOG_LAYOUTCHANGED_get();
  public static readonly int DIALOG_ACTIVATE = C4dApiPINVOKE.DIALOG_ACTIVATE_get();
  public static readonly int DIALOG_ADDSUBMENU = C4dApiPINVOKE.DIALOG_ADDSUBMENU_get();
  public static readonly int DIALOG_ENDSUBMENU = C4dApiPINVOKE.DIALOG_ENDSUBMENU_get();
  public static readonly int DIALOG_ADDMENUCMD = C4dApiPINVOKE.DIALOG_ADDMENUCMD_get();
  public static readonly int DIALOG_FLUSHMENU = C4dApiPINVOKE.DIALOG_FLUSHMENU_get();
  public static readonly int DIALOG_INIT = C4dApiPINVOKE.DIALOG_INIT_get();
  public static readonly int DIALOG_CHECKNUMBERS = C4dApiPINVOKE.DIALOG_CHECKNUMBERS_get();
  public static readonly int DELME_DIALOG_SETGROUP = C4dApiPINVOKE.DELME_DIALOG_SETGROUP_get();
  public static readonly int DIALOG_FLUSHGROUP = C4dApiPINVOKE.DIALOG_FLUSHGROUP_get();
  public static readonly int DIALOG_SETMENU = C4dApiPINVOKE.DIALOG_SETMENU_get();
  public static readonly int DIALOG_SCREEN2LOCALX = C4dApiPINVOKE.DIALOG_SCREEN2LOCALX_get();
  public static readonly int DIALOG_SCREEN2LOCALY = C4dApiPINVOKE.DIALOG_SCREEN2LOCALY_get();
  public static readonly int DIALOG_ADDMENUSTR = C4dApiPINVOKE.DIALOG_ADDMENUSTR_get();
  public static readonly int DIALOG_RADIOBUTTON = C4dApiPINVOKE.DIALOG_RADIOBUTTON_get();
  public static readonly int DIALOG_ADDMENUSEP = C4dApiPINVOKE.DIALOG_ADDMENUSEP_get();
  public static readonly int DIALOG_SEPARATOR = C4dApiPINVOKE.DIALOG_SEPARATOR_get();
  public static readonly int DIALOG_MULTILINEEDITTEXT = C4dApiPINVOKE.DIALOG_MULTILINEEDITTEXT_get();
  public static readonly int DIALOG_INITMENUSTR = C4dApiPINVOKE.DIALOG_INITMENUSTR_get();
  public static readonly int DIALOG_RADIOTEXT = C4dApiPINVOKE.DIALOG_RADIOTEXT_get();
  public static readonly int DIALOG_MENURESOURCE = C4dApiPINVOKE.DIALOG_MENURESOURCE_get();
  public static readonly int DIALOG_LISTVIEW = C4dApiPINVOKE.DIALOG_LISTVIEW_get();
  public static readonly int DIALOG_SUBDIALOG = C4dApiPINVOKE.DIALOG_SUBDIALOG_get();
  public static readonly int DIALOG_CHECKCLOSE = C4dApiPINVOKE.DIALOG_CHECKCLOSE_get();
  public static readonly int DIALOG_GETTRISTATE = C4dApiPINVOKE.DIALOG_GETTRISTATE_get();
  public static readonly int DIALOG_SDK = C4dApiPINVOKE.DIALOG_SDK_get();
  public static readonly int DIALOG_SCROLLGROUP = C4dApiPINVOKE.DIALOG_SCROLLGROUP_get();
  public static readonly int DIALOG_ISOPEN = C4dApiPINVOKE.DIALOG_ISOPEN_get();
  public static readonly int DIALOG_REMOVEGADGET = C4dApiPINVOKE.DIALOG_REMOVEGADGET_get();
  public static readonly int DIALOG_MENUGROUPBEGIN = C4dApiPINVOKE.DIALOG_MENUGROUPBEGIN_get();
  public static readonly int DIALOG_NOMENUBAR = C4dApiPINVOKE.DIALOG_NOMENUBAR_get();
  public static readonly int DIALOG_SAVEWEIGHTS = C4dApiPINVOKE.DIALOG_SAVEWEIGHTS_get();
  public static readonly int DIALOG_LOADWEIGHTS = C4dApiPINVOKE.DIALOG_LOADWEIGHTS_get();
  public static readonly int DIALOG_EDITSHORTCUT = C4dApiPINVOKE.DIALOG_EDITSHORTCUT_get();
  public static readonly int DIALOG_ISVISIBLE = C4dApiPINVOKE.DIALOG_ISVISIBLE_get();
  public static readonly int DIALOG_HIDEELEMENT = C4dApiPINVOKE.DIALOG_HIDEELEMENT_get();
  public static readonly int DIALOG_SETDEFAULTCOLOR = C4dApiPINVOKE.DIALOG_SETDEFAULTCOLOR_get();
  public static readonly int DIALOG_COMBOBUTTON = C4dApiPINVOKE.DIALOG_COMBOBUTTON_get();
  public static readonly int DIALOG_PRIVATE_NOSTOPEDITORTHREADS = C4dApiPINVOKE.DIALOG_PRIVATE_NOSTOPEDITORTHREADS_get();
  public static readonly int DIALOG_ = C4dApiPINVOKE.DIALOG__get();

  public static readonly int EDITTEXT_PASSWORD = C4dApiPINVOKE.EDITTEXT_PASSWORD_get();
  public static readonly int LV_GETLINECOUNT = C4dApiPINVOKE.LV_GETLINECOUNT_get();
  public static readonly int LV_GETCOLUMNCOUNT = C4dApiPINVOKE.LV_GETCOLUMNCOUNT_get();
  public static readonly int LV_GETLINEHEIGHT = C4dApiPINVOKE.LV_GETLINEHEIGHT_get();
  public static readonly int LV_GETCOLUMNWIDTH = C4dApiPINVOKE.LV_GETCOLUMNWIDTH_get();
  public static readonly int LV_GETCOLUMTYPE = C4dApiPINVOKE.LV_GETCOLUMTYPE_get();
  public static readonly int LV_COLUMN_TEXT = C4dApiPINVOKE.LV_COLUMN_TEXT_get();
  public static readonly int LV_COLUMN_EDITTEXT = C4dApiPINVOKE.LV_COLUMN_EDITTEXT_get();
  public static readonly int LV_COLUMN_BMP = C4dApiPINVOKE.LV_COLUMN_BMP_get();
  public static readonly int LV_COLUMN_CHECKBOX = C4dApiPINVOKE.LV_COLUMN_CHECKBOX_get();
  public static readonly int LV_COLUMN_BUTTON = C4dApiPINVOKE.LV_COLUMN_BUTTON_get();
  public static readonly int LV_COLUMN_USERDRAW = C4dApiPINVOKE.LV_COLUMN_USERDRAW_get();
  public static readonly int LV_COLUMN_COLORVIEW = C4dApiPINVOKE.LV_COLUMN_COLORVIEW_get();
  public static readonly int LV_GETCOLUMDATA = C4dApiPINVOKE.LV_GETCOLUMDATA_get();
  public static readonly int LV_GETLINESELECTED = C4dApiPINVOKE.LV_GETLINESELECTED_get();
  public static readonly int LV_GETCOLSPACE = C4dApiPINVOKE.LV_GETCOLSPACE_get();
  public static readonly int LV_GETLINESPACE = C4dApiPINVOKE.LV_GETLINESPACE_get();
  public static readonly int LV_GETFIXEDLAYOUT = C4dApiPINVOKE.LV_GETFIXEDLAYOUT_get();
  public static readonly int LV_DESTROYLISTVIEW = C4dApiPINVOKE.LV_DESTROYLISTVIEW_get();
  public static readonly int LV_INITCACHE = C4dApiPINVOKE.LV_INITCACHE_get();
  public static readonly int LV_NOAUTOCOLUMN = C4dApiPINVOKE.LV_NOAUTOCOLUMN_get();
  public static readonly int LV_LMOUSEDOWN = C4dApiPINVOKE.LV_LMOUSEDOWN_get();
  public static readonly int LV_ACTION = C4dApiPINVOKE.LV_ACTION_get();
  public static readonly int LV_USERDRAW = C4dApiPINVOKE.LV_USERDRAW_get();
  public static readonly int LV_REDRAW = C4dApiPINVOKE.LV_REDRAW_get();
  public static readonly int LV_DATACHANGED = C4dApiPINVOKE.LV_DATACHANGED_get();
  public static readonly int LV_SHOWLINE = C4dApiPINVOKE.LV_SHOWLINE_get();
  public static readonly int LV_DRAGRECEIVE = C4dApiPINVOKE.LV_DRAGRECEIVE_get();
  public static readonly int LV_RMOUSEDOWN = C4dApiPINVOKE.LV_RMOUSEDOWN_get();
  public static readonly int LV_SIMPLE_SELECTIONCHANGED = C4dApiPINVOKE.LV_SIMPLE_SELECTIONCHANGED_get();
  public static readonly int LV_SIMPLE_CHECKBOXCHANGED = C4dApiPINVOKE.LV_SIMPLE_CHECKBOXCHANGED_get();
  public static readonly int LV_SIMPLE_FOCUSITEM = C4dApiPINVOKE.LV_SIMPLE_FOCUSITEM_get();
  public static readonly int LV_SIMPLE_BUTTONCLICK = C4dApiPINVOKE.LV_SIMPLE_BUTTONCLICK_get();
  public static readonly int LV_SIMPLE_ITEM_ID = C4dApiPINVOKE.LV_SIMPLE_ITEM_ID_get();
  public static readonly int LV_SIMPLE_COL_ID = C4dApiPINVOKE.LV_SIMPLE_COL_ID_get();
  public static readonly int LV_SIMPLE_DATA = C4dApiPINVOKE.LV_SIMPLE_DATA_get();
  public static readonly int LV_SIMPLE_DOUBLECLICK = C4dApiPINVOKE.LV_SIMPLE_DOUBLECLICK_get();
  public static readonly int LV_SIMPLE_FOCUSITEM_NC = C4dApiPINVOKE.LV_SIMPLE_FOCUSITEM_NC_get();
  public static readonly int LV_SIMPLE_RMOUSE = C4dApiPINVOKE.LV_SIMPLE_RMOUSE_get();
  public static readonly int LV_SIMPLE_USERDRAW = C4dApiPINVOKE.LV_SIMPLE_USERDRAW_get();
  public static readonly int LV_RES_LONG = C4dApiPINVOKE.LV_RES_LONG_get();
  public static readonly int LV_RES_BITMAP = C4dApiPINVOKE.LV_RES_BITMAP_get();
  public static readonly int LV_RES_STRING = C4dApiPINVOKE.LV_RES_STRING_get();
  public static readonly int LV_RES_VECTOR = C4dApiPINVOKE.LV_RES_VECTOR_get();
  public static readonly int LV_RES_NIL = C4dApiPINVOKE.LV_RES_NIL_get();
  public static readonly int LV__ = C4dApiPINVOKE.LV___get();

  public static readonly int NEWPARSERERROR_BADSTRING = C4dApiPINVOKE.NEWPARSERERROR_BADSTRING_get();
  public static readonly int NEWPARSERERROR_BADEXECUTION = C4dApiPINVOKE.NEWPARSERERROR_BADEXECUTION_get();
  public static readonly int NEWPARSERERROR_MEMORYERROR = C4dApiPINVOKE.NEWPARSERERROR_MEMORYERROR_get();
  public static readonly int NEWPARSERERROR_NUMBERERROR = C4dApiPINVOKE.NEWPARSERERROR_NUMBERERROR_get();
  public static readonly int UNIT_NONE = C4dApiPINVOKE.UNIT_NONE_get();
  public static readonly int UNIT_KM = C4dApiPINVOKE.UNIT_KM_get();
  public static readonly int UNIT_M = C4dApiPINVOKE.UNIT_M_get();
  public static readonly int UNIT_CM = C4dApiPINVOKE.UNIT_CM_get();
  public static readonly int UNIT_MM = C4dApiPINVOKE.UNIT_MM_get();
  public static readonly int UNIT_UM = C4dApiPINVOKE.UNIT_UM_get();
  public static readonly int UNIT_NM = C4dApiPINVOKE.UNIT_NM_get();
  public static readonly int UNIT_MILE = C4dApiPINVOKE.UNIT_MILE_get();
  public static readonly int UNIT_YARD = C4dApiPINVOKE.UNIT_YARD_get();
  public static readonly int UNIT_FEET = C4dApiPINVOKE.UNIT_FEET_get();
  public static readonly int UNIT_INCH = C4dApiPINVOKE.UNIT_INCH_get();
  public static readonly int ANGLE_DEG = C4dApiPINVOKE.ANGLE_DEG_get();
  public static readonly int ANGLE_RAD = C4dApiPINVOKE.ANGLE_RAD_get();
  public static readonly char COREMSG_CINEMA = C4dApiPINVOKE.COREMSG_CINEMA_get();
  public static readonly char COREMSG_CINEMA_GETMACHINEFEATURES = C4dApiPINVOKE.COREMSG_CINEMA_GETMACHINEFEATURES_get();
  public static readonly int OPENGL_SUPPORT_DUALPLANE_ARB = C4dApiPINVOKE.OPENGL_SUPPORT_DUALPLANE_ARB_get();
  public static readonly int OPENGL_SUPPORT_DUALPLANE_KTX = C4dApiPINVOKE.OPENGL_SUPPORT_DUALPLANE_KTX_get();
  public static readonly int OPENGL_EXTENSION_STRING = C4dApiPINVOKE.OPENGL_EXTENSION_STRING_get();
  public static readonly int OPENGL_SUPPORT_GL_EXT_SEPARATE_SPECULAR_COLOR = C4dApiPINVOKE.OPENGL_SUPPORT_GL_EXT_SEPARATE_SPECULAR_COLOR_get();
  public static readonly int OPENGL_SUPPORT_ENHANCED = C4dApiPINVOKE.OPENGL_SUPPORT_ENHANCED_get();
  public static readonly int OPENGL_RENDERER_NAME = C4dApiPINVOKE.OPENGL_RENDERER_NAME_get();
  public static readonly int OPENGL_VERSION_STRING = C4dApiPINVOKE.OPENGL_VERSION_STRING_get();
  public static readonly int OPENGL_VENDOR_NUM = C4dApiPINVOKE.OPENGL_VENDOR_NUM_get();
  public static readonly int OPENGL_VENDOR_UNKNOWN = C4dApiPINVOKE.OPENGL_VENDOR_UNKNOWN_get();
  public static readonly int OPENGL_VENDOR_NVIDIA = C4dApiPINVOKE.OPENGL_VENDOR_NVIDIA_get();
  public static readonly int OPENGL_VENDOR_ATI = C4dApiPINVOKE.OPENGL_VENDOR_ATI_get();
  public static readonly int OPENGL_VENDOR_INTEL = C4dApiPINVOKE.OPENGL_VENDOR_INTEL_get();
  public static readonly int OPENGL_VENDOR_NAME = C4dApiPINVOKE.OPENGL_VENDOR_NAME_get();
  public static readonly int OPENGL_SHADING_LANGUAGE_VERSION_STRING = C4dApiPINVOKE.OPENGL_SHADING_LANGUAGE_VERSION_STRING_get();
  public static readonly int OPENGL_VERTEXBUFFER_OBJECT = C4dApiPINVOKE.OPENGL_VERTEXBUFFER_OBJECT_get();
  public static readonly int OPENGL_FRAMEBUFFER_OBJECT = C4dApiPINVOKE.OPENGL_FRAMEBUFFER_OBJECT_get();
  public static readonly int OPENGL_MULTITEXTURE = C4dApiPINVOKE.OPENGL_MULTITEXTURE_get();
  public static readonly int OPENGL_MAX_2DTEXTURE_SIZE = C4dApiPINVOKE.OPENGL_MAX_2DTEXTURE_SIZE_get();
  public static readonly int OPENGL_MAX_3DTEXTURE_SIZE = C4dApiPINVOKE.OPENGL_MAX_3DTEXTURE_SIZE_get();
  public static readonly int OPENGL_MAX_TEXCOORD = C4dApiPINVOKE.OPENGL_MAX_TEXCOORD_get();
  public static readonly int OPENGL_MAX_TEX_IMAGE_UNITS_VERTEX = C4dApiPINVOKE.OPENGL_MAX_TEX_IMAGE_UNITS_VERTEX_get();
  public static readonly int OPENGL_MAX_TEX_IMAGE_UNITS_FRAGMENT = C4dApiPINVOKE.OPENGL_MAX_TEX_IMAGE_UNITS_FRAGMENT_get();
  public static readonly int OPENGL_MAX_VP_INSTRUCTIONS = C4dApiPINVOKE.OPENGL_MAX_VP_INSTRUCTIONS_get();
  public static readonly int OPENGL_MAX_FP_INSTRUCTIONS = C4dApiPINVOKE.OPENGL_MAX_FP_INSTRUCTIONS_get();
  public static readonly int OPENGL_FLOATINGPOINT_TEXTURE = C4dApiPINVOKE.OPENGL_FLOATINGPOINT_TEXTURE_get();
  public static readonly int OPENGL_NONPOWEROF2_TEXTURE = C4dApiPINVOKE.OPENGL_NONPOWEROF2_TEXTURE_get();
  public static readonly int OPENGL_DEPTH_TEXTURE = C4dApiPINVOKE.OPENGL_DEPTH_TEXTURE_get();
  public static readonly int OPENGL_CG_TOOLKIT = C4dApiPINVOKE.OPENGL_CG_TOOLKIT_get();
  public static readonly int OPENGL_MAX_TEXTURE_INDIRECTIONS = C4dApiPINVOKE.OPENGL_MAX_TEXTURE_INDIRECTIONS_get();
  public static readonly int OPENGL_CG_LATEST_VERTEX_PROFILE = C4dApiPINVOKE.OPENGL_CG_LATEST_VERTEX_PROFILE_get();
  public static readonly int OPENGL_CG_LATEST_FRAGMENT_PROFILE = C4dApiPINVOKE.OPENGL_CG_LATEST_FRAGMENT_PROFILE_get();
  public static readonly int OPENGL_CG_LATEST_VERTEX_PROFILE_NAME = C4dApiPINVOKE.OPENGL_CG_LATEST_VERTEX_PROFILE_NAME_get();
  public static readonly int OPENGL_CG_LATEST_FRAGMENT_PROFILE_NAME = C4dApiPINVOKE.OPENGL_CG_LATEST_FRAGMENT_PROFILE_NAME_get();
  public static readonly int OPENGL_DRIVER_VERSION_STRING = C4dApiPINVOKE.OPENGL_DRIVER_VERSION_STRING_get();
  public static readonly int OPENGL_CG_VERSION_STRING = C4dApiPINVOKE.OPENGL_CG_VERSION_STRING_get();
  public static readonly int OPENGL_FBO_Z_DEPTH = C4dApiPINVOKE.OPENGL_FBO_Z_DEPTH_get();
  public static readonly int OPENGL_FRAMEBUFFER_OBJECT_MULTISAMPLE = C4dApiPINVOKE.OPENGL_FRAMEBUFFER_OBJECT_MULTISAMPLE_get();
  public static readonly int OPENGL_MAX_ELEMENT_VERTICES = C4dApiPINVOKE.OPENGL_MAX_ELEMENT_VERTICES_get();
  public static readonly int OPENGL_MAX_ELEMENT_INDICES = C4dApiPINVOKE.OPENGL_MAX_ELEMENT_INDICES_get();
  public static readonly int OPENGL_MAX_TEX_IMAGE_UNITS_GEOMETRY = C4dApiPINVOKE.OPENGL_MAX_TEX_IMAGE_UNITS_GEOMETRY_get();
  public static readonly int OPENGL_CG_LATEST_GEOMETRY_PROFILE = C4dApiPINVOKE.OPENGL_CG_LATEST_GEOMETRY_PROFILE_get();
  public static readonly int OPENGL_CG_LATEST_GEOMETRY_PROFILE_NAME = C4dApiPINVOKE.OPENGL_CG_LATEST_GEOMETRY_PROFILE_NAME_get();
  public static readonly int OPENGL_VERSION_INT = C4dApiPINVOKE.OPENGL_VERSION_INT_get();
  public static readonly int OPENGL_GLSL_VERSION_INT = C4dApiPINVOKE.OPENGL_GLSL_VERSION_INT_get();
  public static readonly int OPENGL_RENDER_TO_FP16_TEXTURE = C4dApiPINVOKE.OPENGL_RENDER_TO_FP16_TEXTURE_get();
  public static readonly int OPENGL_RENDER_TO_FP32_TEXTURE = C4dApiPINVOKE.OPENGL_RENDER_TO_FP32_TEXTURE_get();
  public static readonly int OPENGL_STEREO_BUFFER = C4dApiPINVOKE.OPENGL_STEREO_BUFFER_get();
  public static readonly int OPENGL_DRIVER_OUTDATED = C4dApiPINVOKE.OPENGL_DRIVER_OUTDATED_get();
  public static readonly int MACHINEINFO_OSTYPE = C4dApiPINVOKE.MACHINEINFO_OSTYPE_get();
  public static readonly int MACHINEINFO_OSVERSION = C4dApiPINVOKE.MACHINEINFO_OSVERSION_get();
  public static readonly int MACHINEINFO_PROCESSORTYPE = C4dApiPINVOKE.MACHINEINFO_PROCESSORTYPE_get();
  public static readonly int MACHINEINFO_PROCESSORNAME = C4dApiPINVOKE.MACHINEINFO_PROCESSORNAME_get();
  public static readonly int MACHINEINFO_PROCESSORFEATURES = C4dApiPINVOKE.MACHINEINFO_PROCESSORFEATURES_get();
  public static readonly int MACHINEINFO_NUMBEROFPROCESSORS = C4dApiPINVOKE.MACHINEINFO_NUMBEROFPROCESSORS_get();
  public static readonly int MACHINEINFO_MACHINEMODEL = C4dApiPINVOKE.MACHINEINFO_MACHINEMODEL_get();
  public static readonly int MACHINEINFO_COMPUTERNAME = C4dApiPINVOKE.MACHINEINFO_COMPUTERNAME_get();
  public static readonly int MACHINEINFO_USERNAME = C4dApiPINVOKE.MACHINEINFO_USERNAME_get();
  public static readonly int MACHINEINFO_PROCESSORSPEED_MHZ = C4dApiPINVOKE.MACHINEINFO_PROCESSORSPEED_MHZ_get();
  public static readonly int MACHINEINFO_C4DBUILDID = C4dApiPINVOKE.MACHINEINFO_C4DBUILDID_get();
  public static readonly int MACHINEINFO_C4DTYPE = C4dApiPINVOKE.MACHINEINFO_C4DTYPE_get();
  public static readonly int MACHINEINFO_PROCESSORHTCOUNT = C4dApiPINVOKE.MACHINEINFO_PROCESSORHTCOUNT_get();
  public static readonly int MACHINEINFO_PHYSICAL_RAM_SIZE = C4dApiPINVOKE.MACHINEINFO_PHYSICAL_RAM_SIZE_get();
  public static readonly int MACHINEINFO_LOADEDPLUGINS = C4dApiPINVOKE.MACHINEINFO_LOADEDPLUGINS_get();
  public static readonly int C4D_MEMORY_STAT_MEMORY_INUSE = C4dApiPINVOKE.C4D_MEMORY_STAT_MEMORY_INUSE_get();
  public static readonly int C4D_MEMORY_STAT_MEMORY_PEAK = C4dApiPINVOKE.C4D_MEMORY_STAT_MEMORY_PEAK_get();
  public static readonly int C4D_MEMORY_STAT_NO_OF_ALLOCATIONS_TOTAL = C4dApiPINVOKE.C4D_MEMORY_STAT_NO_OF_ALLOCATIONS_TOTAL_get();
  public static readonly int C4D_MEMORY_STAT_NO_OF_ALLOCATIONS_CURRENT = C4dApiPINVOKE.C4D_MEMORY_STAT_NO_OF_ALLOCATIONS_CURRENT_get();
  public static readonly int C4D_MEMORY_STAT_EOGL_TEXBUFFER = C4dApiPINVOKE.C4D_MEMORY_STAT_EOGL_TEXBUFFER_get();
  public static readonly int C4D_MEMORY_STAT_EOGL_VERTEXBUFFER = C4dApiPINVOKE.C4D_MEMORY_STAT_EOGL_VERTEXBUFFER_get();
  public static readonly int C4D_MEMORY_STAT_LOWMEMCNT = C4dApiPINVOKE.C4D_MEMORY_STAT_LOWMEMCNT_get();
  public static readonly int C4D_MEMORY_STAT_EOGL_VERTEXBUFFER_CNT = C4dApiPINVOKE.C4D_MEMORY_STAT_EOGL_VERTEXBUFFER_CNT_get();
  public static readonly int C4D_MEMORY_STAT_EOGL_TEXTUREBUFFER_CNT = C4dApiPINVOKE.C4D_MEMORY_STAT_EOGL_TEXTUREBUFFER_CNT_get();
  public static readonly int C4D_MEMORY_STAT_OPENGL_TOTAL = C4dApiPINVOKE.C4D_MEMORY_STAT_OPENGL_TOTAL_get();
  public static readonly int C4D_MEMORY_STAT_OPENGL_FREE = C4dApiPINVOKE.C4D_MEMORY_STAT_OPENGL_FREE_get();
  public static readonly int POPUPEDITTEXTCALLBACK_TEXTCHANGED = C4dApiPINVOKE.POPUPEDITTEXTCALLBACK_TEXTCHANGED_get();
  public static readonly int POPUPEDITTEXTCALLBACK_CLOSED = C4dApiPINVOKE.POPUPEDITTEXTCALLBACK_CLOSED_get();
  public static readonly int POPUPEDITTEXTCALLBACK_CANCELED = C4dApiPINVOKE.POPUPEDITTEXTCALLBACK_CANCELED_get();
  public static readonly int POPUPEDITTEXTCALLBACK_CURSOR_UP = C4dApiPINVOKE.POPUPEDITTEXTCALLBACK_CURSOR_UP_get();
  public static readonly int POPUPEDITTEXTCALLBACK_CURSOR_DOWN = C4dApiPINVOKE.POPUPEDITTEXTCALLBACK_CURSOR_DOWN_get();
  public static readonly int SENDMAIL_SENDDIRECTLY = C4dApiPINVOKE.SENDMAIL_SENDDIRECTLY_get();
  public static readonly int SHORTCUT_PLUGINID = C4dApiPINVOKE.SHORTCUT_PLUGINID_get();
  public static readonly int SHORTCUT_ADDRESS = C4dApiPINVOKE.SHORTCUT_ADDRESS_get();
  public static readonly int SHORTCUT_OPTIONMODE = C4dApiPINVOKE.SHORTCUT_OPTIONMODE_get();
  public static readonly int CLIPBOARDOWNER_BODYPAINT = C4dApiPINVOKE.CLIPBOARDOWNER_BODYPAINT_get();
  public static readonly int CLIPBOARDOWNER_PICTUREVIEWER = C4dApiPINVOKE.CLIPBOARDOWNER_PICTUREVIEWER_get();
  public static readonly int ID_USERDATA = C4dApiPINVOKE.ID_USERDATA_get();
  public static readonly char BOOL_PAGEMODE = C4dApiPINVOKE.BOOL_PAGEMODE_get();
  public static readonly int DTYPE_NONE = C4dApiPINVOKE.DTYPE_NONE_get();
  public static readonly int DTYPE_CHILDREN = C4dApiPINVOKE.DTYPE_CHILDREN_get();
  public static readonly int DTYPE_GROUP = C4dApiPINVOKE.DTYPE_GROUP_get();
  public static readonly int DTYPE_COLOR = C4dApiPINVOKE.DTYPE_COLOR_get();
  public static readonly int DTYPE_SUBCONTAINER = C4dApiPINVOKE.DTYPE_SUBCONTAINER_get();
  public static readonly int DTYPE_MULTIPLEDATA = C4dApiPINVOKE.DTYPE_MULTIPLEDATA_get();
  public static readonly int DTYPE_TEXTURE = C4dApiPINVOKE.DTYPE_TEXTURE_get();
  public static readonly int DTYPE_BUTTON = C4dApiPINVOKE.DTYPE_BUTTON_get();
  public static readonly int DTYPE_DYNAMIC = C4dApiPINVOKE.DTYPE_DYNAMIC_get();
  public static readonly int DTYPE_SEPARATOR = C4dApiPINVOKE.DTYPE_SEPARATOR_get();
  public static readonly int DTYPE_STATICTEXT = C4dApiPINVOKE.DTYPE_STATICTEXT_get();
  public static readonly int DTYPE_POPUP = C4dApiPINVOKE.DTYPE_POPUP_get();
  public static readonly int DTYPE_LONG = C4dApiPINVOKE.DTYPE_LONG_get();
  public static readonly int DTYPE_REAL = C4dApiPINVOKE.DTYPE_REAL_get();
  public static readonly int DTYPE_TIME = C4dApiPINVOKE.DTYPE_TIME_get();
  public static readonly int DTYPE_VECTOR = C4dApiPINVOKE.DTYPE_VECTOR_get();
  public static readonly int DTYPE_MATRIX = C4dApiPINVOKE.DTYPE_MATRIX_get();
  public static readonly int DTYPE_STRING = C4dApiPINVOKE.DTYPE_STRING_get();
  public static readonly int DTYPE_FILENAME = C4dApiPINVOKE.DTYPE_FILENAME_get();
  public static readonly int DTYPE_BASELISTLINK = C4dApiPINVOKE.DTYPE_BASELISTLINK_get();
  public static readonly int DTYPE_BOOL = C4dApiPINVOKE.DTYPE_BOOL_get();
  public static readonly int DTYPE_NORMAL = C4dApiPINVOKE.DTYPE_NORMAL_get();
  public static readonly int DESC_NAME = C4dApiPINVOKE.DESC_NAME_get();
  public static readonly int DESC_SHORT_NAME = C4dApiPINVOKE.DESC_SHORT_NAME_get();
  public static readonly int DESC_VERSION = C4dApiPINVOKE.DESC_VERSION_get();
  public static readonly int DESC_VERSION_DEMO = C4dApiPINVOKE.DESC_VERSION_DEMO_get();
  public static readonly int DESC_VERSION_XL = C4dApiPINVOKE.DESC_VERSION_XL_get();
  public static readonly int DESC_VERSION_ALL = C4dApiPINVOKE.DESC_VERSION_ALL_get();
  public static readonly int DESC_CHILDREN = C4dApiPINVOKE.DESC_CHILDREN_get();
  public static readonly int DESC_MIN = C4dApiPINVOKE.DESC_MIN_get();
  public static readonly int DESC_MAX = C4dApiPINVOKE.DESC_MAX_get();
  public static readonly int DESC_MINEX = C4dApiPINVOKE.DESC_MINEX_get();
  public static readonly int DESC_MAXEX = C4dApiPINVOKE.DESC_MAXEX_get();
  public static readonly int DESC_STEP = C4dApiPINVOKE.DESC_STEP_get();
  public static readonly int DESC_ANIMATE = C4dApiPINVOKE.DESC_ANIMATE_get();
  public static readonly int DESC_ANIMATE_OFF = C4dApiPINVOKE.DESC_ANIMATE_OFF_get();
  public static readonly int DESC_ANIMATE_ON = C4dApiPINVOKE.DESC_ANIMATE_ON_get();
  public static readonly int DESC_ANIMATE_MIX = C4dApiPINVOKE.DESC_ANIMATE_MIX_get();
  public static readonly int DESC_ASKOBJECT = C4dApiPINVOKE.DESC_ASKOBJECT_get();
  public static readonly int DESC_UNIT = C4dApiPINVOKE.DESC_UNIT_get();
  public static readonly int DESC_UNIT_REAL = C4dApiPINVOKE.DESC_UNIT_REAL_get();
  public static readonly int DESC_UNIT_LONG = C4dApiPINVOKE.DESC_UNIT_LONG_get();
  public static readonly int DESC_UNIT_PERCENT = C4dApiPINVOKE.DESC_UNIT_PERCENT_get();
  public static readonly int DESC_UNIT_DEGREE = C4dApiPINVOKE.DESC_UNIT_DEGREE_get();
  public static readonly int DESC_UNIT_METER = C4dApiPINVOKE.DESC_UNIT_METER_get();
  public static readonly int DESC_UNIT_TIME = C4dApiPINVOKE.DESC_UNIT_TIME_get();
  public static readonly int DESC_PARENTGROUP = C4dApiPINVOKE.DESC_PARENTGROUP_get();
  public static readonly int DESC_CYCLE = C4dApiPINVOKE.DESC_CYCLE_get();
  public static readonly int DESC_HIDE = C4dApiPINVOKE.DESC_HIDE_get();
  public static readonly int DESC_DEFAULT = C4dApiPINVOKE.DESC_DEFAULT_get();
  public static readonly int DESC_ACCEPT = C4dApiPINVOKE.DESC_ACCEPT_get();
  public static readonly int DESC_SEPARATORLINE = C4dApiPINVOKE.DESC_SEPARATORLINE_get();
  public static readonly int DESC_REFUSE = C4dApiPINVOKE.DESC_REFUSE_get();
  public static readonly int DESC_PARENTID = C4dApiPINVOKE.DESC_PARENTID_get();
  public static readonly int DESC_CUSTOMGUI = C4dApiPINVOKE.DESC_CUSTOMGUI_get();
  public static readonly int DESC_COLUMNS = C4dApiPINVOKE.DESC_COLUMNS_get();
  public static readonly int DESC_LAYOUTGROUP = C4dApiPINVOKE.DESC_LAYOUTGROUP_get();
  public static readonly int DESC_REMOVEABLE = C4dApiPINVOKE.DESC_REMOVEABLE_get();
  public static readonly int DESC_GUIOPEN = C4dApiPINVOKE.DESC_GUIOPEN_get();
  public static readonly int DESC_EDITABLE = C4dApiPINVOKE.DESC_EDITABLE_get();
  public static readonly int DESC_MINSLIDER = C4dApiPINVOKE.DESC_MINSLIDER_get();
  public static readonly int DESC_MAXSLIDER = C4dApiPINVOKE.DESC_MAXSLIDER_get();
  public static readonly int DESC_GROUPSCALEV = C4dApiPINVOKE.DESC_GROUPSCALEV_get();
  public static readonly int DESC_SCALEH = C4dApiPINVOKE.DESC_SCALEH_get();
  public static readonly int DESC_LAYOUTVERSION = C4dApiPINVOKE.DESC_LAYOUTVERSION_get();
  public static readonly int DESC_ALIGNLEFT = C4dApiPINVOKE.DESC_ALIGNLEFT_get();
  public static readonly int DESC_FITH = C4dApiPINVOKE.DESC_FITH_get();
  public static readonly int DESC_NEWLINE = C4dApiPINVOKE.DESC_NEWLINE_get();
  public static readonly int DESC_TITLEBAR = C4dApiPINVOKE.DESC_TITLEBAR_get();
  public static readonly int DESC_CYCLEICONS = C4dApiPINVOKE.DESC_CYCLEICONS_get();
  public static readonly int DESC_CYCLESYMBOLS = C4dApiPINVOKE.DESC_CYCLESYMBOLS_get();
  public static readonly int DESC_PARENT_COLLAPSE = C4dApiPINVOKE.DESC_PARENT_COLLAPSE_get();
  public static readonly int DESC_FORBID_INLINE_FOLDING = C4dApiPINVOKE.DESC_FORBID_INLINE_FOLDING_get();
  public static readonly int DESC_FORBID_SCALING = C4dApiPINVOKE.DESC_FORBID_SCALING_get();
  public static readonly int DESC_INPORT = C4dApiPINVOKE.DESC_INPORT_get();
  public static readonly int DESC_OUTPORT = C4dApiPINVOKE.DESC_OUTPORT_get();
  public static readonly int DESC_STATICPORT = C4dApiPINVOKE.DESC_STATICPORT_get();
  public static readonly int DESC_NEEDCONNECTION = C4dApiPINVOKE.DESC_NEEDCONNECTION_get();
  public static readonly int DESC_MULTIPLE = C4dApiPINVOKE.DESC_MULTIPLE_get();
  public static readonly int DESC_PORTONLY = C4dApiPINVOKE.DESC_PORTONLY_get();
  public static readonly int DESC_CREATEPORT = C4dApiPINVOKE.DESC_CREATEPORT_get();
  public static readonly int DESC_PORTSMIN = C4dApiPINVOKE.DESC_PORTSMIN_get();
  public static readonly int DESC_PORTSMAX = C4dApiPINVOKE.DESC_PORTSMAX_get();
  public static readonly int DESC_NOTMOVABLE = C4dApiPINVOKE.DESC_NOTMOVABLE_get();
  public static readonly int DESC_EDITPORT = C4dApiPINVOKE.DESC_EDITPORT_get();
  public static readonly int DESC_ITERATOR = C4dApiPINVOKE.DESC_ITERATOR_get();
  public static readonly int DESC_PARENTMSG = C4dApiPINVOKE.DESC_PARENTMSG_get();
  public static readonly int DESC_MATEDNOTEXT = C4dApiPINVOKE.DESC_MATEDNOTEXT_get();
  public static readonly int DESC_COLUMNSMATED = C4dApiPINVOKE.DESC_COLUMNSMATED_get();
  public static readonly int DESC_SHADERLINKFLAG = C4dApiPINVOKE.DESC_SHADERLINKFLAG_get();
  public static readonly int DESC_NOGUISWITCH = C4dApiPINVOKE.DESC_NOGUISWITCH_get();
  public static readonly int DESC_TEMPDESCID = C4dApiPINVOKE.DESC_TEMPDESCID_get();
  public static readonly int DESC_IDENT = C4dApiPINVOKE.DESC_IDENT_get();
  public static readonly int DESC_ = C4dApiPINVOKE.DESC__get();

  public static readonly int CUSTOMGUI_REALSLIDER = C4dApiPINVOKE.CUSTOMGUI_REALSLIDER_get();
  public static readonly int CUSTOMGUI_REALSLIDERONLY = C4dApiPINVOKE.CUSTOMGUI_REALSLIDERONLY_get();
  public static readonly int CUSTOMGUI_STRINGMULTI = C4dApiPINVOKE.CUSTOMGUI_STRINGMULTI_get();
  public static readonly int CUSTOMGUI_CYCLE = C4dApiPINVOKE.CUSTOMGUI_CYCLE_get();
  public static readonly int CUSTOMGUI_CYCLEBUTTON = C4dApiPINVOKE.CUSTOMGUI_CYCLEBUTTON_get();
  public static readonly int CUSTOMGUI_LONGSLIDER = C4dApiPINVOKE.CUSTOMGUI_LONGSLIDER_get();
  public static readonly int CUSTOMGUI_COLOR = C4dApiPINVOKE.CUSTOMGUI_COLOR_get();
  public static readonly int CUSTOMGUI_SUBDESCRIPTION = C4dApiPINVOKE.CUSTOMGUI_SUBDESCRIPTION_get();
  public static readonly int CUSTOMGUI_PROGRESSBAR = C4dApiPINVOKE.CUSTOMGUI_PROGRESSBAR_get();
  public static readonly int CUSTOMDATATYPE_DESCID = C4dApiPINVOKE.CUSTOMDATATYPE_DESCID_get();
  public static readonly int VECTOR_X = C4dApiPINVOKE.VECTOR_X_get();
  public static readonly int VECTOR_Y = C4dApiPINVOKE.VECTOR_Y_get();
  public static readonly int VECTOR_Z = C4dApiPINVOKE.VECTOR_Z_get();

  public static readonly int COLOR_R = C4dApiPINVOKE.COLOR_R_get();
  public static readonly int COLOR_G = C4dApiPINVOKE.COLOR_G_get();
  public static readonly int COLOR_B = C4dApiPINVOKE.COLOR_B_get();

  public static readonly int LIBRARY_DESCRIPTIONLIB = C4dApiPINVOKE.LIBRARY_DESCRIPTIONLIB_get();
  public static readonly int COLORMODE_MAXCOLOR = C4dApiPINVOKE.COLORMODE_MAXCOLOR_get();
  public static readonly int COLORBYTES_GRAY = C4dApiPINVOKE.COLORBYTES_GRAY_get();
  public static readonly int COLORBYTES_AGRAY = C4dApiPINVOKE.COLORBYTES_AGRAY_get();
  public static readonly int COLORBYTES_RGB = C4dApiPINVOKE.COLORBYTES_RGB_get();
  public static readonly int COLORBYTES_ARGB = C4dApiPINVOKE.COLORBYTES_ARGB_get();
  public static readonly int COLORBYTES_CMYK = C4dApiPINVOKE.COLORBYTES_CMYK_get();
  public static readonly int COLORBYTES_ACMYK = C4dApiPINVOKE.COLORBYTES_ACMYK_get();
  public static readonly int BASEBITMAP_DATA_NAME = C4dApiPINVOKE.BASEBITMAP_DATA_NAME_get();
  public static readonly int BASEBITMAP_DATA_PROGRESS_TIME = C4dApiPINVOKE.BASEBITMAP_DATA_PROGRESS_TIME_get();
  public static readonly int BASEBITMAP_DATA_PROGRESS_ACTION = C4dApiPINVOKE.BASEBITMAP_DATA_PROGRESS_ACTION_get();
  public static readonly int BASEBITMAP_DATA_PROGRESS_FRAME = C4dApiPINVOKE.BASEBITMAP_DATA_PROGRESS_FRAME_get();
  public static readonly int BASEBITMAP_DATA_PROGRESS_SEQ = C4dApiPINVOKE.BASEBITMAP_DATA_PROGRESS_SEQ_get();
  public static readonly int BASEBITMAP_DATA_PROGRESS_FNUM = C4dApiPINVOKE.BASEBITMAP_DATA_PROGRESS_FNUM_get();
  public static readonly int BASEBITMAP_DATA_DRAW_REGIONS = C4dApiPINVOKE.BASEBITMAP_DATA_DRAW_REGIONS_get();
  public static readonly int BASEBITMAP_DATA_SPINMODE = C4dApiPINVOKE.BASEBITMAP_DATA_SPINMODE_get();
  public static readonly int BASEBITMAP_DATA_HOLDTIME = C4dApiPINVOKE.BASEBITMAP_DATA_HOLDTIME_get();
  public static readonly int BASEBITMAP_DATA_STARTTIME = C4dApiPINVOKE.BASEBITMAP_DATA_STARTTIME_get();
  public static readonly int BASEBITMAP_DATA_PROGRESS_PHASE = C4dApiPINVOKE.BASEBITMAP_DATA_PROGRESS_PHASE_get();
  public static readonly int BASEBITMAP_DATA_FRAMETIME = C4dApiPINVOKE.BASEBITMAP_DATA_FRAMETIME_get();
  public static readonly int BASEBITMAP_DATA_TEXTURE_ERROR = C4dApiPINVOKE.BASEBITMAP_DATA_TEXTURE_ERROR_get();
  public static readonly int CUSTOMDATATYPE_COLORPROFILE = C4dApiPINVOKE.CUSTOMDATATYPE_COLORPROFILE_get();
  public static readonly int CUSTOMGUI_COLORPROFILE = C4dApiPINVOKE.CUSTOMGUI_COLORPROFILE_get();
  public static readonly int DA_NIL = C4dApiPINVOKE.DA_NIL_get();
  public static readonly int DA_VOID = C4dApiPINVOKE.DA_VOID_get();
  public static readonly int DA_LONG = C4dApiPINVOKE.DA_LONG_get();
  public static readonly int DA_REAL = C4dApiPINVOKE.DA_REAL_get();
  public static readonly int DA_TIME = C4dApiPINVOKE.DA_TIME_get();
  public static readonly int DA_VECTOR = C4dApiPINVOKE.DA_VECTOR_get();
  public static readonly int DA_MATRIX = C4dApiPINVOKE.DA_MATRIX_get();
  public static readonly int DA_LLONG = C4dApiPINVOKE.DA_LLONG_get();
  public static readonly int DA_BYTEARRAY = C4dApiPINVOKE.DA_BYTEARRAY_get();
  public static readonly int DA_STRING = C4dApiPINVOKE.DA_STRING_get();
  public static readonly int DA_FILENAME = C4dApiPINVOKE.DA_FILENAME_get();
  public static readonly int DA_CONTAINER = C4dApiPINVOKE.DA_CONTAINER_get();
  public static readonly int DA_ALIASLINK = C4dApiPINVOKE.DA_ALIASLINK_get();
  public static readonly int DA_MARKER = C4dApiPINVOKE.DA_MARKER_get();
  public static readonly int DA_MISSINGPLUG = C4dApiPINVOKE.DA_MISSINGPLUG_get();
  public static readonly int DA_CUSTOMDATATYPE = C4dApiPINVOKE.DA_CUSTOMDATATYPE_get();
  public static readonly int DA_END = C4dApiPINVOKE.DA_END_get();

  public static readonly int ID_BASEOBJECT_VISIBILITY_EDITOR = C4dApiPINVOKE.ID_BASEOBJECT_VISIBILITY_EDITOR_get();
  public static readonly int ID_BASEOBJECT_VISIBILITY_RENDER = C4dApiPINVOKE.ID_BASEOBJECT_VISIBILITY_RENDER_get();
  public static readonly int OBJECT_ON = C4dApiPINVOKE.OBJECT_ON_get();
  public static readonly int OBJECT_OFF = C4dApiPINVOKE.OBJECT_OFF_get();
  public static readonly int OBJECT_UNDEF = C4dApiPINVOKE.OBJECT_UNDEF_get();
  public static readonly int ID_BASEOBJECT_REL_POSITION = C4dApiPINVOKE.ID_BASEOBJECT_REL_POSITION_get();
  public static readonly int ID_BASEOBJECT_REL_ROTATION = C4dApiPINVOKE.ID_BASEOBJECT_REL_ROTATION_get();
  public static readonly int ID_BASEOBJECT_REL_SCALE = C4dApiPINVOKE.ID_BASEOBJECT_REL_SCALE_get();
  public static readonly int ID_BASEOBJECT_GENERATOR_FLAG = C4dApiPINVOKE.ID_BASEOBJECT_GENERATOR_FLAG_get();
  public static readonly int ID_BASEOBJECT_USECOLOR = C4dApiPINVOKE.ID_BASEOBJECT_USECOLOR_get();
  public static readonly int ID_BASEOBJECT_USECOLOR_OFF = C4dApiPINVOKE.ID_BASEOBJECT_USECOLOR_OFF_get();
  public static readonly int ID_BASEOBJECT_USECOLOR_AUTOMATIC = C4dApiPINVOKE.ID_BASEOBJECT_USECOLOR_AUTOMATIC_get();
  public static readonly int ID_BASEOBJECT_USECOLOR_ALWAYS = C4dApiPINVOKE.ID_BASEOBJECT_USECOLOR_ALWAYS_get();
  public static readonly int ID_BASEOBJECT_USECOLOR_LAYER = C4dApiPINVOKE.ID_BASEOBJECT_USECOLOR_LAYER_get();
  public static readonly int ID_BASEOBJECT_COLOR = C4dApiPINVOKE.ID_BASEOBJECT_COLOR_get();
  public static readonly int ID_BASEOBJECT_XRAY = C4dApiPINVOKE.ID_BASEOBJECT_XRAY_get();
  public static readonly int ID_BASEOBJECT_GLOBAL_POSITION = C4dApiPINVOKE.ID_BASEOBJECT_GLOBAL_POSITION_get();
  public static readonly int ID_BASEOBJECT_GLOBAL_ROTATION = C4dApiPINVOKE.ID_BASEOBJECT_GLOBAL_ROTATION_get();
  public static readonly int ID_BASEOBJECT_SHADEDWIRECOLOR = C4dApiPINVOKE.ID_BASEOBJECT_SHADEDWIRECOLOR_get();
  public static readonly int ID_BASEOBJECT_SHADEDWIRECOLORMODE = C4dApiPINVOKE.ID_BASEOBJECT_SHADEDWIRECOLORMODE_get();
  public static readonly int ID_BASEOBJECT_SHADEDWIRECOLORMODE_OFF = C4dApiPINVOKE.ID_BASEOBJECT_SHADEDWIRECOLORMODE_OFF_get();
  public static readonly int ID_BASEOBJECT_SHADEDWIRECOLORMODE_AUTO = C4dApiPINVOKE.ID_BASEOBJECT_SHADEDWIRECOLORMODE_AUTO_get();
  public static readonly int ID_BASEOBJECT_SHADEDWIRECOLORMODE_ALWAYS = C4dApiPINVOKE.ID_BASEOBJECT_SHADEDWIRECOLORMODE_ALWAYS_get();
  public static readonly int ID_BASEOBJECT_FROZEN_POSITION = C4dApiPINVOKE.ID_BASEOBJECT_FROZEN_POSITION_get();
  public static readonly int ID_BASEOBJECT_FROZEN_ROTATION = C4dApiPINVOKE.ID_BASEOBJECT_FROZEN_ROTATION_get();
  public static readonly int ID_BASEOBJECT_FROZEN_SCALE = C4dApiPINVOKE.ID_BASEOBJECT_FROZEN_SCALE_get();
  public static readonly int ID_BASEOBJECT_FREEZE = C4dApiPINVOKE.ID_BASEOBJECT_FREEZE_get();
  public static readonly int ID_BASEOBJECT_FROZEN_RESET = C4dApiPINVOKE.ID_BASEOBJECT_FROZEN_RESET_get();
  public static readonly int ID_BASEOBJECT_FREEZE_P = C4dApiPINVOKE.ID_BASEOBJECT_FREEZE_P_get();
  public static readonly int ID_BASEOBJECT_FREEZE_R = C4dApiPINVOKE.ID_BASEOBJECT_FREEZE_R_get();
  public static readonly int ID_BASEOBJECT_FREEZE_S = C4dApiPINVOKE.ID_BASEOBJECT_FREEZE_S_get();
  public static readonly int ID_BASEOBJECT_ABS_POSITION = C4dApiPINVOKE.ID_BASEOBJECT_ABS_POSITION_get();
  public static readonly int ID_BASEOBJECT_ABS_ROTATION = C4dApiPINVOKE.ID_BASEOBJECT_ABS_ROTATION_get();
  public static readonly int ID_BASEOBJECT_ABS_SCALE = C4dApiPINVOKE.ID_BASEOBJECT_ABS_SCALE_get();
  public static readonly int ID_BASEOBJECT_ROTATION_ORDER = C4dApiPINVOKE.ID_BASEOBJECT_ROTATION_ORDER_get();
  public static readonly int ID_BASEOBJECT_ROTATION_ORDER_YXZ = C4dApiPINVOKE.ID_BASEOBJECT_ROTATION_ORDER_YXZ_get();
  public static readonly int ID_BASEOBJECT_ROTATION_ORDER_YZX = C4dApiPINVOKE.ID_BASEOBJECT_ROTATION_ORDER_YZX_get();
  public static readonly int ID_BASEOBJECT_ROTATION_ORDER_ZYX = C4dApiPINVOKE.ID_BASEOBJECT_ROTATION_ORDER_ZYX_get();
  public static readonly int ID_BASEOBJECT_ROTATION_ORDER_ZXY = C4dApiPINVOKE.ID_BASEOBJECT_ROTATION_ORDER_ZXY_get();
  public static readonly int ID_BASEOBJECT_ROTATION_ORDER_XZY = C4dApiPINVOKE.ID_BASEOBJECT_ROTATION_ORDER_XZY_get();
  public static readonly int ID_BASEOBJECT_ROTATION_ORDER_XYZ = C4dApiPINVOKE.ID_BASEOBJECT_ROTATION_ORDER_XYZ_get();
  public static readonly int ID_BASEOBJECT_ROTATION_ORDER_HPB = C4dApiPINVOKE.ID_BASEOBJECT_ROTATION_ORDER_HPB_get();
  public static readonly int ID_BASEOBJECT_GROUP1 = C4dApiPINVOKE.ID_BASEOBJECT_GROUP1_get();
  public static readonly int ID_BASEOBJECT_GROUPVIS = C4dApiPINVOKE.ID_BASEOBJECT_GROUPVIS_get();
  public static readonly int ID_OBJECTPROPERTIES = C4dApiPINVOKE.ID_OBJECTPROPERTIES_get();
  public static readonly int ID_TAGLIST = C4dApiPINVOKE.ID_TAGLIST_get();
  public static readonly int ID_BASEOBJECT_FROZEN_COORDS = C4dApiPINVOKE.ID_BASEOBJECT_FROZEN_COORDS_get();
  public static readonly int ID_BASEOBJECT_DUMMY = C4dApiPINVOKE.ID_BASEOBJECT_DUMMY_get();

  public static readonly int MSG_REDIRECT_FLAG_PROCESSED = C4dApiPINVOKE.MSG_REDIRECT_FLAG_PROCESSED_get();
  public static readonly int MSG_POINTS_CHANGED = C4dApiPINVOKE.MSG_POINTS_CHANGED_get();
  public static readonly int MSG_POLYGONS_CHANGED = C4dApiPINVOKE.MSG_POLYGONS_CHANGED_get();
  public static readonly int MSG_UPDATE = C4dApiPINVOKE.MSG_UPDATE_get();
  public static readonly int MSG_SMALLUPDATE = C4dApiPINVOKE.MSG_SMALLUPDATE_get();
  public static readonly int MSG_CHANGE = C4dApiPINVOKE.MSG_CHANGE_get();
  public static readonly int MSG_BASECONTAINER = C4dApiPINVOKE.MSG_BASECONTAINER_get();
  public static readonly int MSG_SEGMENTS_CHANGED = C4dApiPINVOKE.MSG_SEGMENTS_CHANGED_get();
  public static readonly int MSG_FILTER = C4dApiPINVOKE.MSG_FILTER_get();
  public static readonly int MSG_TRANSFERGOALS = C4dApiPINVOKE.MSG_TRANSFERGOALS_get();
  public static readonly int MSG_DESCRIPTION_INITUNDO = C4dApiPINVOKE.MSG_DESCRIPTION_INITUNDO_get();
  public static readonly int MSG_DESCRIPTION_CHECKUPDATE = C4dApiPINVOKE.MSG_DESCRIPTION_CHECKUPDATE_get();
  public static readonly int MSG_DESCRIPTION_CHECKUPDATE_DOCUMENT = C4dApiPINVOKE.MSG_DESCRIPTION_CHECKUPDATE_DOCUMENT_get();
  public static readonly int MSG_DESCRIPTION_CHECKUPDATE_AUTOKEY = C4dApiPINVOKE.MSG_DESCRIPTION_CHECKUPDATE_AUTOKEY_get();
  public static readonly int MSG_DESCRIPTION_CHECKUPDATE_SYNC = C4dApiPINVOKE.MSG_DESCRIPTION_CHECKUPDATE_SYNC_get();
  public static readonly int MSG_DESCRIPTION_CHECKUPDATE_ANIMATE = C4dApiPINVOKE.MSG_DESCRIPTION_CHECKUPDATE_ANIMATE_get();
  public static readonly int MSG_DESCRIPTION_CHECKUPDATE_NOSCENEUPDATE = C4dApiPINVOKE.MSG_DESCRIPTION_CHECKUPDATE_NOSCENEUPDATE_get();
  public static readonly int MSG_DESCRIPTION_COMMAND = C4dApiPINVOKE.MSG_DESCRIPTION_COMMAND_get();
  public static readonly int MSG_DESCRIPTION_POPUP = C4dApiPINVOKE.MSG_DESCRIPTION_POPUP_get();
  public static readonly int MSG_DESCRIPTION_POSTSETPARAMETER = C4dApiPINVOKE.MSG_DESCRIPTION_POSTSETPARAMETER_get();
  public static readonly int MSG_DESCRIPTION_VALIDATE = C4dApiPINVOKE.MSG_DESCRIPTION_VALIDATE_get();
  public static readonly int MSG_EDIT = C4dApiPINVOKE.MSG_EDIT_get();
  public static readonly int MSG_MENUPREPARE = C4dApiPINVOKE.MSG_MENUPREPARE_get();
  public static readonly int MSG_RETRIEVEPRIVATEDATA = C4dApiPINVOKE.MSG_RETRIEVEPRIVATEDATA_get();
  public static readonly int MSG_DESCRIPTION_REMOVE_ENTRY = C4dApiPINVOKE.MSG_DESCRIPTION_REMOVE_ENTRY_get();
  public static readonly int MSG_DESCRIPTION_EDIT_ENTRY = C4dApiPINVOKE.MSG_DESCRIPTION_EDIT_ENTRY_get();
  public static readonly int MSG_DESCRIPTION_CHECKDRAGANDDROP = C4dApiPINVOKE.MSG_DESCRIPTION_CHECKDRAGANDDROP_get();
  public static readonly int MSG_DESCRIPTION_GETBITMAP = C4dApiPINVOKE.MSG_DESCRIPTION_GETBITMAP_get();
  public static readonly int MSG_DESCRIPTION_GETOBJECTS = C4dApiPINVOKE.MSG_DESCRIPTION_GETOBJECTS_get();
  public static readonly int MSG_DESCRIPTION_USERINTERACTION_END = C4dApiPINVOKE.MSG_DESCRIPTION_USERINTERACTION_END_get();
  public static readonly int MSG_DESCRIPTION_GETINLINEOBJECT = C4dApiPINVOKE.MSG_DESCRIPTION_GETINLINEOBJECT_get();
  public static readonly int MSG_MOVE_FINISHED = C4dApiPINVOKE.MSG_MOVE_FINISHED_get();
  public static readonly int MSG_MOVE_START = C4dApiPINVOKE.MSG_MOVE_START_get();
  public static readonly int MSG_EDITABLE_END = C4dApiPINVOKE.MSG_EDITABLE_END_get();
  public static readonly int MSG_GETCUSTOMICON = C4dApiPINVOKE.MSG_GETCUSTOMICON_get();
  public static readonly int MSG_MATERIALDRAGANDDROP = C4dApiPINVOKE.MSG_MATERIALDRAGANDDROP_get();
  public static readonly int MSG_DRAGANDDROP = C4dApiPINVOKE.MSG_DRAGANDDROP_get();
  public static readonly int MSG_INITIALCHANNEL = C4dApiPINVOKE.MSG_INITIALCHANNEL_get();
  public static readonly int MSG_PYTHON_RESET = C4dApiPINVOKE.MSG_PYTHON_RESET_get();
  public static readonly int MSG_DOCUMENTINFO = C4dApiPINVOKE.MSG_DOCUMENTINFO_get();
  public static readonly int MSG_DOCUMENTINFO_TYPE_SETACTIVE = C4dApiPINVOKE.MSG_DOCUMENTINFO_TYPE_SETACTIVE_get();
  public static readonly int MSG_DOCUMENTINFO_TYPE_LOAD = C4dApiPINVOKE.MSG_DOCUMENTINFO_TYPE_LOAD_get();
  public static readonly int MSG_DOCUMENTINFO_TYPE_MERGE = C4dApiPINVOKE.MSG_DOCUMENTINFO_TYPE_MERGE_get();
  public static readonly int MSG_DOCUMENTINFO_TYPE_BEFOREMERGE = C4dApiPINVOKE.MSG_DOCUMENTINFO_TYPE_BEFOREMERGE_get();
  public static readonly int MSG_DOCUMENTINFO_TYPE_SAVE_BEFORE = C4dApiPINVOKE.MSG_DOCUMENTINFO_TYPE_SAVE_BEFORE_get();
  public static readonly int MSG_DOCUMENTINFO_TYPE_SAVE_AFTER = C4dApiPINVOKE.MSG_DOCUMENTINFO_TYPE_SAVE_AFTER_get();
  public static readonly int MSG_DOCUMENTINFO_TYPE_SAVEPROJECT_BEFORE = C4dApiPINVOKE.MSG_DOCUMENTINFO_TYPE_SAVEPROJECT_BEFORE_get();
  public static readonly int MSG_DOCUMENTINFO_TYPE_SAVEPROJECT_AFTER = C4dApiPINVOKE.MSG_DOCUMENTINFO_TYPE_SAVEPROJECT_AFTER_get();
  public static readonly int MSG_DOCUMENTINFO_TYPE_REMOVE = C4dApiPINVOKE.MSG_DOCUMENTINFO_TYPE_REMOVE_get();
  public static readonly int MSG_DOCUMENTINFO_TYPE_TOOL_CHANGED = C4dApiPINVOKE.MSG_DOCUMENTINFO_TYPE_TOOL_CHANGED_get();
  public static readonly int MSG_DOCUMENTINFO_TYPE_OBJECT_INSERT = C4dApiPINVOKE.MSG_DOCUMENTINFO_TYPE_OBJECT_INSERT_get();
  public static readonly int MSG_DOCUMENTINFO_TYPE_TAG_INSERT = C4dApiPINVOKE.MSG_DOCUMENTINFO_TYPE_TAG_INSERT_get();
  public static readonly int MSG_DOCUMENTINFO_TYPE_MATERIAL_INSERT = C4dApiPINVOKE.MSG_DOCUMENTINFO_TYPE_MATERIAL_INSERT_get();
  public static readonly int MSG_DOCUMENTINFO_TYPE_UNDO = C4dApiPINVOKE.MSG_DOCUMENTINFO_TYPE_UNDO_get();
  public static readonly int MSG_DOCUMENTINFO_TYPE_REDO = C4dApiPINVOKE.MSG_DOCUMENTINFO_TYPE_REDO_get();
  public static readonly int MSG_DOCUMENTINFO_TYPE_PASTE = C4dApiPINVOKE.MSG_DOCUMENTINFO_TYPE_PASTE_get();
  public static readonly int MSG_DOCUMENTINFO_TYPE_COPY = C4dApiPINVOKE.MSG_DOCUMENTINFO_TYPE_COPY_get();
  public static readonly int MSG_DOCUMENTINFO_TYPE_LOAD_XREFS = C4dApiPINVOKE.MSG_DOCUMENTINFO_TYPE_LOAD_XREFS_get();
  public static readonly int MSG_DOCUMENTINFO_TYPE_MERGE_XREFS = C4dApiPINVOKE.MSG_DOCUMENTINFO_TYPE_MERGE_XREFS_get();
  public static readonly int MSG_DOCUMENTINFO_TYPE_XREFS_IMPORTED = C4dApiPINVOKE.MSG_DOCUMENTINFO_TYPE_XREFS_IMPORTED_get();
  public static readonly int MSG_GETSELECTION = C4dApiPINVOKE.MSG_GETSELECTION_get();
  public static readonly int MSG_REDIRECT = C4dApiPINVOKE.MSG_REDIRECT_get();
  public static readonly int MSG_TOOL_TRANSFORM = C4dApiPINVOKE.MSG_TOOL_TRANSFORM_get();
  public static readonly int MSG_GETACTIVEREDIRECT = C4dApiPINVOKE.MSG_GETACTIVEREDIRECT_get();
  public static readonly int MSG_MULTI_RENDERNOTIFICATION = C4dApiPINVOKE.MSG_MULTI_RENDERNOTIFICATION_get();
  public static readonly int MSG_MULTI_MARKMATERIALS = C4dApiPINVOKE.MSG_MULTI_MARKMATERIALS_get();
  public static readonly int MSG_MULTI_DOCUMENTCLONED = C4dApiPINVOKE.MSG_MULTI_DOCUMENTCLONED_get();
  public static readonly int MSG_MULTI_DOCUMENTIMPORTED = C4dApiPINVOKE.MSG_MULTI_DOCUMENTIMPORTED_get();
  public static readonly int MSG_MULTI_SETNEWMARKERS = C4dApiPINVOKE.MSG_MULTI_SETNEWMARKERS_get();
  public static readonly int MSG_MULTI_CLEARSUGGESTEDFOLDER = C4dApiPINVOKE.MSG_MULTI_CLEARSUGGESTEDFOLDER_get();
  public static readonly int MSG_TRANSLATE_POINTS = C4dApiPINVOKE.MSG_TRANSLATE_POINTS_get();
  public static readonly int MSG_TRANSLATE_POLYGONS = C4dApiPINVOKE.MSG_TRANSLATE_POLYGONS_get();
  public static readonly int MSG_TRANSLATE_NGONS = C4dApiPINVOKE.MSG_TRANSLATE_NGONS_get();
  public static readonly int MSG_TRANSLATE_SEGMENTS = C4dApiPINVOKE.MSG_TRANSLATE_SEGMENTS_get();
  public static readonly int MSG_PRETRANSLATE_POINTS = C4dApiPINVOKE.MSG_PRETRANSLATE_POINTS_get();
  public static readonly int MSG_PRETRANSLATE_POLYGONS = C4dApiPINVOKE.MSG_PRETRANSLATE_POLYGONS_get();
  public static readonly int MSG_PRETRANSLATE_NGONS = C4dApiPINVOKE.MSG_PRETRANSLATE_NGONS_get();
  public static readonly int MSG_PRETRANSLATE_SEGMENTS = C4dApiPINVOKE.MSG_PRETRANSLATE_SEGMENTS_get();
  public static readonly int MSG_UPDATE_NGONS = C4dApiPINVOKE.MSG_UPDATE_NGONS_get();
  public static readonly int MSG_DOCUMENT_MODE_CHANGED = C4dApiPINVOKE.MSG_DOCUMENT_MODE_CHANGED_get();
  public static readonly int MSG_TOOL_RESTART = C4dApiPINVOKE.MSG_TOOL_RESTART_get();
  public static readonly int MSG_DEFORMMODECHANGED = C4dApiPINVOKE.MSG_DEFORMMODECHANGED_get();
  public static readonly int MSG_ANIMATE = C4dApiPINVOKE.MSG_ANIMATE_get();
  public static readonly int MSG_CALCMEMUSAGE = C4dApiPINVOKE.MSG_CALCMEMUSAGE_get();
  public static readonly int MSG_SCALEDOCUMENT = C4dApiPINVOKE.MSG_SCALEDOCUMENT_get();
  public static readonly int MSG_GET_INHERITANCECONTAINER = C4dApiPINVOKE.MSG_GET_INHERITANCECONTAINER_get();
  public static readonly int MSG_SOFTTAG_UPDATE = C4dApiPINVOKE.MSG_SOFTTAG_UPDATE_get();
  public static readonly int MSG_TRANSFORM_OBJECT = C4dApiPINVOKE.MSG_TRANSFORM_OBJECT_get();
  public static readonly int MSG_STRINGUNDO = C4dApiPINVOKE.MSG_STRINGUNDO_get();
  public static readonly int VC_SAFETY = C4dApiPINVOKE.VC_SAFETY_get();
  public static readonly int VC_DONTCOPYDATA = C4dApiPINVOKE.VC_DONTCOPYDATA_get();
  public static readonly int VC_DONTCLEARDATA = C4dApiPINVOKE.VC_DONTCLEARDATA_get();
  public static readonly int DRAGANDDROP_FLAG_RECEIVE = C4dApiPINVOKE.DRAGANDDROP_FLAG_RECEIVE_get();
  public static readonly int DRAGANDDROP_FLAG_DROP = C4dApiPINVOKE.DRAGANDDROP_FLAG_DROP_get();
  public static readonly int DRAGANDDROP_FLAG_ACCEPT = C4dApiPINVOKE.DRAGANDDROP_FLAG_ACCEPT_get();
  public static readonly int DRAGANDDROP_FLAG_MSGVALID = C4dApiPINVOKE.DRAGANDDROP_FLAG_MSGVALID_get();
  public static readonly int DRAGANDDROP_FLAG_FORBID = C4dApiPINVOKE.DRAGANDDROP_FLAG_FORBID_get();
  public static readonly int DRAGANDDROP_FLAG_SOURCE = C4dApiPINVOKE.DRAGANDDROP_FLAG_SOURCE_get();
  public static readonly int DRAGANDDROP_FLAG_BEFORE = C4dApiPINVOKE.DRAGANDDROP_FLAG_BEFORE_get();
  public static readonly int DRAGANDDROP_FLAG_AFTER = C4dApiPINVOKE.DRAGANDDROP_FLAG_AFTER_get();
  public static readonly int DRAGANDDROP_FLAG_LEFT = C4dApiPINVOKE.DRAGANDDROP_FLAG_LEFT_get();
  public static readonly int DRAGANDDROP_FLAG_RIGHT = C4dApiPINVOKE.DRAGANDDROP_FLAG_RIGHT_get();
  public static readonly int OBJSELDATA_FLAG_QUERYSELECTION = C4dApiPINVOKE.OBJSELDATA_FLAG_QUERYSELECTION_get();
  public static readonly int OBJSELDATA_FLAG_HASSELECTION = C4dApiPINVOKE.OBJSELDATA_FLAG_HASSELECTION_get();
  public static readonly int MSG_NOTIFY_EVENT = C4dApiPINVOKE.MSG_NOTIFY_EVENT_get();
  public static readonly int MODE_ON = C4dApiPINVOKE.MODE_ON_get();
  public static readonly int MODE_OFF = C4dApiPINVOKE.MODE_OFF_get();
  public static readonly int MODE_UNDEF = C4dApiPINVOKE.MODE_UNDEF_get();
  public static readonly int POLYOBJECT_VBO_VERTEX = C4dApiPINVOKE.POLYOBJECT_VBO_VERTEX_get();
  public static readonly int POLYOBJECT_VBO_PHONG_NORMAL = C4dApiPINVOKE.POLYOBJECT_VBO_PHONG_NORMAL_get();
  public static readonly int POLYOBJECT_VBO_POLYGON_NORMAL = C4dApiPINVOKE.POLYOBJECT_VBO_POLYGON_NORMAL_get();
  public static readonly int POLYOBJECT_VBO_DISPLACE_NORMAL = C4dApiPINVOKE.POLYOBJECT_VBO_DISPLACE_NORMAL_get();
  public static readonly int POLYOBJECT_VBO_STICK_TEXTURE = C4dApiPINVOKE.POLYOBJECT_VBO_STICK_TEXTURE_get();
  public static readonly int POLYOBJECT_VBO_COLOR = C4dApiPINVOKE.POLYOBJECT_VBO_COLOR_get();
  public static readonly int POLY_TRIANG_CONSTRAINED_OUTLINE = C4dApiPINVOKE.POLY_TRIANG_CONSTRAINED_OUTLINE_get();
  public static readonly int POLY_TRIANG_QUADS = C4dApiPINVOKE.POLY_TRIANG_QUADS_get();
  public static readonly int POLY_TRIANG_NGON = C4dApiPINVOKE.POLY_TRIANG_NGON_get();
  public static readonly int POLY_TRIANG_FORCE_VORONOI = C4dApiPINVOKE.POLY_TRIANG_FORCE_VORONOI_get();
  public static readonly int POLY_TRIANG_FORCE_NGON = C4dApiPINVOKE.POLY_TRIANG_FORCE_NGON_get();
  public static readonly int POLY_TRIANG_FILL_HOLES = C4dApiPINVOKE.POLY_TRIANG_FILL_HOLES_get();
  public static readonly int TRIANGSTATE_SKIP_EDGE = C4dApiPINVOKE.TRIANGSTATE_SKIP_EDGE_get();
  public static readonly int TRIANGSTATE_MISSING_CONSTRAINT = C4dApiPINVOKE.TRIANGSTATE_MISSING_CONSTRAINT_get();
  public static readonly int SET_PEN_USE_PROFILE_COLOR = C4dApiPINVOKE.SET_PEN_USE_PROFILE_COLOR_get();
  public static readonly int MAX_Z = C4dApiPINVOKE.MAX_Z_get();
  public static readonly double VIEW_NEARCLIPPING = C4dApiPINVOKE.VIEW_NEARCLIPPING_get();
  public static readonly int DRAW_STATISTIC_TRIANGLES = C4dApiPINVOKE.DRAW_STATISTIC_TRIANGLES_get();
  public static readonly int DRAW_STATISTIC_QUADS = C4dApiPINVOKE.DRAW_STATISTIC_QUADS_get();
  public static readonly int DRAW_STATISTIC_LINES = C4dApiPINVOKE.DRAW_STATISTIC_LINES_get();
  public static readonly int DRAW_STATISTIC_POINTS = C4dApiPINVOKE.DRAW_STATISTIC_POINTS_get();
  public static readonly int DRAW_STATISTIC_TRIANGLE_STRIPS = C4dApiPINVOKE.DRAW_STATISTIC_TRIANGLE_STRIPS_get();
  public static readonly int DRAW_STATISTIC_LINE_STRIPS = C4dApiPINVOKE.DRAW_STATISTIC_LINE_STRIPS_get();
  public static readonly int DRAW_GET_VIEWMATRIX_PROJECTION = C4dApiPINVOKE.DRAW_GET_VIEWMATRIX_PROJECTION_get();
  public static readonly int DRAW_GET_VIEWMATRIX_PROJECTION_LARGE_Z = C4dApiPINVOKE.DRAW_GET_VIEWMATRIX_PROJECTION_LARGE_Z_get();
  public static readonly int DRAW_GET_VIEWMATRIX_INV_CAMERA = C4dApiPINVOKE.DRAW_GET_VIEWMATRIX_INV_CAMERA_get();
  public static readonly int DRAW_GET_VIEWMATRIX_MODELVIEW_PROJECTION = C4dApiPINVOKE.DRAW_GET_VIEWMATRIX_MODELVIEW_PROJECTION_get();
  public static readonly int INIT_CLIPBOX_ADJUSTGLSIZE = C4dApiPINVOKE.INIT_CLIPBOX_ADJUSTGLSIZE_get();
  public static readonly int NOCLIP_D = C4dApiPINVOKE.NOCLIP_D_get();
  public static readonly int NOCLIP_Z = C4dApiPINVOKE.NOCLIP_Z_get();
  public static readonly int BDRAW_SETLIGHTLIST_NOLIGHTS = C4dApiPINVOKE.BDRAW_SETLIGHTLIST_NOLIGHTS_get();
  public static readonly int BDRAW_SETLIGHTLIST_SCENELIGHTS = C4dApiPINVOKE.BDRAW_SETLIGHTLIST_SCENELIGHTS_get();
  public static readonly int BDRAW_SETLIGHTLIST_QUICKSHADING = C4dApiPINVOKE.BDRAW_SETLIGHTLIST_QUICKSHADING_get();
  public static readonly int DRAW_PARAMETER_LINEWIDTH = C4dApiPINVOKE.DRAW_PARAMETER_LINEWIDTH_get();
  public static readonly int DRAW_PARAMETER_ALPHA_THRESHOLD = C4dApiPINVOKE.DRAW_PARAMETER_ALPHA_THRESHOLD_get();
  public static readonly int DRAW_PARAMETER_SETZ = C4dApiPINVOKE.DRAW_PARAMETER_SETZ_get();
  public static readonly int DRAW_Z_LOWEREQUAL = C4dApiPINVOKE.DRAW_Z_LOWEREQUAL_get();
  public static readonly int DRAW_Z_GREATER = C4dApiPINVOKE.DRAW_Z_GREATER_get();
  public static readonly int DRAW_Z_ALWAYS = C4dApiPINVOKE.DRAW_Z_ALWAYS_get();
  public static readonly int DRAW_Z_EQUAL = C4dApiPINVOKE.DRAW_Z_EQUAL_get();
  public static readonly int DRAW_Z_LOWER = C4dApiPINVOKE.DRAW_Z_LOWER_get();
  public static readonly int DRAW_PARAMETER_OGL_CULLING = C4dApiPINVOKE.DRAW_PARAMETER_OGL_CULLING_get();
  public static readonly int DRAW_PARAMETER_OGL_CULLING_OFF = C4dApiPINVOKE.DRAW_PARAMETER_OGL_CULLING_OFF_get();
  public static readonly int DRAW_PARAMETER_OGL_CULLING_FRONT = C4dApiPINVOKE.DRAW_PARAMETER_OGL_CULLING_FRONT_get();
  public static readonly int DRAW_PARAMETER_OGL_CULLING_BACK = C4dApiPINVOKE.DRAW_PARAMETER_OGL_CULLING_BACK_get();
  public static readonly int DRAW_PARAMETER_OGL_CULLING_FRONT_AND_BACK = C4dApiPINVOKE.DRAW_PARAMETER_OGL_CULLING_FRONT_AND_BACK_get();
  public static readonly int DRAW_PARAMETER_USE_Z = C4dApiPINVOKE.DRAW_PARAMETER_USE_Z_get();
  public static readonly int DRAWPORT_TYPE_SOFTWARE = C4dApiPINVOKE.DRAWPORT_TYPE_SOFTWARE_get();
  public static readonly int DRAWPORT_TYPE_OGL_HQ = C4dApiPINVOKE.DRAWPORT_TYPE_OGL_HQ_get();
  public static readonly int VIEWPORT_CLEAR_POINT = C4dApiPINVOKE.VIEWPORT_CLEAR_POINT_get();
  public static readonly int VIEWPORT_CLEAR_POLYGON = C4dApiPINVOKE.VIEWPORT_CLEAR_POLYGON_get();
  public static readonly int VIEWPORT_CLEAR_EDGE = C4dApiPINVOKE.VIEWPORT_CLEAR_EDGE_get();
  public static readonly int SELECTION_NEW = C4dApiPINVOKE.SELECTION_NEW_get();
  public static readonly int SELECTION_ADD = C4dApiPINVOKE.SELECTION_ADD_get();
  public static readonly int SELECTION_SUB = C4dApiPINVOKE.SELECTION_SUB_get();
  public static readonly int PICKSESSION_FLAG_CANCELED = C4dApiPINVOKE.PICKSESSION_FLAG_CANCELED_get();
  public static readonly int Mcamera = C4dApiPINVOKE.Mcamera_get();
  public static readonly int Mobject = C4dApiPINVOKE.Mobject_get();
  public static readonly int Mtexture = C4dApiPINVOKE.Mtexture_get();
  public static readonly int Mtextureaxis = C4dApiPINVOKE.Mtextureaxis_get();
  public static readonly int Mpoints = C4dApiPINVOKE.Mpoints_get();
  public static readonly int Medges = C4dApiPINVOKE.Medges_get();
  public static readonly int Mpolygons = C4dApiPINVOKE.Mpolygons_get();
  public static readonly int Manimation = C4dApiPINVOKE.Manimation_get();
  public static readonly int Mkinematic = C4dApiPINVOKE.Mkinematic_get();
  public static readonly int Mmodel = C4dApiPINVOKE.Mmodel_get();
  public static readonly int Mpaint = C4dApiPINVOKE.Mpaint_get();
  public static readonly int Muvpoints = C4dApiPINVOKE.Muvpoints_get();
  public static readonly int Muvpolygons = C4dApiPINVOKE.Muvpolygons_get();
  public static readonly int Mpolyedgepoint = C4dApiPINVOKE.Mpolyedgepoint_get();
  public static readonly int Medgepoint = C4dApiPINVOKE.Medgepoint_get();
  public static readonly int Mdrag = C4dApiPINVOKE.Mdrag_get();

  public static readonly int TAG_VISIBLE = C4dApiPINVOKE.TAG_VISIBLE_get();
  public static readonly int TAG_MULTIPLE = C4dApiPINVOKE.TAG_MULTIPLE_get();
  public static readonly int TAG_HIERARCHICAL = C4dApiPINVOKE.TAG_HIERARCHICAL_get();
  public static readonly int TAG_EXPRESSION = C4dApiPINVOKE.TAG_EXPRESSION_get();
  public static readonly int TAG_TEMPORARY = C4dApiPINVOKE.TAG_TEMPORARY_get();
  public static readonly int BAKEPARTICLETAG_FROM = C4dApiPINVOKE.BAKEPARTICLETAG_FROM_get();
  public static readonly int BAKEPARTICLETAG_TO = C4dApiPINVOKE.BAKEPARTICLETAG_TO_get();
  public static readonly int BAKEPARTICLETAG_STEP = C4dApiPINVOKE.BAKEPARTICLETAG_STEP_get();
  public static readonly int BAKEPARTICLETAG_IGNORE = C4dApiPINVOKE.BAKEPARTICLETAG_IGNORE_get();
  public static readonly int PLUGINFLAG_COMMAND_HOTKEY = C4dApiPINVOKE.PLUGINFLAG_COMMAND_HOTKEY_get();
  public static readonly int PLUGINFLAG_COMMAND_OPTION_DIALOG = C4dApiPINVOKE.PLUGINFLAG_COMMAND_OPTION_DIALOG_get();
  public static readonly int PLUGINFLAG_COMMAND_STICKY = C4dApiPINVOKE.PLUGINFLAG_COMMAND_STICKY_get();
  public static readonly int MSG_COMMANDINFORMATION = C4dApiPINVOKE.MSG_COMMANDINFORMATION_get();
  public static readonly int MSG_BODYPAINTEXCHANGE = C4dApiPINVOKE.MSG_BODYPAINTEXCHANGE_get();
  public static readonly int MSG_MIRROR_TRANSFORM = C4dApiPINVOKE.MSG_MIRROR_TRANSFORM_get();
  public static readonly int MIRROR_TRANSFORM_CONTAINER = C4dApiPINVOKE.MIRROR_TRANSFORM_CONTAINER_get();
  public static readonly int MIRROR_TRANSFORM_CONTAINER_MATRIX = C4dApiPINVOKE.MIRROR_TRANSFORM_CONTAINER_MATRIX_get();
  public static readonly int MIRROR_TRANSFORM_CONTAINER_SOURCE = C4dApiPINVOKE.MIRROR_TRANSFORM_CONTAINER_SOURCE_get();
  public static readonly int MIRROR_TRANSFORM_CONTAINER_LMATRIXN = C4dApiPINVOKE.MIRROR_TRANSFORM_CONTAINER_LMATRIXN_get();
  public static readonly int MIRROR_TRANSFORM_CONTAINER_LMATRIX = C4dApiPINVOKE.MIRROR_TRANSFORM_CONTAINER_LMATRIX_get();
  public static readonly int MIRROR_TRANSFORM_CONTAINER_FMATRIX = C4dApiPINVOKE.MIRROR_TRANSFORM_CONTAINER_FMATRIX_get();
  public static readonly int MIRROR_TRANSFORM_CONTAINER_POS = C4dApiPINVOKE.MIRROR_TRANSFORM_CONTAINER_POS_get();
  public static readonly int MIRROR_TRANSFORM_CONTAINER_ROT = C4dApiPINVOKE.MIRROR_TRANSFORM_CONTAINER_ROT_get();
  public static readonly int MIRROR_TRANSFORM_CONTAINER_SCL = C4dApiPINVOKE.MIRROR_TRANSFORM_CONTAINER_SCL_get();
  public static readonly int MIRROR_TRANSFORM_CONTAINER_FPOS = C4dApiPINVOKE.MIRROR_TRANSFORM_CONTAINER_FPOS_get();
  public static readonly int MIRROR_TRANSFORM_CONTAINER_FROT = C4dApiPINVOKE.MIRROR_TRANSFORM_CONTAINER_FROT_get();
  public static readonly int MIRROR_TRANSFORM_CONTAINER_FSCL = C4dApiPINVOKE.MIRROR_TRANSFORM_CONTAINER_FSCL_get();
  public static readonly int BRUSHBASE_MOUSE_FLAG_ADDUNDO = C4dApiPINVOKE.BRUSHBASE_MOUSE_FLAG_ADDUNDO_get();
  public static readonly int BRUSHBASE_MOUSE_FLAG_ADDUNDO_FULL = C4dApiPINVOKE.BRUSHBASE_MOUSE_FLAG_ADDUNDO_FULL_get();
  public static readonly int BRUSHBASE_MOUSE_FLAG_SORTED_DIST = C4dApiPINVOKE.BRUSHBASE_MOUSE_FLAG_SORTED_DIST_get();
  public static readonly int BRUSHBASE_MOUSE_FLAG_SORTED_OBJECT = C4dApiPINVOKE.BRUSHBASE_MOUSE_FLAG_SORTED_OBJECT_get();
  public static readonly int BRUSHBASE_MOUSE_FLAG_SORTED_ORIGINOBJECT = C4dApiPINVOKE.BRUSHBASE_MOUSE_FLAG_SORTED_ORIGINOBJECT_get();
  public static readonly int BRUSHBASE_FALLOFF_STRENGTH = C4dApiPINVOKE.BRUSHBASE_FALLOFF_STRENGTH_get();
  public static readonly int BRUSHBASE_FALLOFF_ABSSTRENGTH = C4dApiPINVOKE.BRUSHBASE_FALLOFF_ABSSTRENGTH_get();
  public static readonly int GVdynamic = C4dApiPINVOKE.GVdynamic_get();
  public static readonly int GV_DYNAMIC_DATATYPE = C4dApiPINVOKE.GV_DYNAMIC_DATATYPE_get();

  public static readonly int GV_OBJECT_OBJECT_ID = C4dApiPINVOKE.GV_OBJECT_OBJECT_ID_get();
  public static readonly int GV_OBJECT_PATH_TYPE = C4dApiPINVOKE.GV_OBJECT_PATH_TYPE_get();
  public static readonly int GV_OBJECT_PATH_TYPE_START = C4dApiPINVOKE.GV_OBJECT_PATH_TYPE_START_get();
  public static readonly int GV_OBJECT_PATH_TYPE_ABSOLUTE = C4dApiPINVOKE.GV_OBJECT_PATH_TYPE_ABSOLUTE_get();
  public static readonly int GV_OBJECT_PATH_TYPE_RELATIVE = C4dApiPINVOKE.GV_OBJECT_PATH_TYPE_RELATIVE_get();
  public static readonly int GV_OBJECT_START_TYPE_ID = C4dApiPINVOKE.GV_OBJECT_START_TYPE_ID_get();
  public static readonly int GV_OBJECT_HISTORY_DEPTH_ID = C4dApiPINVOKE.GV_OBJECT_HISTORY_DEPTH_ID_get();
  public static readonly int GV_OBJECT_DISTANCE_ID = C4dApiPINVOKE.GV_OBJECT_DISTANCE_ID_get();
  public static readonly int GV_OBJECT_PATH_ID = C4dApiPINVOKE.GV_OBJECT_PATH_ID_get();
  public static readonly int GV_OBJECT_OPERATOR_LOCAL_IN = C4dApiPINVOKE.GV_OBJECT_OPERATOR_LOCAL_IN_get();
  public static readonly int GV_OBJECT_OPERATOR_GLOBAL_IN = C4dApiPINVOKE.GV_OBJECT_OPERATOR_GLOBAL_IN_get();
  public static readonly int GV_OBJECT_OPERATOR_HISTORY_IN = C4dApiPINVOKE.GV_OBJECT_OPERATOR_HISTORY_IN_get();
  public static readonly int GV_OBJECT_OPERATOR_OBJECT_IN = C4dApiPINVOKE.GV_OBJECT_OPERATOR_OBJECT_IN_get();
  public static readonly int GV_OBJECT_OPERATOR_ON = C4dApiPINVOKE.GV_OBJECT_OPERATOR_ON_get();
  public static readonly int GV_OBJECT_OPERATOR_LOCAL_OUT = C4dApiPINVOKE.GV_OBJECT_OPERATOR_LOCAL_OUT_get();
  public static readonly int GV_OBJECT_OPERATOR_GLOBAL_OUT = C4dApiPINVOKE.GV_OBJECT_OPERATOR_GLOBAL_OUT_get();
  public static readonly int GV_OBJECT_OPERATOR_OBJECT_OUT = C4dApiPINVOKE.GV_OBJECT_OPERATOR_OBJECT_OUT_get();
  public static readonly int GV_OBJECT_OPERATOR_OLD_POS_OUT = C4dApiPINVOKE.GV_OBJECT_OPERATOR_OLD_POS_OUT_get();
  public static readonly int GV_OBJECT_OPERATOR_OLD_ROT_OUT = C4dApiPINVOKE.GV_OBJECT_OPERATOR_OLD_ROT_OUT_get();
  public static readonly int GV_OBJECT_OPERATOR_OLD_SIZE_OUT = C4dApiPINVOKE.GV_OBJECT_OPERATOR_OLD_SIZE_OUT_get();
  public static readonly int GV_OBJECT_OPERATOR_OLD_GLOBAL_OUT = C4dApiPINVOKE.GV_OBJECT_OPERATOR_OLD_GLOBAL_OUT_get();
  public static readonly int GV_OBJECT_OPERATOR_OLD_LOCAL_OUT = C4dApiPINVOKE.GV_OBJECT_OPERATOR_OLD_LOCAL_OUT_get();
  public static readonly int GV_OBJECT_OPERATOR_VELOCITY_POS_OUT = C4dApiPINVOKE.GV_OBJECT_OPERATOR_VELOCITY_POS_OUT_get();
  public static readonly int GV_OBJECT_OPERATOR_VELOCITY_ROT_OUT = C4dApiPINVOKE.GV_OBJECT_OPERATOR_VELOCITY_ROT_OUT_get();
  public static readonly int GV_OBJECT_OPERATOR_VELOCITY_SIZE_OUT = C4dApiPINVOKE.GV_OBJECT_OPERATOR_VELOCITY_SIZE_OUT_get();

  public static readonly int GV_MATH_FUNCTION_ID = C4dApiPINVOKE.GV_MATH_FUNCTION_ID_get();
  public static readonly int GV_ADD_NODE_FUNCTION = C4dApiPINVOKE.GV_ADD_NODE_FUNCTION_get();
  public static readonly int GV_SUB_NODE_FUNCTION = C4dApiPINVOKE.GV_SUB_NODE_FUNCTION_get();
  public static readonly int GV_MUL_NODE_FUNCTION = C4dApiPINVOKE.GV_MUL_NODE_FUNCTION_get();
  public static readonly int GV_DIV_NODE_FUNCTION = C4dApiPINVOKE.GV_DIV_NODE_FUNCTION_get();
  public static readonly int GV_MOD_NODE_FUNCTION = C4dApiPINVOKE.GV_MOD_NODE_FUNCTION_get();
  public static readonly int GV_MATH_INPUT = C4dApiPINVOKE.GV_MATH_INPUT_get();
  public static readonly int GV_MATH_OUTPUT = C4dApiPINVOKE.GV_MATH_OUTPUT_get();
  public static readonly int GV_MATH_ = C4dApiPINVOKE.GV_MATH__get();

  public static readonly int GV_NODEMASTER_VERSION = C4dApiPINVOKE.GV_NODEMASTER_VERSION_get();
  public static readonly int GV_NODE_VERSION = C4dApiPINVOKE.GV_NODE_VERSION_get();
  public static readonly int GV_GROUPNODE_VERSION = C4dApiPINVOKE.GV_GROUPNODE_VERSION_get();
  public static readonly int VERSION_OPERATOR_GROUP = C4dApiPINVOKE.VERSION_OPERATOR_GROUP_get();
  public static readonly int VERSION_OPERATOR_DUMMY = C4dApiPINVOKE.VERSION_OPERATOR_DUMMY_get();
  public static readonly int VERSION_OPERATOR_OBJECT = C4dApiPINVOKE.VERSION_OPERATOR_OBJECT_get();
  public static readonly int VERSION_OPERATOR_RANDOM = C4dApiPINVOKE.VERSION_OPERATOR_RANDOM_get();
  public static readonly int VERSION_OPERATOR_REAL2VECT = C4dApiPINVOKE.VERSION_OPERATOR_REAL2VECT_get();
  public static readonly int VERSION_OPERATOR_VECT2REAL = C4dApiPINVOKE.VERSION_OPERATOR_VECT2REAL_get();
  public static readonly int VERSION_OPERATOR_ADAPTER = C4dApiPINVOKE.VERSION_OPERATOR_ADAPTER_get();
  public static readonly int VERSION_OPERATOR_CROSS = C4dApiPINVOKE.VERSION_OPERATOR_CROSS_get();
  public static readonly int VERSION_OPERATOR_EQU = C4dApiPINVOKE.VERSION_OPERATOR_EQU_get();
  public static readonly int VERSION_OPERATOR_NIL = C4dApiPINVOKE.VERSION_OPERATOR_NIL_get();
  public static readonly int VERSION_OPERATOR_TIME = C4dApiPINVOKE.VERSION_OPERATOR_TIME_get();
  public static readonly int VERSION_OPERATOR_TRIGO = C4dApiPINVOKE.VERSION_OPERATOR_TRIGO_get();
  public static readonly int VERSION_OPERATOR_MATRIX2VECT = C4dApiPINVOKE.VERSION_OPERATOR_MATRIX2VECT_get();
  public static readonly int VERSION_OPERATOR_VECT2MATRIX = C4dApiPINVOKE.VERSION_OPERATOR_VECT2MATRIX_get();
  public static readonly int VERSION_OPERATOR_NOT = C4dApiPINVOKE.VERSION_OPERATOR_NOT_get();
  public static readonly int VERSION_OPERATOR_POINT = C4dApiPINVOKE.VERSION_OPERATOR_POINT_get();
  public static readonly int VERSION_OPERATOR_CLAMP = C4dApiPINVOKE.VERSION_OPERATOR_CLAMP_get();
  public static readonly int VERSION_OPERATOR_VECTCALCMATRIX = C4dApiPINVOKE.VERSION_OPERATOR_VECTCALCMATRIX_get();
  public static readonly int VERSION_OPERATOR_MATRIXCALCHPB = C4dApiPINVOKE.VERSION_OPERATOR_MATRIXCALCHPB_get();
  public static readonly int VERSION_OPERATOR_DISTANCE = C4dApiPINVOKE.VERSION_OPERATOR_DISTANCE_get();
  public static readonly int VERSION_OPERATOR_CONDITION = C4dApiPINVOKE.VERSION_OPERATOR_CONDITION_get();
  public static readonly int VERSION_OPERATOR_RESULT = C4dApiPINVOKE.VERSION_OPERATOR_RESULT_get();
  public static readonly int VERSION_OPERATOR_SPY = C4dApiPINVOKE.VERSION_OPERATOR_SPY_get();
  public static readonly int VERSION_OPERATOR_CONST = C4dApiPINVOKE.VERSION_OPERATOR_CONST_get();
  public static readonly int VERSION_OPERATOR_MATH = C4dApiPINVOKE.VERSION_OPERATOR_MATH_get();
  public static readonly int VERSION_OPERATOR_BOOL = C4dApiPINVOKE.VERSION_OPERATOR_BOOL_get();
  public static readonly int VERSION_OPERATOR_INV = C4dApiPINVOKE.VERSION_OPERATOR_INV_get();
  public static readonly int VERSION_OPERATOR_NEG = C4dApiPINVOKE.VERSION_OPERATOR_NEG_get();
  public static readonly int VERSION_OPERATOR_CMP = C4dApiPINVOKE.VERSION_OPERATOR_CMP_get();
  public static readonly int VERSION_OPERATOR_ORDER = C4dApiPINVOKE.VERSION_OPERATOR_ORDER_get();
  public static readonly int VERSION_OPERATOR_SWITCH = C4dApiPINVOKE.VERSION_OPERATOR_SWITCH_get();
  public static readonly int VERSION_OPERATOR_MIX = C4dApiPINVOKE.VERSION_OPERATOR_MIX_get();
  public static readonly int VERSION_OPERATOR_COMMENT = C4dApiPINVOKE.VERSION_OPERATOR_COMMENT_get();
  public static readonly int VERSION_OPERATOR_MEMORY = C4dApiPINVOKE.VERSION_OPERATOR_MEMORY_get();
  public static readonly int VERSION_OPERATOR_ITERATE = C4dApiPINVOKE.VERSION_OPERATOR_ITERATE_get();
  public static readonly int VERSION_OPERATOR_FREEZE = C4dApiPINVOKE.VERSION_OPERATOR_FREEZE_get();
  public static readonly int VERSION_OPERATOR_FORMULA = C4dApiPINVOKE.VERSION_OPERATOR_FORMULA_get();
  public static readonly int VERSION_OPERATOR_ABS = C4dApiPINVOKE.VERSION_OPERATOR_ABS_get();
  public static readonly int VERSION_OPERATOR_DEGREE = C4dApiPINVOKE.VERSION_OPERATOR_DEGREE_get();
  public static readonly int VERSION_OPERATOR_RANGEMAPPER = C4dApiPINVOKE.VERSION_OPERATOR_RANGEMAPPER_get();
  public static readonly int VERSION_OPERATOR_FLOATMATH = C4dApiPINVOKE.VERSION_OPERATOR_FLOATMATH_get();
  public static readonly int VERSION_OPERATOR_FLOATFUNC = C4dApiPINVOKE.VERSION_OPERATOR_FLOATFUNC_get();
  public static readonly int VERSION_OPERATOR_POLYGON = C4dApiPINVOKE.VERSION_OPERATOR_POLYGON_get();
  public static readonly int VERSION_OPERATOR_DOT = C4dApiPINVOKE.VERSION_OPERATOR_DOT_get();
  public static readonly int VERSION_OPERATOR_COLORSPACE = C4dApiPINVOKE.VERSION_OPERATOR_COLORSPACE_get();
  public static readonly int VERSION_OPERATOR_SOUND = C4dApiPINVOKE.VERSION_OPERATOR_SOUND_get();
  public static readonly int VERSION_OPERATOR_NOISE = C4dApiPINVOKE.VERSION_OPERATOR_NOISE_get();
  public static readonly int VERSION_OPERATOR_TRIGGER = C4dApiPINVOKE.VERSION_OPERATOR_TRIGGER_get();
  public static readonly int VERSION_OPERATOR_BOX = C4dApiPINVOKE.VERSION_OPERATOR_BOX_get();
  public static readonly int VERSION_OPERATOR_COLLISION = C4dApiPINVOKE.VERSION_OPERATOR_COLLISION_get();
  public static readonly int VERSION_OPERATOR_SPLINE = C4dApiPINVOKE.VERSION_OPERATOR_SPLINE_get();
  public static readonly int VERSION_OPERATOR_MATRIXMULVECTOR = C4dApiPINVOKE.VERSION_OPERATOR_MATRIXMULVECTOR_get();
  public static readonly int VERSION_OPERATOR_SELECTION = C4dApiPINVOKE.VERSION_OPERATOR_SELECTION_get();
  public static readonly int VERSION_OPERATOR_HIERARCHY = C4dApiPINVOKE.VERSION_OPERATOR_HIERARCHY_get();
  public static readonly int VERSION_OPERATOR_DETAILS = C4dApiPINVOKE.VERSION_OPERATOR_DETAILS_get();
  public static readonly int VERSION_OPERATOR_TAG = C4dApiPINVOKE.VERSION_OPERATOR_TAG_get();
  public static readonly int VERSION_OPERATOR_COFFEE = C4dApiPINVOKE.VERSION_OPERATOR_COFFEE_get();
  public static readonly int VERSION_OPERATOR_MONOFLOP = C4dApiPINVOKE.VERSION_OPERATOR_MONOFLOP_get();
  public static readonly int VERSION_OPERATOR_REFERENCE = C4dApiPINVOKE.VERSION_OPERATOR_REFERENCE_get();
  public static readonly int VERSION_OPERATOR_WEIGHTMAP = C4dApiPINVOKE.VERSION_OPERATOR_WEIGHTMAP_get();
  public static readonly int VERSION_OPERATOR_MATERIAL = C4dApiPINVOKE.VERSION_OPERATOR_MATERIAL_get();
  public static readonly int VERSION_OPERATOR_INCLUDE = C4dApiPINVOKE.VERSION_OPERATOR_INCLUDE_get();
  public static readonly int VERSION_OPERATOR_LINK = C4dApiPINVOKE.VERSION_OPERATOR_LINK_get();
  public static readonly int VERSION_OPERATOR_RAY = C4dApiPINVOKE.VERSION_OPERATOR_RAY_get();
  public static readonly int VERSION_OPERATOR_BITMAP = C4dApiPINVOKE.VERSION_OPERATOR_BITMAP_get();
  public static readonly int VERSION_OPERATOR_COLORTEMP = C4dApiPINVOKE.VERSION_OPERATOR_COLORTEMP_get();
  public static readonly int GV_NODEMASTER_RELEASE = C4dApiPINVOKE.GV_NODEMASTER_RELEASE_get();
  public static readonly int GRAPHVIEW_CORE_PRIORITY = C4dApiPINVOKE.GRAPHVIEW_CORE_PRIORITY_get();
  public static readonly int GRAPHVIEW_EDITOR_PRIORITY = C4dApiPINVOKE.GRAPHVIEW_EDITOR_PRIORITY_get();
  public static readonly int GRAPHVIEW_HOOK_PRIORITY = C4dApiPINVOKE.GRAPHVIEW_HOOK_PRIORITY_get();
  public static readonly int ID_GRAPHVIEW = C4dApiPINVOKE.ID_GRAPHVIEW_get();
  public static readonly int ID_GV_NODEDATA = C4dApiPINVOKE.ID_GV_NODEDATA_get();
  public static readonly int ID_GV_GROUPDATA = C4dApiPINVOKE.ID_GV_GROUPDATA_get();
  public static readonly int ID_GV_NODEMASTERDATA = C4dApiPINVOKE.ID_GV_NODEMASTERDATA_get();
  public static readonly int ID_GRAPHVIEW_PRIVATE = C4dApiPINVOKE.ID_GRAPHVIEW_PRIVATE_get();
  public static readonly int ID_GV_VALGROUP_TYPE_GENERAL = C4dApiPINVOKE.ID_GV_VALGROUP_TYPE_GENERAL_get();
  public static readonly int ID_GV_OPCLASS_TYPE_GENERAL = C4dApiPINVOKE.ID_GV_OPCLASS_TYPE_GENERAL_get();
  public static readonly int ID_GV_OPGROUP_TYPE_GENERAL = C4dApiPINVOKE.ID_GV_OPGROUP_TYPE_GENERAL_get();
  public static readonly int ID_GV_OPGROUP_TYPE_ADAPTER = C4dApiPINVOKE.ID_GV_OPGROUP_TYPE_ADAPTER_get();
  public static readonly int ID_GV_OPGROUP_TYPE_BOOL = C4dApiPINVOKE.ID_GV_OPGROUP_TYPE_BOOL_get();
  public static readonly int ID_GV_OPGROUP_TYPE_CALCULATE = C4dApiPINVOKE.ID_GV_OPGROUP_TYPE_CALCULATE_get();
  public static readonly int ID_GV_OPGROUP_TYPE_LOGICAL = C4dApiPINVOKE.ID_GV_OPGROUP_TYPE_LOGICAL_get();
  public static readonly int ID_GV_OPGROUP_TYPE_ITERATOR = C4dApiPINVOKE.ID_GV_OPGROUP_TYPE_ITERATOR_get();
  public static readonly int ID_GV_OPGROUP_TYPE_SCRIPTING = C4dApiPINVOKE.ID_GV_OPGROUP_TYPE_SCRIPTING_get();
  public static readonly int ID_GV_VALUE_TYPE_NONE = C4dApiPINVOKE.ID_GV_VALUE_TYPE_NONE_get();
  public static readonly int ID_GV_VALUE_TYPE_UNDEFINED = C4dApiPINVOKE.ID_GV_VALUE_TYPE_UNDEFINED_get();
  public static readonly int ID_GV_VALUE_TYPE_BOOL = C4dApiPINVOKE.ID_GV_VALUE_TYPE_BOOL_get();
  public static readonly int ID_GV_VALUE_TYPE_INTEGER = C4dApiPINVOKE.ID_GV_VALUE_TYPE_INTEGER_get();
  public static readonly int ID_GV_VALUE_TYPE_REAL = C4dApiPINVOKE.ID_GV_VALUE_TYPE_REAL_get();
  public static readonly int ID_GV_VALUE_TYPE_VECTOR = C4dApiPINVOKE.ID_GV_VALUE_TYPE_VECTOR_get();
  public static readonly int ID_GV_VALUE_TYPE_NORMAL = C4dApiPINVOKE.ID_GV_VALUE_TYPE_NORMAL_get();
  public static readonly int ID_GV_VALUE_TYPE_MATRIX = C4dApiPINVOKE.ID_GV_VALUE_TYPE_MATRIX_get();
  public static readonly int ID_GV_VALUE_TYPE_TIME = C4dApiPINVOKE.ID_GV_VALUE_TYPE_TIME_get();
  public static readonly int ID_GV_VALUE_TYPE_STRING = C4dApiPINVOKE.ID_GV_VALUE_TYPE_STRING_get();
  public static readonly int ID_GV_VALUE_TYPE_GENERAL_OBJECT = C4dApiPINVOKE.ID_GV_VALUE_TYPE_GENERAL_OBJECT_get();
  public static readonly int ID_GV_VALUE_TYPE_GENERAL_TAG = C4dApiPINVOKE.ID_GV_VALUE_TYPE_GENERAL_TAG_get();
  public static readonly int ID_GV_VALUE_TYPE_GENERAL_MATERIAL = C4dApiPINVOKE.ID_GV_VALUE_TYPE_GENERAL_MATERIAL_get();
  public static readonly int ID_GV_VALUE_TYPE_GENERAL_INSTANCE = C4dApiPINVOKE.ID_GV_VALUE_TYPE_GENERAL_INSTANCE_get();
  public static readonly int ID_GV_DATA_TYPE_NONE = C4dApiPINVOKE.ID_GV_DATA_TYPE_NONE_get();
  public static readonly int ID_GV_DATA_TYPE_UNDEFINED = C4dApiPINVOKE.ID_GV_DATA_TYPE_UNDEFINED_get();
  public static readonly int ID_GV_DATA_TYPE_BOOL = C4dApiPINVOKE.ID_GV_DATA_TYPE_BOOL_get();
  public static readonly int ID_GV_DATA_TYPE_INTEGER = C4dApiPINVOKE.ID_GV_DATA_TYPE_INTEGER_get();
  public static readonly int ID_GV_DATA_TYPE_REAL = C4dApiPINVOKE.ID_GV_DATA_TYPE_REAL_get();
  public static readonly int ID_GV_DATA_TYPE_VECTOR = C4dApiPINVOKE.ID_GV_DATA_TYPE_VECTOR_get();
  public static readonly int ID_GV_DATA_TYPE_NORMAL = C4dApiPINVOKE.ID_GV_DATA_TYPE_NORMAL_get();
  public static readonly int ID_GV_DATA_TYPE_MATRIX = C4dApiPINVOKE.ID_GV_DATA_TYPE_MATRIX_get();
  public static readonly int ID_GV_DATA_TYPE_TIME = C4dApiPINVOKE.ID_GV_DATA_TYPE_TIME_get();
  public static readonly int ID_GV_DATA_TYPE_STRING = C4dApiPINVOKE.ID_GV_DATA_TYPE_STRING_get();
  public static readonly int ID_GV_DATA_TYPE_GENERAL_OBJECT = C4dApiPINVOKE.ID_GV_DATA_TYPE_GENERAL_OBJECT_get();
  public static readonly int ID_GV_DATA_TYPE_GENERAL_TAG = C4dApiPINVOKE.ID_GV_DATA_TYPE_GENERAL_TAG_get();
  public static readonly int ID_GV_DATA_TYPE_GENERAL_MATERIAL = C4dApiPINVOKE.ID_GV_DATA_TYPE_GENERAL_MATERIAL_get();
  public static readonly int ID_GV_DATA_TYPE_GENERAL_INSTANCE = C4dApiPINVOKE.ID_GV_DATA_TYPE_GENERAL_INSTANCE_get();
  public static readonly int CUSTOMGUI_NORMAL = C4dApiPINVOKE.CUSTOMGUI_NORMAL_get();
  public static readonly int ID_GV_OPERATOR_DUMMY = C4dApiPINVOKE.ID_GV_OPERATOR_DUMMY_get();
  public static readonly int ID_GV_OPERATOR_GROUP = C4dApiPINVOKE.ID_GV_OPERATOR_GROUP_get();
  public static readonly int ID_OPERATOR_OBJECT = C4dApiPINVOKE.ID_OPERATOR_OBJECT_get();
  public static readonly int ID_OPERATOR_RANDOM = C4dApiPINVOKE.ID_OPERATOR_RANDOM_get();
  public static readonly int ID_OPERATOR_REAL2VECT = C4dApiPINVOKE.ID_OPERATOR_REAL2VECT_get();
  public static readonly int ID_OPERATOR_VECT2REAL = C4dApiPINVOKE.ID_OPERATOR_VECT2REAL_get();
  public static readonly int ID_OPERATOR_ADAPTER = C4dApiPINVOKE.ID_OPERATOR_ADAPTER_get();
  public static readonly int ID_OPERATOR_CROSS = C4dApiPINVOKE.ID_OPERATOR_CROSS_get();
  public static readonly int ID_OPERATOR_EQU = C4dApiPINVOKE.ID_OPERATOR_EQU_get();
  public static readonly int ID_OPERATOR_NIL = C4dApiPINVOKE.ID_OPERATOR_NIL_get();
  public static readonly int ID_OPERATOR_TIME = C4dApiPINVOKE.ID_OPERATOR_TIME_get();
  public static readonly int ID_OPERATOR_TRIGO = C4dApiPINVOKE.ID_OPERATOR_TRIGO_get();
  public static readonly int ID_OPERATOR_MATRIX2VECT = C4dApiPINVOKE.ID_OPERATOR_MATRIX2VECT_get();
  public static readonly int ID_OPERATOR_VECT2MATRIX = C4dApiPINVOKE.ID_OPERATOR_VECT2MATRIX_get();
  public static readonly int ID_OPERATOR_NOT = C4dApiPINVOKE.ID_OPERATOR_NOT_get();
  public static readonly int ID_OPERATOR_POINT = C4dApiPINVOKE.ID_OPERATOR_POINT_get();
  public static readonly int ID_OPERATOR_CLAMP = C4dApiPINVOKE.ID_OPERATOR_CLAMP_get();
  public static readonly int ID_OPERATOR_VECTCALCMATRIX = C4dApiPINVOKE.ID_OPERATOR_VECTCALCMATRIX_get();
  public static readonly int ID_OPERATOR_MATRIXCALCHPB = C4dApiPINVOKE.ID_OPERATOR_MATRIXCALCHPB_get();
  public static readonly int ID_OPERATOR_DISTANCE = C4dApiPINVOKE.ID_OPERATOR_DISTANCE_get();
  public static readonly int ID_OPERATOR_CONDITION = C4dApiPINVOKE.ID_OPERATOR_CONDITION_get();
  public static readonly int ID_OPERATOR_RESULT = C4dApiPINVOKE.ID_OPERATOR_RESULT_get();
  public static readonly int ID_OPERATOR_SPY = C4dApiPINVOKE.ID_OPERATOR_SPY_get();
  public static readonly int ID_OPERATOR_CONST = C4dApiPINVOKE.ID_OPERATOR_CONST_get();
  public static readonly int ID_OPERATOR_MATH = C4dApiPINVOKE.ID_OPERATOR_MATH_get();
  public static readonly int ID_OPERATOR_BOOL = C4dApiPINVOKE.ID_OPERATOR_BOOL_get();
  public static readonly int ID_OPERATOR_INV = C4dApiPINVOKE.ID_OPERATOR_INV_get();
  public static readonly int ID_OPERATOR_NEG = C4dApiPINVOKE.ID_OPERATOR_NEG_get();
  public static readonly int ID_OPERATOR_CMP = C4dApiPINVOKE.ID_OPERATOR_CMP_get();
  public static readonly int ID_OPERATOR_ORDER = C4dApiPINVOKE.ID_OPERATOR_ORDER_get();
  public static readonly int ID_OPERATOR_SWITCH = C4dApiPINVOKE.ID_OPERATOR_SWITCH_get();
  public static readonly int ID_OPERATOR_MIX = C4dApiPINVOKE.ID_OPERATOR_MIX_get();
  public static readonly int ID_OPERATOR_COMMENT = C4dApiPINVOKE.ID_OPERATOR_COMMENT_get();
  public static readonly int ID_OPERATOR_MEMORY = C4dApiPINVOKE.ID_OPERATOR_MEMORY_get();
  public static readonly int ID_OPERATOR_ITERATE = C4dApiPINVOKE.ID_OPERATOR_ITERATE_get();
  public static readonly int ID_OPERATOR_FREEZE = C4dApiPINVOKE.ID_OPERATOR_FREEZE_get();
  public static readonly int ID_OPERATOR_FORMULA = C4dApiPINVOKE.ID_OPERATOR_FORMULA_get();
  public static readonly int ID_OPERATOR_ABS = C4dApiPINVOKE.ID_OPERATOR_ABS_get();
  public static readonly int ID_OPERATOR_DEGREE = C4dApiPINVOKE.ID_OPERATOR_DEGREE_get();
  public static readonly int ID_OPERATOR_RANGEMAPPER = C4dApiPINVOKE.ID_OPERATOR_RANGEMAPPER_get();
  public static readonly int ID_OPERATOR_FLOATMATH = C4dApiPINVOKE.ID_OPERATOR_FLOATMATH_get();
  public static readonly int ID_OPERATOR_FLOATFUNC = C4dApiPINVOKE.ID_OPERATOR_FLOATFUNC_get();
  public static readonly int ID_OPERATOR_POLYGON = C4dApiPINVOKE.ID_OPERATOR_POLYGON_get();
  public static readonly int ID_OPERATOR_DOT = C4dApiPINVOKE.ID_OPERATOR_DOT_get();
  public static readonly int ID_OPERATOR_COLORSPACE = C4dApiPINVOKE.ID_OPERATOR_COLORSPACE_get();
  public static readonly int ID_OPERATOR_SOUND = C4dApiPINVOKE.ID_OPERATOR_SOUND_get();
  public static readonly int ID_OPERATOR_NOISE = C4dApiPINVOKE.ID_OPERATOR_NOISE_get();
  public static readonly int ID_OPERATOR_TRIGGER = C4dApiPINVOKE.ID_OPERATOR_TRIGGER_get();
  public static readonly int ID_OPERATOR_BOX = C4dApiPINVOKE.ID_OPERATOR_BOX_get();
  public static readonly int ID_OPERATOR_COLLISION = C4dApiPINVOKE.ID_OPERATOR_COLLISION_get();
  public static readonly int ID_OPERATOR_SPLINE = C4dApiPINVOKE.ID_OPERATOR_SPLINE_get();
  public static readonly int ID_OPERATOR_MATRIXMULVECTOR = C4dApiPINVOKE.ID_OPERATOR_MATRIXMULVECTOR_get();
  public static readonly int ID_OPERATOR_SELECTION = C4dApiPINVOKE.ID_OPERATOR_SELECTION_get();
  public static readonly int ID_OPERATOR_HIERARCHY = C4dApiPINVOKE.ID_OPERATOR_HIERARCHY_get();
  public static readonly int ID_OPERATOR_DETAILS = C4dApiPINVOKE.ID_OPERATOR_DETAILS_get();
  public static readonly int ID_OPERATOR_TAG = C4dApiPINVOKE.ID_OPERATOR_TAG_get();
  public static readonly int ID_OPERATOR_COFFEE = C4dApiPINVOKE.ID_OPERATOR_COFFEE_get();
  public static readonly int ID_OPERATOR_MONOFLOP = C4dApiPINVOKE.ID_OPERATOR_MONOFLOP_get();
  public static readonly int ID_OPERATOR_REFERENCE = C4dApiPINVOKE.ID_OPERATOR_REFERENCE_get();
  public static readonly int ID_OPERATOR_WEIGHTMAP = C4dApiPINVOKE.ID_OPERATOR_WEIGHTMAP_get();
  public static readonly int ID_OPERATOR_MATERIAL = C4dApiPINVOKE.ID_OPERATOR_MATERIAL_get();
  public static readonly int ID_OPERATOR_INCLUDE = C4dApiPINVOKE.ID_OPERATOR_INCLUDE_get();
  public static readonly int ID_OPERATOR_LINK = C4dApiPINVOKE.ID_OPERATOR_LINK_get();
  public static readonly int ID_OPERATOR_RAY = C4dApiPINVOKE.ID_OPERATOR_RAY_get();
  public static readonly int ID_OPERATOR_BITMAP = C4dApiPINVOKE.ID_OPERATOR_BITMAP_get();
  public static readonly int ID_OPERATOR_COLORTEMP = C4dApiPINVOKE.ID_OPERATOR_COLORTEMP_get();
  public static readonly int ID_GV_SYSTEM_OWNER = C4dApiPINVOKE.ID_GV_SYSTEM_OWNER_get();
  public static readonly int ID_GV_GENERAL_OWNER = C4dApiPINVOKE.ID_GV_GENERAL_OWNER_get();
  public static readonly int ID_GV_IGNORE_OWNER = C4dApiPINVOKE.ID_GV_IGNORE_OWNER_get();
  public static readonly int ID_OPERATORPOOL_PLUGIN = C4dApiPINVOKE.ID_OPERATORPOOL_PLUGIN_get();
  public static readonly int ID_TREEVIEW_PLUGIN = C4dApiPINVOKE.ID_TREEVIEW_PLUGIN_get();
  public static readonly int ID_OBJECT_PLUGIN = C4dApiPINVOKE.ID_OBJECT_PLUGIN_get();
  public static readonly int ID_SCENEHOOK_PLUGIN = C4dApiPINVOKE.ID_SCENEHOOK_PLUGIN_get();
  public static readonly int ID_EXPRESSION_PLUGIN = C4dApiPINVOKE.ID_EXPRESSION_PLUGIN_get();
  public static readonly int ID_EXPRESSION_TAG = C4dApiPINVOKE.ID_EXPRESSION_TAG_get();
  public static readonly int ID_GRAPHVIEW_PREFS = C4dApiPINVOKE.ID_GRAPHVIEW_PREFS_get();
  public static readonly int ID_GRAPHVIEW_GUI_PREFS = C4dApiPINVOKE.ID_GRAPHVIEW_GUI_PREFS_get();
  public static readonly int ID_GRAPHVIEW_COLORS_PREFS = C4dApiPINVOKE.ID_GRAPHVIEW_COLORS_PREFS_get();
  public static readonly int ID_GRAPHVIEW_WORLD_PREFS = C4dApiPINVOKE.ID_GRAPHVIEW_WORLD_PREFS_get();
  public static readonly int ID_GRAPHVIEW_MASTER_PREFS = C4dApiPINVOKE.ID_GRAPHVIEW_MASTER_PREFS_get();
  public static readonly int DRAGTYPE_GVNODE_EDITOR = C4dApiPINVOKE.DRAGTYPE_GVNODE_EDITOR_get();
  public static readonly int DRAGTYPE_GVNODE_MANAGER = C4dApiPINVOKE.DRAGTYPE_GVNODE_MANAGER_get();
  public static readonly int DRAGTYPE_GVNODE_STORE = C4dApiPINVOKE.DRAGTYPE_GVNODE_STORE_get();
  public static readonly int DRAGTYPE_GVNODE_DUMMY = C4dApiPINVOKE.DRAGTYPE_GVNODE_DUMMY_get();
  public static readonly int ID_OPERATORCONTAINER = C4dApiPINVOKE.ID_OPERATORCONTAINER_get();
  public static readonly int ID_SHAPECONTAINER = C4dApiPINVOKE.ID_SHAPECONTAINER_get();
  public static readonly int GV_GROUP_INPUT_FIRST_PRIVATE_ID = C4dApiPINVOKE.GV_GROUP_INPUT_FIRST_PRIVATE_ID_get();
  public static readonly int GV_GROUP_INPUT_LAST_PRIVATE_ID = C4dApiPINVOKE.GV_GROUP_INPUT_LAST_PRIVATE_ID_get();
  public static readonly int GV_GROUP_OUTPUT_FIRST_PRIVATE_ID = C4dApiPINVOKE.GV_GROUP_OUTPUT_FIRST_PRIVATE_ID_get();
  public static readonly int GV_GROUP_OUTPUT_LAST_PRIVATE_ID = C4dApiPINVOKE.GV_GROUP_OUTPUT_LAST_PRIVATE_ID_get();
  public static readonly int GV_GROUP_INPUT_FIRST_ID = C4dApiPINVOKE.GV_GROUP_INPUT_FIRST_ID_get();
  public static readonly int GV_GROUP_INPUT_LAST_ID = C4dApiPINVOKE.GV_GROUP_INPUT_LAST_ID_get();
  public static readonly int GV_GROUP_OUTPUT_FIRST_ID = C4dApiPINVOKE.GV_GROUP_OUTPUT_FIRST_ID_get();
  public static readonly int GV_GROUP_OUTPUT_LAST_ID = C4dApiPINVOKE.GV_GROUP_OUTPUT_LAST_ID_get();

  public static readonly int GV_OPERATOR_PORTS_ID = C4dApiPINVOKE.GV_OPERATOR_PORTS_ID_get();
  public static readonly int GV_OPERATOR_DATA_ID = C4dApiPINVOKE.GV_OPERATOR_DATA_ID_get();
  public static readonly int GV_MESSAGE_FIRST_DATA_ID = C4dApiPINVOKE.GV_MESSAGE_FIRST_DATA_ID_get();

  public static readonly int GV_INITIAL_OPCLASS_SUB_ID = C4dApiPINVOKE.GV_INITIAL_OPCLASS_SUB_ID_get();
  public static readonly int GV_INITIAL_OPGROUP_SUB_ID = C4dApiPINVOKE.GV_INITIAL_OPGROUP_SUB_ID_get();
  public static readonly int GV_INITIAL_VALGROUP_SUB_ID = C4dApiPINVOKE.GV_INITIAL_VALGROUP_SUB_ID_get();
  public static readonly int GV_INITIAL_DATA_SUB_ID = C4dApiPINVOKE.GV_INITIAL_DATA_SUB_ID_get();
  public static readonly int GV_INITIAL_VALUE_SUB_ID = C4dApiPINVOKE.GV_INITIAL_VALUE_SUB_ID_get();
  public static readonly int GV_COPY_OFFSET_X = C4dApiPINVOKE.GV_COPY_OFFSET_X_get();
  public static readonly int GV_COPY_OFFSET_Y = C4dApiPINVOKE.GV_COPY_OFFSET_Y_get();
  public static readonly int GV_PACK_NODES_EXTRA_BORDER = C4dApiPINVOKE.GV_PACK_NODES_EXTRA_BORDER_get();
  public static readonly int GV_OPTIMIZE_NODES_EXTRA_BORDER = C4dApiPINVOKE.GV_OPTIMIZE_NODES_EXTRA_BORDER_get();
  public static readonly int GV_NODE_INVALID_INDEX = C4dApiPINVOKE.GV_NODE_INVALID_INDEX_get();
  public static readonly int GV_PORT_INVALID_ID = C4dApiPINVOKE.GV_PORT_INVALID_ID_get();
  public static readonly int GV_PORT_INVALID_INDEX = C4dApiPINVOKE.GV_PORT_INVALID_INDEX_get();
  public static readonly int GV_PORT_INVALID_SUB_ID = C4dApiPINVOKE.GV_PORT_INVALID_SUB_ID_get();
  public static readonly int GV_USERDATA_INVALID_ID = C4dApiPINVOKE.GV_USERDATA_INVALID_ID_get();
  public static readonly int GV_OPERATOR_INVALID_ID = C4dApiPINVOKE.GV_OPERATOR_INVALID_ID_get();
  public static readonly int GV_INVALID = C4dApiPINVOKE.GV_INVALID_get();
  public static readonly int GV_ATOMARRAY = C4dApiPINVOKE.GV_ATOMARRAY_get();
  public static readonly int GV_BOOL = C4dApiPINVOKE.GV_BOOL_get();
  public static readonly int GV_INT = C4dApiPINVOKE.GV_INT_get();
  public static readonly int GV_REAL = C4dApiPINVOKE.GV_REAL_get();
  public static readonly int GV_VECTOR = C4dApiPINVOKE.GV_VECTOR_get();
  public static readonly int GV_NORMAL = C4dApiPINVOKE.GV_NORMAL_get();
  public static readonly int GV_MATRIX = C4dApiPINVOKE.GV_MATRIX_get();
  public static readonly int GV_TIME = C4dApiPINVOKE.GV_TIME_get();
  public static readonly int GV_STRING = C4dApiPINVOKE.GV_STRING_get();
  public static readonly int GV_ATOM = C4dApiPINVOKE.GV_ATOM_get();
  public static readonly int GV_USERDEF = C4dApiPINVOKE.GV_USERDEF_get();

  public static readonly int GV_GUI_PREFERENCES_ID = C4dApiPINVOKE.GV_GUI_PREFERENCES_ID_get();
  public static readonly int GV_WORLD_PREFERENCES_ID = C4dApiPINVOKE.GV_WORLD_PREFERENCES_ID_get();
  public static readonly int GV_MASTER_PREFERENCES_ID = C4dApiPINVOKE.GV_MASTER_PREFERENCES_ID_get();
  public static readonly int GV_RESOURCE_SYMBOL_MAX_LENGTH = C4dApiPINVOKE.GV_RESOURCE_SYMBOL_MAX_LENGTH_get();
  public static readonly int GV_DATAHANDLER_FLAGS_DISCLEVEL = C4dApiPINVOKE.GV_DATAHANDLER_FLAGS_DISCLEVEL_get();
  public static readonly int GV_CONSTANT_NONE = C4dApiPINVOKE.GV_CONSTANT_NONE_get();
  public static readonly int GV_CONSTANT_FIRST = C4dApiPINVOKE.GV_CONSTANT_FIRST_get();
  public static readonly int INDEX_GV_VALUE_TYPE_UNDEFINED = C4dApiPINVOKE.INDEX_GV_VALUE_TYPE_UNDEFINED_get();
  public static readonly int INDEX_GV_DATA_TYPE_UNDEFINED = C4dApiPINVOKE.INDEX_GV_DATA_TYPE_UNDEFINED_get();
  public static readonly int INDEX_GV_GROUP_TYPE_UNDEFINED = C4dApiPINVOKE.INDEX_GV_GROUP_TYPE_UNDEFINED_get();
  public static readonly int INDEX_GV_CLASS_TYPE_UNDEFINED = C4dApiPINVOKE.INDEX_GV_CLASS_TYPE_UNDEFINED_get();
  public static readonly int INDEX_GV_VALUE_TYPE_INVALID = C4dApiPINVOKE.INDEX_GV_VALUE_TYPE_INVALID_get();
  public static readonly int INDEX_GV_DATA_TYPE_INVALID = C4dApiPINVOKE.INDEX_GV_DATA_TYPE_INVALID_get();
  public static readonly int INDEX_GV_GROUP_TYPE_INVALID = C4dApiPINVOKE.INDEX_GV_GROUP_TYPE_INVALID_get();
  public static readonly int INDEX_GV_CLASS_TYPE_INVALID = C4dApiPINVOKE.INDEX_GV_CLASS_TYPE_INVALID_get();
  public static readonly int GV_DATA_TYPE_MENU_OFFSET = C4dApiPINVOKE.GV_DATA_TYPE_MENU_OFFSET_get();
  public static readonly char GV_VALUE_SEPERATOR_CHR = C4dApiPINVOKE.GV_VALUE_SEPERATOR_CHR_get();
  public static readonly char GV_ELEMENT_SEPERATOR_CHR = C4dApiPINVOKE.GV_ELEMENT_SEPERATOR_CHR_get();
  public static readonly int GV_OPERATORFLAGS_MASK = C4dApiPINVOKE.GV_OPERATORFLAGS_MASK_get();
  public static readonly int PRIM_PLANE = C4dApiPINVOKE.PRIM_PLANE_get();
  public static readonly int PRIM_PLANE_XY = C4dApiPINVOKE.PRIM_PLANE_XY_get();
  public static readonly int PRIM_PLANE_ZY = C4dApiPINVOKE.PRIM_PLANE_ZY_get();
  public static readonly int PRIM_PLANE_XZ = C4dApiPINVOKE.PRIM_PLANE_XZ_get();
  public static readonly int PRIM_REVERSE = C4dApiPINVOKE.PRIM_REVERSE_get();

  public static readonly int SPLINEOBJECT_INTERPOL = C4dApiPINVOKE.SPLINEOBJECT_INTERPOL_get();
  public static readonly int SPLINEOBJECT_TYPE = C4dApiPINVOKE.SPLINEOBJECT_TYPE_get();
  public static readonly int SPLINEOBJECT_TYPE_LINEAR = C4dApiPINVOKE.SPLINEOBJECT_TYPE_LINEAR_get();
  public static readonly int SPLINEOBJECT_TYPE_CUBIC = C4dApiPINVOKE.SPLINEOBJECT_TYPE_CUBIC_get();
  public static readonly int SPLINEOBJECT_TYPE_AKIMA = C4dApiPINVOKE.SPLINEOBJECT_TYPE_AKIMA_get();
  public static readonly int SPLINEOBJECT_TYPE_BSPLINE = C4dApiPINVOKE.SPLINEOBJECT_TYPE_BSPLINE_get();
  public static readonly int SPLINEOBJECT_TYPE_BEZIER = C4dApiPINVOKE.SPLINEOBJECT_TYPE_BEZIER_get();
  public static readonly int SPLINEOBJECT_INTERPOLATION = C4dApiPINVOKE.SPLINEOBJECT_INTERPOLATION_get();
  public static readonly int SPLINEOBJECT_INTERPOLATION_NONE = C4dApiPINVOKE.SPLINEOBJECT_INTERPOLATION_NONE_get();
  public static readonly int SPLINEOBJECT_INTERPOLATION_NATURAL = C4dApiPINVOKE.SPLINEOBJECT_INTERPOLATION_NATURAL_get();
  public static readonly int SPLINEOBJECT_INTERPOLATION_UNIFORM = C4dApiPINVOKE.SPLINEOBJECT_INTERPOLATION_UNIFORM_get();
  public static readonly int SPLINEOBJECT_INTERPOLATION_ADAPTIVE = C4dApiPINVOKE.SPLINEOBJECT_INTERPOLATION_ADAPTIVE_get();
  public static readonly int SPLINEOBJECT_INTERPOLATION_SUBDIV = C4dApiPINVOKE.SPLINEOBJECT_INTERPOLATION_SUBDIV_get();
  public static readonly int SPLINEOBJECT_CLOSED = C4dApiPINVOKE.SPLINEOBJECT_CLOSED_get();
  public static readonly int SPLINEOBJECT_SUB = C4dApiPINVOKE.SPLINEOBJECT_SUB_get();
  public static readonly int SPLINEOBJECT_ANGLE = C4dApiPINVOKE.SPLINEOBJECT_ANGLE_get();
  public static readonly int SPLINEOBJECT_MAXIMUMLENGTH = C4dApiPINVOKE.SPLINEOBJECT_MAXIMUMLENGTH_get();

  public static readonly int API_VERSION = C4dApiPINVOKE.API_VERSION_get();
  public static readonly int CUSTOMDATATYPE_INFO_HASSUBDESCRIPTION = C4dApiPINVOKE.CUSTOMDATATYPE_INFO_HASSUBDESCRIPTION_get();
  public static readonly int CUSTOMDATATYPE_INFO_NEEDDATAFORSUBDESC = C4dApiPINVOKE.CUSTOMDATATYPE_INFO_NEEDDATAFORSUBDESC_get();
  public static readonly int CUSTOMDATATYPE_INFO_TOGGLEDISPLAY = C4dApiPINVOKE.CUSTOMDATATYPE_INFO_TOGGLEDISPLAY_get();
  public static readonly int CUSTOMDATATYPE_INFO_DONTREGISTERGVTYPE = C4dApiPINVOKE.CUSTOMDATATYPE_INFO_DONTREGISTERGVTYPE_get();
  public static readonly int CUSTOMDATATYPE_INFO_SUBDESCRIPTIONDISABLEGUI = C4dApiPINVOKE.CUSTOMDATATYPE_INFO_SUBDESCRIPTIONDISABLEGUI_get();
  public static readonly int CUSTOMDATATYPE_INFO_UNDOSAMECUSTOMGUI = C4dApiPINVOKE.CUSTOMDATATYPE_INFO_UNDOSAMECUSTOMGUI_get();
  public static readonly int CUSTOMDATATYPE_INFO_HASSUBDESCRIPTION_NOANIM = C4dApiPINVOKE.CUSTOMDATATYPE_INFO_HASSUBDESCRIPTION_NOANIM_get();
  public static readonly int CUSTOMDATATYPE_INFO_LOADSAVE = C4dApiPINVOKE.CUSTOMDATATYPE_INFO_LOADSAVE_get();
  public static readonly int CUSTOMGUI_INEXCLUDE_LIST = C4dApiPINVOKE.CUSTOMGUI_INEXCLUDE_LIST_get();
  public static readonly int CUSTOMDATATYPE_INEXCLUDE_LIST = C4dApiPINVOKE.CUSTOMDATATYPE_INEXCLUDE_LIST_get();
  public static readonly int IN_EXCLUDE_DATA_SELECTION = C4dApiPINVOKE.IN_EXCLUDE_DATA_SELECTION_get();
  public static readonly int IN_EXCLUDE_FLAG_NUM_FLAGS = C4dApiPINVOKE.IN_EXCLUDE_FLAG_NUM_FLAGS_get();
  public static readonly int IN_EXCLUDE_FLAG_INIT_STATE = C4dApiPINVOKE.IN_EXCLUDE_FLAG_INIT_STATE_get();
  public static readonly int IN_EXCLUDE_FLAG_SEND_SELCHANGE_MSG = C4dApiPINVOKE.IN_EXCLUDE_FLAG_SEND_SELCHANGE_MSG_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_01_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_01_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_01_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_01_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_02_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_02_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_02_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_02_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_03_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_03_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_03_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_03_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_04_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_04_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_04_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_04_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_05_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_05_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_05_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_05_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_06_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_06_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_06_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_06_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_07_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_07_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_07_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_07_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_08_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_08_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_08_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_08_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_09_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_09_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_09_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_09_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_10_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_10_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_10_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_10_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_11_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_11_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_11_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_11_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_12_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_12_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_12_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_12_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_13_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_13_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_13_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_13_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_14_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_14_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_14_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_14_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_15_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_15_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_15_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_15_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_16_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_16_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_16_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_16_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_17_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_17_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_17_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_17_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_18_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_18_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_18_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_18_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_19_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_19_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_19_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_19_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_20_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_20_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_20_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_20_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_21_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_21_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_21_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_21_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_22_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_22_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_22_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_22_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_23_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_23_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_23_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_23_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_24_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_24_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_24_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_24_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_25_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_25_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_25_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_25_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_26_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_26_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_26_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_26_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_27_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_27_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_27_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_27_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_28_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_28_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_28_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_28_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_29_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_29_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_29_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_29_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_30_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_30_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_30_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_30_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_31_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_31_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_31_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_31_OFF_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_32_ON = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_32_ON_get();
  public static readonly int IN_EXCLUDE_FLAG_IMAGE_32_OFF = C4dApiPINVOKE.IN_EXCLUDE_FLAG_IMAGE_32_OFF_get();
  public static readonly double MAXRANGE = C4dApiPINVOKE.MAXRANGE_get();
  public static readonly int MAXELEMENTS = C4dApiPINVOKE.MAXELEMENTS_get();
  public static readonly double MIN_EPSILON = C4dApiPINVOKE.MIN_EPSILON_get();
}

}
