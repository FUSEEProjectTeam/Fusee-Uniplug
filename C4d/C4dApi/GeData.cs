/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace C4d {

using System;
using System.Runtime.InteropServices;

public class GeData : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GeData(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(GeData obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~GeData() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          C4dApiPINVOKE.delete_GeData(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public GeData() : this(C4dApiPINVOKE.new_GeData__SWIG_0(), true) {
  }

  public GeData(int n) : this(C4dApiPINVOKE.new_GeData__SWIG_1(n), true) {
  }

  public GeData(double n) : this(C4dApiPINVOKE.new_GeData__SWIG_2(n), true) {
  }

  public GeData(GeData n) : this(C4dApiPINVOKE.new_GeData__SWIG_3(GeData.getCPtr(n)), true) {
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public GeData(float n) : this(C4dApiPINVOKE.new_GeData__SWIG_5(n), true) {
  }

  public GeData(SWIGTYPE_p_void v, VOIDVALUETYPE dummy) : this(C4dApiPINVOKE.new_GeData__SWIG_6(SWIGTYPE_p_void.getCPtr(v), (int)dummy), true) {
  }

  public GeData(SWIGTYPE_p_LLONG v, LLONGVALUETYPE dummy) : this(C4dApiPINVOKE.new_GeData__SWIG_7(SWIGTYPE_p_LLONG.getCPtr(v), (int)dummy), true) {
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public GeData(Fusee.Math.Core.Vector3D /* constVector&_cstype */ n) : this(C4dApiPINVOKE.new_GeData__SWIG_8(ref n /* constVector&_csin */), true) {
  }

  public GeData(SWIGTYPE_p_CHAR n) : this(C4dApiPINVOKE.new_GeData__SWIG_9(SWIGTYPE_p_CHAR.getCPtr(n)), true) {
  }

  public GeData(string /* constString&_cstype */ n) : this(C4dApiPINVOKE.new_GeData__SWIG_10(n), true) {
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public GeData(SWIGTYPE_p_Filename n) : this(C4dApiPINVOKE.new_GeData__SWIG_11(SWIGTYPE_p_Filename.getCPtr(n)), true) {
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public GeData(SWIGTYPE_p_BaseTime n) : this(C4dApiPINVOKE.new_GeData__SWIG_12(SWIGTYPE_p_BaseTime.getCPtr(n)), true) {
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public GeData(BaseContainer n) : this(C4dApiPINVOKE.new_GeData__SWIG_13(BaseContainer.getCPtr(n)), true) {
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public GeData(BaseLink n) : this(C4dApiPINVOKE.new_GeData__SWIG_14(BaseLink.getCPtr(n)), true) {
  }

  public GeData(int type, CustomDataType data) : this(C4dApiPINVOKE.new_GeData__SWIG_15(type, CustomDataType.getCPtr(data)), true) {
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public GeData(int type, DEFAULTVALUETYPE v) : this(C4dApiPINVOKE.new_GeData__SWIG_16(type, (int)v), true) {
  }

  public bool SetDefault(int type) {
    bool ret = C4dApiPINVOKE.GeData_SetDefault(swigCPtr, type);
    return ret;
  }

  public void Free() {
    C4dApiPINVOKE.GeData_Free(swigCPtr);
  }

  public int GetType() {
    int ret = C4dApiPINVOKE.GeData_GetType(swigCPtr);
    return ret;
  }

  public bool GetBool() {
    bool ret = C4dApiPINVOKE.GeData_GetBool(swigCPtr);
    return ret;
  }

  public int GetLong() {
    int ret = C4dApiPINVOKE.GeData_GetLong(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_LLONG GetLLong() {
    SWIGTYPE_p_LLONG ret = new SWIGTYPE_p_LLONG(C4dApiPINVOKE.GeData_GetLLong(swigCPtr), true);
    return ret;
  }

  public double GetReal() {
    double ret = C4dApiPINVOKE.GeData_GetReal(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_void GetVoid() {
    IntPtr cPtr = C4dApiPINVOKE.GeData_GetVoid(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public Fusee.Math.Core.Vector3D /* constVector&_cstype_out */ GetVector()  {  /* <constVector&_csout> */
      IntPtr p_ret = C4dApiPINVOKE.GeData_GetVector(swigCPtr);
      Fusee.Math.Core.Vector3D ret;
      unsafe {ret = Fusee.Math.ArrayConversion.Convert.ArrayDoubleToVector3D((double *)p_ret);}
      return ret;
   } /* </constVector&_csout> */ 

  public Fusee.Math.Core.Matrix4D /* constMatrix&_cstype_out */ GetMatrix()  {  /* <constMatrix&_csout> */
      IntPtr p_ret = C4dApiPINVOKE.GeData_GetMatrix(swigCPtr);
      Fusee.Math.Core.Matrix4D ret;
      unsafe {ret = Fusee.Math.ArrayConversion.Convert.ArrayDoubleC4DLayoutToMatrix4D((double *)p_ret);}
      return ret;
   } /* </constMatrix&_csout> */ 

  public string /* constString&_cstype */ GetString() {
    string ret = C4dApiPINVOKE.GeData_GetString(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_Filename GetFilename() {
    SWIGTYPE_p_Filename ret = new SWIGTYPE_p_Filename(C4dApiPINVOKE.GeData_GetFilename(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_BaseTime GetTime() {
    SWIGTYPE_p_BaseTime ret = new SWIGTYPE_p_BaseTime(C4dApiPINVOKE.GeData_GetTime(swigCPtr), false);
    return ret;
  }

  public BaseContainer GetContainer() {
    IntPtr cPtr = C4dApiPINVOKE.GeData_GetContainer(swigCPtr);
    BaseContainer ret = (cPtr == IntPtr.Zero) ? null : new BaseContainer(cPtr, false);
    return ret;
  }

  public BaseLink GetBaseLink() {
    IntPtr cPtr = C4dApiPINVOKE.GeData_GetBaseLink(swigCPtr);
    BaseLink ret = (cPtr == IntPtr.Zero) ? null : new BaseLink(cPtr, false);
    return ret;
  }

  public CustomDataType GetCustomDataType(int datatype) {
    IntPtr cPtr = C4dApiPINVOKE.GeData_GetCustomDataType(swigCPtr, datatype);
    CustomDataType ret = (cPtr == IntPtr.Zero) ? null : new CustomDataType(cPtr, false);
    return ret;
  }

  public BaseList2D GetLink(BaseDocument doc, int instanceof) {
    IntPtr cPtr = C4dApiPINVOKE.GeData_GetLink__SWIG_0(swigCPtr, BaseDocument.getCPtr(doc), instanceof);
    BaseList2D ret = (cPtr == IntPtr.Zero) ? null : new BaseList2D(cPtr, false);
    return ret;
  }

  public BaseList2D GetLink(BaseDocument doc) {
    IntPtr cPtr = C4dApiPINVOKE.GeData_GetLink__SWIG_1(swigCPtr, BaseDocument.getCPtr(doc));
    BaseList2D ret = (cPtr == IntPtr.Zero) ? null : new BaseList2D(cPtr, false);
    return ret;
  }

  public C4DAtomGoal GetLinkAtom(BaseDocument doc, int instanceof) {
    IntPtr cPtr = C4dApiPINVOKE.GeData_GetLinkAtom__SWIG_0(swigCPtr, BaseDocument.getCPtr(doc), instanceof);
    C4DAtomGoal ret = (cPtr == IntPtr.Zero) ? null : new C4DAtomGoal(cPtr, false);
    return ret;
  }

  public C4DAtomGoal GetLinkAtom(BaseDocument doc) {
    IntPtr cPtr = C4dApiPINVOKE.GeData_GetLinkAtom__SWIG_1(swigCPtr, BaseDocument.getCPtr(doc));
    C4DAtomGoal ret = (cPtr == IntPtr.Zero) ? null : new C4DAtomGoal(cPtr, false);
    return ret;
  }

  public void CopyData(GeData dest, AliasTrans aliastrans) {
    C4dApiPINVOKE.GeData_CopyData(swigCPtr, GeData.getCPtr(dest), AliasTrans.getCPtr(aliastrans));
  }

  public void SetReal(double v) {
    C4dApiPINVOKE.GeData_SetReal(swigCPtr, v);
  }

  public void SetLong(int v) {
    C4dApiPINVOKE.GeData_SetLong(swigCPtr, v);
  }

  public void SetLLong(SWIGTYPE_p_LLONG v) {
    C4dApiPINVOKE.GeData_SetLLong(swigCPtr, SWIGTYPE_p_LLONG.getCPtr(v));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetVoid(SWIGTYPE_p_void v) {
    C4dApiPINVOKE.GeData_SetVoid(swigCPtr, SWIGTYPE_p_void.getCPtr(v));
  }

  public void SetVector(Fusee.Math.Core.Vector3D /* constVector&_cstype */ v) {
    C4dApiPINVOKE.GeData_SetVector(swigCPtr, ref v /* constVector&_csin */);
  }

  public void SetMatrix(ref Fusee.Math.Core.Matrix4D /* constMatrix&_cstype */ v) {
    double[] adbl_v;
    unsafe {adbl_v = Fusee.Math.ArrayConversion.Convert.Matrix4DToArrayDoubleC4DLayout(v);    fixed (double *pdbl_v = adbl_v) {
    /* constMatrix&_csin_pre */
    try {
      C4dApiPINVOKE.GeData_SetMatrix(swigCPtr, (IntPtr) pdbl_v /* constMatrix&_csin */);
    } finally {
        // NOP v = Fusee.Math.ArrayConversion.Convert.ArrayDoubleC4DLayoutToMatrix4D(pdbl_v);
        /* constMatrix&_csin_post */
    }
} } /* constMatrix&_csin_terminator */
  }

  public void SetString(string /* constString&_cstype */ v) {
    C4dApiPINVOKE.GeData_SetString(swigCPtr, v);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFilename(SWIGTYPE_p_Filename v) {
    C4dApiPINVOKE.GeData_SetFilename(swigCPtr, SWIGTYPE_p_Filename.getCPtr(v));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetBaseTime(SWIGTYPE_p_BaseTime v) {
    C4dApiPINVOKE.GeData_SetBaseTime(swigCPtr, SWIGTYPE_p_BaseTime.getCPtr(v));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetContainer(BaseContainer v) {
    C4dApiPINVOKE.GeData_SetContainer(swigCPtr, BaseContainer.getCPtr(v));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetBaseLink(BaseLink v) {
    C4dApiPINVOKE.GeData_SetBaseLink(swigCPtr, BaseLink.getCPtr(v));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCustomDataType(int datatype, CustomDataType v) {
    C4dApiPINVOKE.GeData_SetCustomDataType(swigCPtr, datatype, CustomDataType.getCPtr(v));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
