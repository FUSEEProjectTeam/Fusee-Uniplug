/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace C4d {

using System;
using System.Runtime.InteropServices;

public class GvRun : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GvRun(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(GvRun obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public void SetCalculationTable(GvCalcTable t) {
    C4dApiPINVOKE.GvRun_SetCalculationTable(swigCPtr, GvCalcTable.getCPtr(t));
  }

  public bool AddNodeToCalculationTable(GvNode node, bool force_add) {
    bool ret = C4dApiPINVOKE.GvRun_AddNodeToCalculationTable__SWIG_0(swigCPtr, GvNode.getCPtr(node), force_add);
    return ret;
  }

  public bool AddNodeToCalculationTable(GvNode node) {
    bool ret = C4dApiPINVOKE.GvRun_AddNodeToCalculationTable__SWIG_1(swigCPtr, GvNode.getCPtr(node));
    return ret;
  }

  public bool CalculateTable(GvCalc calc) {
    bool ret = C4dApiPINVOKE.GvRun_CalculateTable(swigCPtr, GvCalc.getCPtr(calc));
    return ret;
  }

  public int GetCpuID() {
    int ret = C4dApiPINVOKE.GvRun_GetCpuID(swigCPtr);
    return ret;
  }

  public void IncrementID() {
    C4dApiPINVOKE.GvRun_IncrementID(swigCPtr);
  }

  public void SetError(GvError error) {
    C4dApiPINVOKE.GvRun_SetError(swigCPtr, (int)error);
  }

  public GvError GetError() {
    GvError ret = (GvError)C4dApiPINVOKE.GvRun_GetError(swigCPtr);
    return ret;
  }

  public void SetState(GvCalcState state) {
    C4dApiPINVOKE.GvRun_SetState(swigCPtr, (int)state);
  }

  public GvCalcState GetState() {
    GvCalcState ret = (GvCalcState)C4dApiPINVOKE.GvRun_GetState(swigCPtr);
    return ret;
  }

  public bool IsIterationPath() {
    bool ret = C4dApiPINVOKE.GvRun_IsIterationPath(swigCPtr);
    return ret;
  }

}

}
