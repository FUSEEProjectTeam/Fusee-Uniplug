/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace C4d {

using System;
using System.Runtime.InteropServices;

public class Hierarchy : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Hierarchy(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Hierarchy obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Hierarchy() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          C4dApiPINVOKE.delete_Hierarchy(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual SWIGTYPE_p_void Alloc() {
    IntPtr cPtr = C4dApiPINVOKE.Hierarchy_Alloc(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public virtual void Free(SWIGTYPE_p_void data) {
    C4dApiPINVOKE.Hierarchy_Free(swigCPtr, SWIGTYPE_p_void.getCPtr(data));
  }

  public virtual void CopyTo(SWIGTYPE_p_void src, SWIGTYPE_p_void dst) {
    C4dApiPINVOKE.Hierarchy_CopyTo(swigCPtr, SWIGTYPE_p_void.getCPtr(src), SWIGTYPE_p_void.getCPtr(dst));
  }

  public virtual bool Do(SWIGTYPE_p_void data, BaseObject op, ref Fusee.Math.Core.Matrix4D /* constMatrix&_cstype */ mg, bool controlobject) {
    double[] adbl_mg;
    unsafe {adbl_mg = Fusee.Math.ArrayConversion.Convert.Matrix4DToArrayDoubleC4DLayout(mg);    fixed (double *pdbl_mg = adbl_mg) {
    /* constMatrix&_csin_pre */
    try {
      bool ret = C4dApiPINVOKE.Hierarchy_Do(swigCPtr, SWIGTYPE_p_void.getCPtr(data), BaseObject.getCPtr(op), (IntPtr) pdbl_mg /* constMatrix&_csin */, controlobject);
      return ret;
    } finally {
        // NOP mg = Fusee.Math.ArrayConversion.Convert.ArrayDoubleC4DLayoutToMatrix4D(pdbl_mg);
        /* constMatrix&_csin_post */
    }
} } /* constMatrix&_csin_terminator */
  }

  public bool Run(BaseDocument doc, bool spheres, double lod, bool uselod, BUILDFLAGS flags, SWIGTYPE_p_void startdata, BaseThread bt) {
    bool ret = C4dApiPINVOKE.Hierarchy_Run(swigCPtr, BaseDocument.getCPtr(doc), spheres, lod, uselod, (int)flags, SWIGTYPE_p_void.getCPtr(startdata), BaseThread.getCPtr(bt));
    return ret;
  }

}

}
