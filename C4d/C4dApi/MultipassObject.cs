/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace C4d {

using System;
using System.Runtime.InteropServices;

public class MultipassObject : BaseList2D {
  private HandleRef swigCPtr;

  internal MultipassObject(IntPtr cPtr, bool cMemoryOwn) : base(C4dApiPINVOKE.MultipassObject_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(MultipassObject obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public new MultipassObject GetNext() {
    IntPtr cPtr = C4dApiPINVOKE.MultipassObject_GetNext(swigCPtr);
    MultipassObject ret = (cPtr == IntPtr.Zero) ? null : new MultipassObject(cPtr, false);
    return ret;
  }

  public new MultipassObject GetPred() {
    IntPtr cPtr = C4dApiPINVOKE.MultipassObject_GetPred(swigCPtr);
    MultipassObject ret = (cPtr == IntPtr.Zero) ? null : new MultipassObject(cPtr, false);
    return ret;
  }

}

}
