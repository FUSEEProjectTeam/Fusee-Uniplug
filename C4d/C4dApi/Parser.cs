/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace C4d {

using System;
using System.Runtime.InteropServices;

public class Parser : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Parser(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Parser obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public bool Eval(string /* constString&_cstype */ str, SWIGTYPE_p_LONG error, SWIGTYPE_p_Real res, int unit, int angletype, int basis) {
    bool ret = C4dApiPINVOKE.Parser_Eval__SWIG_0(swigCPtr, str, SWIGTYPE_p_LONG.getCPtr(error), SWIGTYPE_p_Real.getCPtr(res), unit, angletype, basis);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Eval(string /* constString&_cstype */ str, SWIGTYPE_p_LONG error, SWIGTYPE_p_Real res, int unit, int angletype) {
    bool ret = C4dApiPINVOKE.Parser_Eval__SWIG_1(swigCPtr, str, SWIGTYPE_p_LONG.getCPtr(error), SWIGTYPE_p_Real.getCPtr(res), unit, angletype);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Eval(string /* constString&_cstype */ str, SWIGTYPE_p_LONG error, SWIGTYPE_p_Real res, int unit) {
    bool ret = C4dApiPINVOKE.Parser_Eval__SWIG_2(swigCPtr, str, SWIGTYPE_p_LONG.getCPtr(error), SWIGTYPE_p_Real.getCPtr(res), unit);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Eval(string /* constString&_cstype */ str, SWIGTYPE_p_LONG error, SWIGTYPE_p_Real res) {
    bool ret = C4dApiPINVOKE.Parser_Eval__SWIG_3(swigCPtr, str, SWIGTYPE_p_LONG.getCPtr(error), SWIGTYPE_p_Real.getCPtr(res));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool EvalLong(string /* constString&_cstype */ str, SWIGTYPE_p_LONG error, SWIGTYPE_p_LONG res, int unit, int basis) {
    bool ret = C4dApiPINVOKE.Parser_EvalLong(swigCPtr, str, SWIGTYPE_p_LONG.getCPtr(error), SWIGTYPE_p_LONG.getCPtr(res), unit, basis);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Parser Alloc() {
    IntPtr cPtr = C4dApiPINVOKE.Parser_Alloc();
    Parser ret = (cPtr == IntPtr.Zero) ? null : new Parser(cPtr, false);
    return ret;
  }

  public static void Free(SWIGTYPE_p_p_Parser pr) {
    C4dApiPINVOKE.Parser_Free(SWIGTYPE_p_p_Parser.getCPtr(pr));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool AddVar(string /* constString&_cstype */ str, SWIGTYPE_p_Real value, bool case_sensitive) {
    bool ret = C4dApiPINVOKE.Parser_AddVar__SWIG_0(swigCPtr, str, SWIGTYPE_p_Real.getCPtr(value), case_sensitive);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AddVar(string /* constString&_cstype */ str, SWIGTYPE_p_Real value) {
    bool ret = C4dApiPINVOKE.Parser_AddVar__SWIG_1(swigCPtr, str, SWIGTYPE_p_Real.getCPtr(value));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool RemoveVar(string /* constString&_cstype */ s, bool case_sensitive) {
    bool ret = C4dApiPINVOKE.Parser_RemoveVar__SWIG_0(swigCPtr, s, case_sensitive);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool RemoveVar(string /* constString&_cstype */ s) {
    bool ret = C4dApiPINVOKE.Parser_RemoveVar__SWIG_1(swigCPtr, s);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool RemoveAllVars() {
    bool ret = C4dApiPINVOKE.Parser_RemoveAllVars(swigCPtr);
    return ret;
  }

  public void GetParserData(ParserCache p) {
    C4dApiPINVOKE.Parser_GetParserData(swigCPtr, ParserCache.getCPtr(p));
  }

  public bool Init(string /* constString&_cstype */ s, SWIGTYPE_p_LONG error, int unit, int angle_unit, int arg4) {
    bool ret = C4dApiPINVOKE.Parser_Init__SWIG_0(swigCPtr, s, SWIGTYPE_p_LONG.getCPtr(error), unit, angle_unit, arg4);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Init(string /* constString&_cstype */ s, SWIGTYPE_p_LONG error, int unit, int angle_unit) {
    bool ret = C4dApiPINVOKE.Parser_Init__SWIG_1(swigCPtr, s, SWIGTYPE_p_LONG.getCPtr(error), unit, angle_unit);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Init(string /* constString&_cstype */ s, SWIGTYPE_p_LONG error, int unit) {
    bool ret = C4dApiPINVOKE.Parser_Init__SWIG_2(swigCPtr, s, SWIGTYPE_p_LONG.getCPtr(error), unit);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Init(string /* constString&_cstype */ s, SWIGTYPE_p_LONG error) {
    bool ret = C4dApiPINVOKE.Parser_Init__SWIG_3(swigCPtr, s, SWIGTYPE_p_LONG.getCPtr(error));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ReEval(SWIGTYPE_p_Real result, SWIGTYPE_p_LONG error) {
    bool ret = C4dApiPINVOKE.Parser_ReEval(swigCPtr, SWIGTYPE_p_Real.getCPtr(result), SWIGTYPE_p_LONG.getCPtr(error));
    return ret;
  }

  public bool Calculate(ParserCache pdat, SWIGTYPE_p_Real result, SWIGTYPE_p_LONG error) {
    bool ret = C4dApiPINVOKE.Parser_Calculate(swigCPtr, ParserCache.getCPtr(pdat), SWIGTYPE_p_Real.getCPtr(result), SWIGTYPE_p_LONG.getCPtr(error));
    return ret;
  }

  public bool AddVarLong(string /* constString&_cstype */ str, SWIGTYPE_p_LONG value, bool case_sensitive) {
    bool ret = C4dApiPINVOKE.Parser_AddVarLong__SWIG_0(swigCPtr, str, SWIGTYPE_p_LONG.getCPtr(value), case_sensitive);
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AddVarLong(string /* constString&_cstype */ str, SWIGTYPE_p_LONG value) {
    bool ret = C4dApiPINVOKE.Parser_AddVarLong__SWIG_1(swigCPtr, str, SWIGTYPE_p_LONG.getCPtr(value));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ReEvalLong(SWIGTYPE_p_LONG result, SWIGTYPE_p_LONG error) {
    bool ret = C4dApiPINVOKE.Parser_ReEvalLong(swigCPtr, SWIGTYPE_p_LONG.getCPtr(result), SWIGTYPE_p_LONG.getCPtr(error));
    return ret;
  }

  public bool CalculateLong(ParserCache pdat, SWIGTYPE_p_LONG result, SWIGTYPE_p_LONG error) {
    bool ret = C4dApiPINVOKE.Parser_CalculateLong(swigCPtr, ParserCache.getCPtr(pdat), SWIGTYPE_p_LONG.getCPtr(result), SWIGTYPE_p_LONG.getCPtr(error));
    return ret;
  }

  public bool Reset(ParserCache p) {
    bool ret = C4dApiPINVOKE.Parser_Reset__SWIG_0(swigCPtr, ParserCache.getCPtr(p));
    return ret;
  }

  public bool Reset() {
    bool ret = C4dApiPINVOKE.Parser_Reset__SWIG_1(swigCPtr);
    return ret;
  }

}

}
