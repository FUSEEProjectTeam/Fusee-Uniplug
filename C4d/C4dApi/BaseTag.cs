/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace C4d {

using System;
using System.Runtime.InteropServices;

public class BaseTag : BaseList2D {
  private HandleRef swigCPtr;

  internal BaseTag(IntPtr cPtr, bool cMemoryOwn) : base(C4dApiPINVOKE.BaseTag_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BaseTag obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public BaseObject GetObject() {
    IntPtr cPtr = C4dApiPINVOKE.BaseTag_GetObject(swigCPtr);
    BaseObject ret = (cPtr == IntPtr.Zero) ? null : new BaseObject(cPtr, false);
    return ret;
  }

  public new BaseTag GetNext() {
    IntPtr cPtr = C4dApiPINVOKE.BaseTag_GetNext(swigCPtr);
    BaseTag ret = (BaseTag) C4dApiPINVOKE.InstantiateConcreteObject(cPtr, false);
    return ret;
}

  public new BaseTag GetPred() {
    IntPtr cPtr = C4dApiPINVOKE.BaseTag_GetPred(swigCPtr);
    BaseTag ret = (BaseTag) C4dApiPINVOKE.InstantiateConcreteObject(cPtr, false);
    return ret;
}

  public BaseTag GetOrigin() {
    IntPtr cPtr = C4dApiPINVOKE.BaseTag_GetOrigin(swigCPtr);
    BaseTag ret = (BaseTag) C4dApiPINVOKE.InstantiateConcreteObject(cPtr, false);
    return ret;
}

  public new static BaseTag Alloc(int type) {
    IntPtr cPtr = C4dApiPINVOKE.BaseTag_Alloc(type);
    BaseTag ret = (BaseTag) C4dApiPINVOKE.InstantiateConcreteObject(cPtr, false);
    return ret;
}

  public static void Free(SWIGTYPE_p_p_BaseTag bl) {
    C4dApiPINVOKE.BaseTag_Free(SWIGTYPE_p_p_BaseTag.getCPtr(bl));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
