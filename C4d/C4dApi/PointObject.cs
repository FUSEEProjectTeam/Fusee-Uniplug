/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace C4d {

using System;
using System.Runtime.InteropServices;

public class PointObject : BaseObject {
  private HandleRef swigCPtr;

  internal PointObject(IntPtr cPtr, bool cMemoryOwn) : base(C4dApiPINVOKE.PointObject_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(PointObject obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public BaseSelect GetPointS() {
    IntPtr cPtr = C4dApiPINVOKE.PointObject_GetPointS(swigCPtr);
    BaseSelect ret = (cPtr == IntPtr.Zero) ? null : new BaseSelect(cPtr, false);
    return ret;
  }

  public BaseSelect GetPointH() {
    IntPtr cPtr = C4dApiPINVOKE.PointObject_GetPointH(swigCPtr);
    BaseSelect ret = (cPtr == IntPtr.Zero) ? null : new BaseSelect(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Vector GetPointR() {
    IntPtr cPtr = C4dApiPINVOKE.PointObject_GetPointR(swigCPtr);
    SWIGTYPE_p_Vector ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_Vector(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_Vector GetPointW() {
    IntPtr cPtr = C4dApiPINVOKE.PointObject_GetPointW(swigCPtr);
    SWIGTYPE_p_Vector ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_Vector(cPtr, false);
    return ret;
  }

  public int GetPointCount() {
    int ret = C4dApiPINVOKE.PointObject_GetPointCount(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_SReal CalcVertexMap(BaseObject modifier) {
    IntPtr cPtr = C4dApiPINVOKE.PointObject_CalcVertexMap(swigCPtr, BaseObject.getCPtr(modifier));
    SWIGTYPE_p_SReal ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_SReal(cPtr, false);
    return ret;
  }

  public bool ResizeObject(int pcnt) {
    bool ret = C4dApiPINVOKE.PointObject_ResizeObject(swigCPtr, pcnt);
    return ret;
  }

  public Fusee.Math.Core.Vector3D /* Vector_cstype_out */ GetPointAt(int inx)  {  /* <Vector_csout> */
      Fusee.Math.Core.Vector3D ret = C4dApiPINVOKE.PointObject_GetPointAt(swigCPtr, inx);
      return ret;
   } /* <Vector_csout> */ 

  public void SetPointAt(int inx, Fusee.Math.Core.Vector3D /* Vectorcstype */ v) {
    C4dApiPINVOKE.PointObject_SetPointAt(swigCPtr, inx, v /* Vector_csin */);
  }

  public static PointObject GetPointObject(BaseObject iObj) {
    IntPtr cPtr = C4dApiPINVOKE.PointObject_GetPointObject(BaseObject.getCPtr(iObj));
    PointObject ret = (cPtr == IntPtr.Zero) ? null : new PointObject(cPtr, false);
    return ret;
  }

}

}
