/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 0.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace C4d {

using System;
using System.Runtime.InteropServices;

public class InclusionTable : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal InclusionTable(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(InclusionTable obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public bool Check(BaseList2D op) {
    bool ret = C4dApiPINVOKE.InclusionTable_Check__SWIG_0(swigCPtr, BaseList2D.getCPtr(op));
    return ret;
  }

  public bool Check(BaseList2D op, SWIGTYPE_p_LONG flags) {
    bool ret = C4dApiPINVOKE.InclusionTable_Check__SWIG_1(swigCPtr, BaseList2D.getCPtr(op), SWIGTYPE_p_LONG.getCPtr(flags));
    if (C4dApiPINVOKE.SWIGPendingException.Pending) throw C4dApiPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetObjectCount() {
    int ret = C4dApiPINVOKE.InclusionTable_GetObjectCount(swigCPtr);
    return ret;
  }

  public BaseList2D GetObject(int lIndex) {
    IntPtr cPtr = C4dApiPINVOKE.InclusionTable_GetObject(swigCPtr, lIndex);
    BaseList2D ret = (cPtr == IntPtr.Zero) ? null : new BaseList2D(cPtr, false);
    return ret;
  }

}

}
